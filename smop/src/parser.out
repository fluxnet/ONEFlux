Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLASSDEF
    END_UNEXPECTED

Grammar

Rule 0     S' -> top
Rule 1     top -> <empty>
Rule 2     top -> top stmt
Rule 3     top -> top END_STMT
Rule 4     top -> top END_FUNCTION
Rule 5     arg1 -> STRING
Rule 6     arg1 -> NUMBER
Rule 7     arg1 -> IDENT
Rule 8     arg1 -> GLOBAL
Rule 9     arg_list -> ident_init_opt
Rule 10    arg_list -> arg_list COMMA ident_init_opt
Rule 11    args -> arg1
Rule 12    args -> args arg1
Rule 13    break_stmt -> BREAK SEMI
Rule 14    case_list -> <empty>
Rule 15    case_list -> CASE expr sep stmt_list_opt case_list
Rule 16    case_list -> CASE expr error stmt_list_opt case_list
Rule 17    case_list -> OTHERWISE stmt_list
Rule 18    cellarray -> LBRACE RBRACE
Rule 19    cellarray -> LBRACE expr_list RBRACE
Rule 20    cellarray -> LBRACE concat_list RBRACE
Rule 21    cellarray -> LBRACE concat_list SEMI RBRACE
Rule 22    expr -> expr LBRACE expr_list RBRACE
Rule 23    expr -> expr LBRACE RBRACE
Rule 24    command -> ident args SEMI
Rule 25    comment_stmt -> COMMENT
Rule 26    concat_list -> expr_list SEMI expr_list
Rule 27    concat_list -> concat_list SEMI expr_list
Rule 28    continue_stmt -> CONTINUE SEMI
Rule 29    elseif_stmt -> <empty>
Rule 30    elseif_stmt -> ELSE stmt_list_opt
Rule 31    elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt
Rule 32    elseif_stmt -> ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt
Rule 33    error_stmt -> ERROR_STMT SEMI
Rule 34    expr -> ident
Rule 35    expr -> end
Rule 36    expr -> number
Rule 37    expr -> string
Rule 38    expr -> colon
Rule 39    expr -> NEG
Rule 40    expr -> matrix
Rule 41    expr -> cellarray
Rule 42    expr -> expr2
Rule 43    expr -> expr1
Rule 44    expr -> lambda_expr
Rule 45    expr -> expr PLUSPLUS
Rule 46    expr -> expr MINUSMINUS
Rule 47    expr1 -> MINUS expr
Rule 48    expr1 -> PLUS expr
Rule 49    expr1 -> NEG expr
Rule 50    expr1 -> HANDLE ident
Rule 51    expr1 -> PLUSPLUS ident
Rule 52    expr1 -> MINUSMINUS ident
Rule 53    expr2 -> expr AND expr
Rule 54    expr2 -> expr ANDAND expr
Rule 55    expr2 -> expr BACKSLASH expr
Rule 56    expr2 -> expr COLON expr
Rule 57    expr2 -> expr DIV expr
Rule 58    expr2 -> expr DOT expr
Rule 59    expr2 -> expr DOTDIV expr
Rule 60    expr2 -> expr DOTDIVEQ expr
Rule 61    expr2 -> expr DOTEXP expr
Rule 62    expr2 -> expr DOTMUL expr
Rule 63    expr2 -> expr DOTMULEQ expr
Rule 64    expr2 -> expr EQEQ expr
Rule 65    expr2 -> expr POW expr
Rule 66    expr2 -> expr EXP expr
Rule 67    expr2 -> expr EXPEQ expr
Rule 68    expr2 -> expr GE expr
Rule 69    expr2 -> expr GT expr
Rule 70    expr2 -> expr LE expr
Rule 71    expr2 -> expr LT expr
Rule 72    expr2 -> expr MINUS expr
Rule 73    expr2 -> expr MUL expr
Rule 74    expr2 -> expr NE expr
Rule 75    expr2 -> expr OR expr
Rule 76    expr2 -> expr OROR expr
Rule 77    expr2 -> expr PLUS expr
Rule 78    expr2 -> expr EQ expr
Rule 79    expr2 -> expr MULEQ expr
Rule 80    expr2 -> expr DIVEQ expr
Rule 81    expr2 -> expr MINUSEQ expr
Rule 82    expr2 -> expr PLUSEQ expr
Rule 83    expr2 -> expr OREQ expr
Rule 84    expr2 -> expr ANDEQ expr
Rule 85    colon -> COLON
Rule 86    end -> END_EXPR
Rule 87    ident -> IDENT
Rule 88    ident_init_opt -> NEG
Rule 89    ident_init_opt -> ident
Rule 90    ident_init_opt -> ident EQ expr
Rule 91    expr_list -> exprs
Rule 92    expr_list -> exprs COMMA
Rule 93    number -> NUMBER
Rule 94    expr_stmt -> expr_list SEMI
Rule 95    string -> STRING
Rule 96    exprs -> expr
Rule 97    exprs -> exprs COMMA expr
Rule 98    expr -> expr FIELD
Rule 99    foo_stmt -> expr OROR expr SEMI
Rule 100   for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT
Rule 101   for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
Rule 102   for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT
Rule 103   func_stmt -> FUNCTION ident lambda_args SEMI
Rule 104   func_stmt -> FUNCTION ret EQ ident lambda_args SEMI
Rule 105   expr -> expr LPAREN expr_list RPAREN
Rule 106   expr -> expr LPAREN RPAREN
Rule 107   global_list -> ident
Rule 108   global_list -> global_list ident
Rule 109   global_stmt -> GLOBAL global_list SEMI
Rule 110   global_stmt -> GLOBAL ident EQ expr SEMI
Rule 111   if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT
Rule 112   if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
Rule 113   lambda_args -> LPAREN RPAREN
Rule 114   lambda_args -> LPAREN arg_list RPAREN
Rule 115   lambda_expr -> HANDLE lambda_args expr
Rule 116   matrix -> LBRACKET RBRACKET
Rule 117   matrix -> LBRACKET concat_list RBRACKET
Rule 118   matrix -> LBRACKET concat_list SEMI RBRACKET
Rule 119   matrix -> LBRACKET expr_list RBRACKET
Rule 120   matrix -> LBRACKET expr_list SEMI RBRACKET
Rule 121   null_stmt -> SEMI
Rule 122   null_stmt -> COMMA
Rule 123   expr -> LPAREN expr RPAREN
Rule 124   persistent_stmt -> PERSISTENT global_list SEMI
Rule 125   persistent_stmt -> PERSISTENT ident EQ expr SEMI
Rule 126   ret -> ident
Rule 127   ret -> LBRACKET RBRACKET
Rule 128   ret -> LBRACKET expr_list RBRACKET
Rule 129   return_stmt -> RETURN SEMI
Rule 130   semi_opt -> <empty>
Rule 131   semi_opt -> semi_opt SEMI
Rule 132   semi_opt -> semi_opt COMMA
Rule 133   sep -> COMMA
Rule 134   sep -> SEMI
Rule 135   stmt -> continue_stmt
Rule 136   stmt -> comment_stmt
Rule 137   stmt -> func_stmt
Rule 138   stmt -> break_stmt
Rule 139   stmt -> expr_stmt
Rule 140   stmt -> global_stmt
Rule 141   stmt -> persistent_stmt
Rule 142   stmt -> error_stmt
Rule 143   stmt -> command
Rule 144   stmt -> for_stmt
Rule 145   stmt -> if_stmt
Rule 146   stmt -> null_stmt
Rule 147   stmt -> return_stmt
Rule 148   stmt -> switch_stmt
Rule 149   stmt -> try_catch
Rule 150   stmt -> while_stmt
Rule 151   stmt -> foo_stmt
Rule 152   stmt -> unwind
Rule 153   stmt_list -> stmt
Rule 154   stmt_list -> stmt_list stmt
Rule 155   stmt_list_opt -> <empty>
Rule 156   stmt_list_opt -> stmt_list
Rule 157   switch_stmt -> SWITCH expr semi_opt case_list END_STMT
Rule 158   expr -> expr TRANSPOSE
Rule 159   try_catch -> TRY stmt_list CATCH stmt_list END_STMT
Rule 160   unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
Rule 161   while_stmt -> WHILE expr SEMI stmt_list END_STMT

Terminals, with rules where they appear

AND                  : 53
ANDAND               : 54
ANDEQ                : 84
BACKSLASH            : 55
BREAK                : 13
CASE                 : 15 16
CATCH                : 159
CLASSDEF             : 
COLON                : 56 85
COMMA                : 10 92 97 122 132 133
COMMENT              : 25
CONTINUE             : 28
DIV                  : 57
DIVEQ                : 80
DOT                  : 58
DOTDIV               : 59
DOTDIVEQ             : 60
DOTEXP               : 61
DOTMUL               : 62
DOTMULEQ             : 63
ELSE                 : 30
ELSEIF               : 31 32
END_EXPR             : 86
END_FUNCTION         : 4
END_STMT             : 3 100 101 102 111 112 157 159 161
END_UNEXPECTED       : 
END_UNWIND_PROTECT   : 160
EQ                   : 78 90 100 101 102 104 110 125
EQEQ                 : 64
ERROR_STMT           : 33
EXP                  : 66
EXPEQ                : 67
FIELD                : 98
FOR                  : 100 101 102
FUNCTION             : 103 104
GE                   : 68
GLOBAL               : 8 109 110
GT                   : 69
HANDLE               : 50 115
IDENT                : 7 87
IF                   : 111 112
LBRACE               : 18 19 20 21 22 23
LBRACKET             : 116 117 118 119 120 127 128
LE                   : 70
LPAREN               : 32 101 105 106 112 113 114 123
LT                   : 71
MINUS                : 47 72
MINUSEQ              : 81
MINUSMINUS           : 46 52
MUL                  : 73
MULEQ                : 79
NE                   : 74
NEG                  : 39 49 88
NUMBER               : 6 93
OR                   : 75
OREQ                 : 83
OROR                 : 76 99
OTHERWISE            : 17
PERSISTENT           : 124 125
PLUS                 : 48 77
PLUSEQ               : 82
PLUSPLUS             : 45 51
POW                  : 65
RBRACE               : 18 19 20 21 22 23
RBRACKET             : 116 117 118 119 120 127 128
RETURN               : 129
RPAREN               : 32 101 105 106 112 113 114 123
SEMI                 : 13 21 24 26 27 28 33 94 99 100 101 102 103 104 109 110 118 120 121 124 125 129 131 134 161
STRING               : 5 95
SWITCH               : 157
TRANSPOSE            : 158
TRY                  : 159
UNWIND_PROTECT       : 160
UNWIND_PROTECT_CLEANUP : 160
WHILE                : 161
error                : 16

Nonterminals, with rules where they appear

arg1                 : 11 12
arg_list             : 10 114
args                 : 12 24
break_stmt           : 138
case_list            : 15 16 157
cellarray            : 41
colon                : 38
command              : 143
comment_stmt         : 136
concat_list          : 20 21 27 117 118
continue_stmt        : 135
elseif_stmt          : 31 32 111 112
end                  : 35
error_stmt           : 142
expr                 : 15 16 22 23 31 32 45 46 47 48 49 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 90 96 97 98 99 99 100 101 102 105 106 110 111 112 115 123 125 157 158 161
expr1                : 43
expr2                : 42
expr_list            : 19 22 26 26 27 94 105 119 120 128
expr_stmt            : 139
exprs                : 91 92 97
foo_stmt             : 151
for_stmt             : 144
func_stmt            : 137
global_list          : 108 109 124
global_stmt          : 140
ident                : 24 34 50 51 52 89 90 100 101 103 104 107 108 110 125 126
ident_init_opt       : 9 10
if_stmt              : 145
lambda_args          : 103 104 115
lambda_expr          : 44
matrix               : 40 102
null_stmt            : 146
number               : 36
persistent_stmt      : 141
ret                  : 104
return_stmt          : 147
semi_opt             : 131 132 157
sep                  : 15 31 111
stmt                 : 2 153 154
stmt_list            : 17 100 101 102 154 156 159 159 160 160 161
stmt_list_opt        : 15 16 30 31 32 111 112
string               : 37
switch_stmt          : 148
top                  : 2 3 4 0
try_catch            : 149
unwind               : 152
while_stmt           : 150

Parsing method: LALR

state 0

    (0) S' -> . top
    (1) top -> .
    (2) top -> . top stmt
    (3) top -> . top END_STMT
    (4) top -> . top END_FUNCTION

    END_STMT        reduce using rule 1 (top -> .)
    END_FUNCTION    reduce using rule 1 (top -> .)
    CONTINUE        reduce using rule 1 (top -> .)
    COMMENT         reduce using rule 1 (top -> .)
    FUNCTION        reduce using rule 1 (top -> .)
    BREAK           reduce using rule 1 (top -> .)
    GLOBAL          reduce using rule 1 (top -> .)
    PERSISTENT      reduce using rule 1 (top -> .)
    ERROR_STMT      reduce using rule 1 (top -> .)
    FOR             reduce using rule 1 (top -> .)
    IF              reduce using rule 1 (top -> .)
    SEMI            reduce using rule 1 (top -> .)
    COMMA           reduce using rule 1 (top -> .)
    RETURN          reduce using rule 1 (top -> .)
    SWITCH          reduce using rule 1 (top -> .)
    TRY             reduce using rule 1 (top -> .)
    WHILE           reduce using rule 1 (top -> .)
    UNWIND_PROTECT  reduce using rule 1 (top -> .)
    IDENT           reduce using rule 1 (top -> .)
    NEG             reduce using rule 1 (top -> .)
    LPAREN          reduce using rule 1 (top -> .)
    END_EXPR        reduce using rule 1 (top -> .)
    NUMBER          reduce using rule 1 (top -> .)
    STRING          reduce using rule 1 (top -> .)
    COLON           reduce using rule 1 (top -> .)
    LBRACKET        reduce using rule 1 (top -> .)
    LBRACE          reduce using rule 1 (top -> .)
    MINUS           reduce using rule 1 (top -> .)
    PLUS            reduce using rule 1 (top -> .)
    HANDLE          reduce using rule 1 (top -> .)
    PLUSPLUS        reduce using rule 1 (top -> .)
    MINUSMINUS      reduce using rule 1 (top -> .)
    $end            reduce using rule 1 (top -> .)

    top                            shift and go to state 1

state 1

    (0) S' -> top .
    (2) top -> top . stmt
    (3) top -> top . END_STMT
    (4) top -> top . END_FUNCTION
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 3
    END_FUNCTION    shift and go to state 4
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 2
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 2

    (2) top -> top stmt .

    END_STMT        reduce using rule 2 (top -> top stmt .)
    END_FUNCTION    reduce using rule 2 (top -> top stmt .)
    CONTINUE        reduce using rule 2 (top -> top stmt .)
    COMMENT         reduce using rule 2 (top -> top stmt .)
    FUNCTION        reduce using rule 2 (top -> top stmt .)
    BREAK           reduce using rule 2 (top -> top stmt .)
    GLOBAL          reduce using rule 2 (top -> top stmt .)
    PERSISTENT      reduce using rule 2 (top -> top stmt .)
    ERROR_STMT      reduce using rule 2 (top -> top stmt .)
    FOR             reduce using rule 2 (top -> top stmt .)
    IF              reduce using rule 2 (top -> top stmt .)
    SEMI            reduce using rule 2 (top -> top stmt .)
    COMMA           reduce using rule 2 (top -> top stmt .)
    RETURN          reduce using rule 2 (top -> top stmt .)
    SWITCH          reduce using rule 2 (top -> top stmt .)
    TRY             reduce using rule 2 (top -> top stmt .)
    WHILE           reduce using rule 2 (top -> top stmt .)
    UNWIND_PROTECT  reduce using rule 2 (top -> top stmt .)
    IDENT           reduce using rule 2 (top -> top stmt .)
    NEG             reduce using rule 2 (top -> top stmt .)
    LPAREN          reduce using rule 2 (top -> top stmt .)
    END_EXPR        reduce using rule 2 (top -> top stmt .)
    NUMBER          reduce using rule 2 (top -> top stmt .)
    STRING          reduce using rule 2 (top -> top stmt .)
    COLON           reduce using rule 2 (top -> top stmt .)
    LBRACKET        reduce using rule 2 (top -> top stmt .)
    LBRACE          reduce using rule 2 (top -> top stmt .)
    MINUS           reduce using rule 2 (top -> top stmt .)
    PLUS            reduce using rule 2 (top -> top stmt .)
    HANDLE          reduce using rule 2 (top -> top stmt .)
    PLUSPLUS        reduce using rule 2 (top -> top stmt .)
    MINUSMINUS      reduce using rule 2 (top -> top stmt .)
    $end            reduce using rule 2 (top -> top stmt .)


state 3

    (3) top -> top END_STMT .

    END_STMT        reduce using rule 3 (top -> top END_STMT .)
    END_FUNCTION    reduce using rule 3 (top -> top END_STMT .)
    CONTINUE        reduce using rule 3 (top -> top END_STMT .)
    COMMENT         reduce using rule 3 (top -> top END_STMT .)
    FUNCTION        reduce using rule 3 (top -> top END_STMT .)
    BREAK           reduce using rule 3 (top -> top END_STMT .)
    GLOBAL          reduce using rule 3 (top -> top END_STMT .)
    PERSISTENT      reduce using rule 3 (top -> top END_STMT .)
    ERROR_STMT      reduce using rule 3 (top -> top END_STMT .)
    FOR             reduce using rule 3 (top -> top END_STMT .)
    IF              reduce using rule 3 (top -> top END_STMT .)
    SEMI            reduce using rule 3 (top -> top END_STMT .)
    COMMA           reduce using rule 3 (top -> top END_STMT .)
    RETURN          reduce using rule 3 (top -> top END_STMT .)
    SWITCH          reduce using rule 3 (top -> top END_STMT .)
    TRY             reduce using rule 3 (top -> top END_STMT .)
    WHILE           reduce using rule 3 (top -> top END_STMT .)
    UNWIND_PROTECT  reduce using rule 3 (top -> top END_STMT .)
    IDENT           reduce using rule 3 (top -> top END_STMT .)
    NEG             reduce using rule 3 (top -> top END_STMT .)
    LPAREN          reduce using rule 3 (top -> top END_STMT .)
    END_EXPR        reduce using rule 3 (top -> top END_STMT .)
    NUMBER          reduce using rule 3 (top -> top END_STMT .)
    STRING          reduce using rule 3 (top -> top END_STMT .)
    COLON           reduce using rule 3 (top -> top END_STMT .)
    LBRACKET        reduce using rule 3 (top -> top END_STMT .)
    LBRACE          reduce using rule 3 (top -> top END_STMT .)
    MINUS           reduce using rule 3 (top -> top END_STMT .)
    PLUS            reduce using rule 3 (top -> top END_STMT .)
    HANDLE          reduce using rule 3 (top -> top END_STMT .)
    PLUSPLUS        reduce using rule 3 (top -> top END_STMT .)
    MINUSMINUS      reduce using rule 3 (top -> top END_STMT .)
    $end            reduce using rule 3 (top -> top END_STMT .)


state 4

    (4) top -> top END_FUNCTION .

    END_STMT        reduce using rule 4 (top -> top END_FUNCTION .)
    END_FUNCTION    reduce using rule 4 (top -> top END_FUNCTION .)
    CONTINUE        reduce using rule 4 (top -> top END_FUNCTION .)
    COMMENT         reduce using rule 4 (top -> top END_FUNCTION .)
    FUNCTION        reduce using rule 4 (top -> top END_FUNCTION .)
    BREAK           reduce using rule 4 (top -> top END_FUNCTION .)
    GLOBAL          reduce using rule 4 (top -> top END_FUNCTION .)
    PERSISTENT      reduce using rule 4 (top -> top END_FUNCTION .)
    ERROR_STMT      reduce using rule 4 (top -> top END_FUNCTION .)
    FOR             reduce using rule 4 (top -> top END_FUNCTION .)
    IF              reduce using rule 4 (top -> top END_FUNCTION .)
    SEMI            reduce using rule 4 (top -> top END_FUNCTION .)
    COMMA           reduce using rule 4 (top -> top END_FUNCTION .)
    RETURN          reduce using rule 4 (top -> top END_FUNCTION .)
    SWITCH          reduce using rule 4 (top -> top END_FUNCTION .)
    TRY             reduce using rule 4 (top -> top END_FUNCTION .)
    WHILE           reduce using rule 4 (top -> top END_FUNCTION .)
    UNWIND_PROTECT  reduce using rule 4 (top -> top END_FUNCTION .)
    IDENT           reduce using rule 4 (top -> top END_FUNCTION .)
    NEG             reduce using rule 4 (top -> top END_FUNCTION .)
    LPAREN          reduce using rule 4 (top -> top END_FUNCTION .)
    END_EXPR        reduce using rule 4 (top -> top END_FUNCTION .)
    NUMBER          reduce using rule 4 (top -> top END_FUNCTION .)
    STRING          reduce using rule 4 (top -> top END_FUNCTION .)
    COLON           reduce using rule 4 (top -> top END_FUNCTION .)
    LBRACKET        reduce using rule 4 (top -> top END_FUNCTION .)
    LBRACE          reduce using rule 4 (top -> top END_FUNCTION .)
    MINUS           reduce using rule 4 (top -> top END_FUNCTION .)
    PLUS            reduce using rule 4 (top -> top END_FUNCTION .)
    HANDLE          reduce using rule 4 (top -> top END_FUNCTION .)
    PLUSPLUS        reduce using rule 4 (top -> top END_FUNCTION .)
    MINUSMINUS      reduce using rule 4 (top -> top END_FUNCTION .)
    $end            reduce using rule 4 (top -> top END_FUNCTION .)


state 5

    (135) stmt -> continue_stmt .

    END_STMT        reduce using rule 135 (stmt -> continue_stmt .)
    END_FUNCTION    reduce using rule 135 (stmt -> continue_stmt .)
    CONTINUE        reduce using rule 135 (stmt -> continue_stmt .)
    COMMENT         reduce using rule 135 (stmt -> continue_stmt .)
    FUNCTION        reduce using rule 135 (stmt -> continue_stmt .)
    BREAK           reduce using rule 135 (stmt -> continue_stmt .)
    GLOBAL          reduce using rule 135 (stmt -> continue_stmt .)
    PERSISTENT      reduce using rule 135 (stmt -> continue_stmt .)
    ERROR_STMT      reduce using rule 135 (stmt -> continue_stmt .)
    FOR             reduce using rule 135 (stmt -> continue_stmt .)
    IF              reduce using rule 135 (stmt -> continue_stmt .)
    SEMI            reduce using rule 135 (stmt -> continue_stmt .)
    COMMA           reduce using rule 135 (stmt -> continue_stmt .)
    RETURN          reduce using rule 135 (stmt -> continue_stmt .)
    SWITCH          reduce using rule 135 (stmt -> continue_stmt .)
    TRY             reduce using rule 135 (stmt -> continue_stmt .)
    WHILE           reduce using rule 135 (stmt -> continue_stmt .)
    UNWIND_PROTECT  reduce using rule 135 (stmt -> continue_stmt .)
    IDENT           reduce using rule 135 (stmt -> continue_stmt .)
    NEG             reduce using rule 135 (stmt -> continue_stmt .)
    LPAREN          reduce using rule 135 (stmt -> continue_stmt .)
    END_EXPR        reduce using rule 135 (stmt -> continue_stmt .)
    NUMBER          reduce using rule 135 (stmt -> continue_stmt .)
    STRING          reduce using rule 135 (stmt -> continue_stmt .)
    COLON           reduce using rule 135 (stmt -> continue_stmt .)
    LBRACKET        reduce using rule 135 (stmt -> continue_stmt .)
    LBRACE          reduce using rule 135 (stmt -> continue_stmt .)
    MINUS           reduce using rule 135 (stmt -> continue_stmt .)
    PLUS            reduce using rule 135 (stmt -> continue_stmt .)
    HANDLE          reduce using rule 135 (stmt -> continue_stmt .)
    PLUSPLUS        reduce using rule 135 (stmt -> continue_stmt .)
    MINUSMINUS      reduce using rule 135 (stmt -> continue_stmt .)
    $end            reduce using rule 135 (stmt -> continue_stmt .)
    CATCH           reduce using rule 135 (stmt -> continue_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 135 (stmt -> continue_stmt .)
    ELSE            reduce using rule 135 (stmt -> continue_stmt .)
    ELSEIF          reduce using rule 135 (stmt -> continue_stmt .)
    END_UNWIND_PROTECT reduce using rule 135 (stmt -> continue_stmt .)
    CASE            reduce using rule 135 (stmt -> continue_stmt .)
    OTHERWISE       reduce using rule 135 (stmt -> continue_stmt .)


state 6

    (136) stmt -> comment_stmt .

    END_STMT        reduce using rule 136 (stmt -> comment_stmt .)
    END_FUNCTION    reduce using rule 136 (stmt -> comment_stmt .)
    CONTINUE        reduce using rule 136 (stmt -> comment_stmt .)
    COMMENT         reduce using rule 136 (stmt -> comment_stmt .)
    FUNCTION        reduce using rule 136 (stmt -> comment_stmt .)
    BREAK           reduce using rule 136 (stmt -> comment_stmt .)
    GLOBAL          reduce using rule 136 (stmt -> comment_stmt .)
    PERSISTENT      reduce using rule 136 (stmt -> comment_stmt .)
    ERROR_STMT      reduce using rule 136 (stmt -> comment_stmt .)
    FOR             reduce using rule 136 (stmt -> comment_stmt .)
    IF              reduce using rule 136 (stmt -> comment_stmt .)
    SEMI            reduce using rule 136 (stmt -> comment_stmt .)
    COMMA           reduce using rule 136 (stmt -> comment_stmt .)
    RETURN          reduce using rule 136 (stmt -> comment_stmt .)
    SWITCH          reduce using rule 136 (stmt -> comment_stmt .)
    TRY             reduce using rule 136 (stmt -> comment_stmt .)
    WHILE           reduce using rule 136 (stmt -> comment_stmt .)
    UNWIND_PROTECT  reduce using rule 136 (stmt -> comment_stmt .)
    IDENT           reduce using rule 136 (stmt -> comment_stmt .)
    NEG             reduce using rule 136 (stmt -> comment_stmt .)
    LPAREN          reduce using rule 136 (stmt -> comment_stmt .)
    END_EXPR        reduce using rule 136 (stmt -> comment_stmt .)
    NUMBER          reduce using rule 136 (stmt -> comment_stmt .)
    STRING          reduce using rule 136 (stmt -> comment_stmt .)
    COLON           reduce using rule 136 (stmt -> comment_stmt .)
    LBRACKET        reduce using rule 136 (stmt -> comment_stmt .)
    LBRACE          reduce using rule 136 (stmt -> comment_stmt .)
    MINUS           reduce using rule 136 (stmt -> comment_stmt .)
    PLUS            reduce using rule 136 (stmt -> comment_stmt .)
    HANDLE          reduce using rule 136 (stmt -> comment_stmt .)
    PLUSPLUS        reduce using rule 136 (stmt -> comment_stmt .)
    MINUSMINUS      reduce using rule 136 (stmt -> comment_stmt .)
    $end            reduce using rule 136 (stmt -> comment_stmt .)
    CATCH           reduce using rule 136 (stmt -> comment_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 136 (stmt -> comment_stmt .)
    ELSE            reduce using rule 136 (stmt -> comment_stmt .)
    ELSEIF          reduce using rule 136 (stmt -> comment_stmt .)
    END_UNWIND_PROTECT reduce using rule 136 (stmt -> comment_stmt .)
    CASE            reduce using rule 136 (stmt -> comment_stmt .)
    OTHERWISE       reduce using rule 136 (stmt -> comment_stmt .)


state 7

    (137) stmt -> func_stmt .

    END_STMT        reduce using rule 137 (stmt -> func_stmt .)
    END_FUNCTION    reduce using rule 137 (stmt -> func_stmt .)
    CONTINUE        reduce using rule 137 (stmt -> func_stmt .)
    COMMENT         reduce using rule 137 (stmt -> func_stmt .)
    FUNCTION        reduce using rule 137 (stmt -> func_stmt .)
    BREAK           reduce using rule 137 (stmt -> func_stmt .)
    GLOBAL          reduce using rule 137 (stmt -> func_stmt .)
    PERSISTENT      reduce using rule 137 (stmt -> func_stmt .)
    ERROR_STMT      reduce using rule 137 (stmt -> func_stmt .)
    FOR             reduce using rule 137 (stmt -> func_stmt .)
    IF              reduce using rule 137 (stmt -> func_stmt .)
    SEMI            reduce using rule 137 (stmt -> func_stmt .)
    COMMA           reduce using rule 137 (stmt -> func_stmt .)
    RETURN          reduce using rule 137 (stmt -> func_stmt .)
    SWITCH          reduce using rule 137 (stmt -> func_stmt .)
    TRY             reduce using rule 137 (stmt -> func_stmt .)
    WHILE           reduce using rule 137 (stmt -> func_stmt .)
    UNWIND_PROTECT  reduce using rule 137 (stmt -> func_stmt .)
    IDENT           reduce using rule 137 (stmt -> func_stmt .)
    NEG             reduce using rule 137 (stmt -> func_stmt .)
    LPAREN          reduce using rule 137 (stmt -> func_stmt .)
    END_EXPR        reduce using rule 137 (stmt -> func_stmt .)
    NUMBER          reduce using rule 137 (stmt -> func_stmt .)
    STRING          reduce using rule 137 (stmt -> func_stmt .)
    COLON           reduce using rule 137 (stmt -> func_stmt .)
    LBRACKET        reduce using rule 137 (stmt -> func_stmt .)
    LBRACE          reduce using rule 137 (stmt -> func_stmt .)
    MINUS           reduce using rule 137 (stmt -> func_stmt .)
    PLUS            reduce using rule 137 (stmt -> func_stmt .)
    HANDLE          reduce using rule 137 (stmt -> func_stmt .)
    PLUSPLUS        reduce using rule 137 (stmt -> func_stmt .)
    MINUSMINUS      reduce using rule 137 (stmt -> func_stmt .)
    $end            reduce using rule 137 (stmt -> func_stmt .)
    CATCH           reduce using rule 137 (stmt -> func_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 137 (stmt -> func_stmt .)
    ELSE            reduce using rule 137 (stmt -> func_stmt .)
    ELSEIF          reduce using rule 137 (stmt -> func_stmt .)
    END_UNWIND_PROTECT reduce using rule 137 (stmt -> func_stmt .)
    CASE            reduce using rule 137 (stmt -> func_stmt .)
    OTHERWISE       reduce using rule 137 (stmt -> func_stmt .)


state 8

    (138) stmt -> break_stmt .

    END_STMT        reduce using rule 138 (stmt -> break_stmt .)
    END_FUNCTION    reduce using rule 138 (stmt -> break_stmt .)
    CONTINUE        reduce using rule 138 (stmt -> break_stmt .)
    COMMENT         reduce using rule 138 (stmt -> break_stmt .)
    FUNCTION        reduce using rule 138 (stmt -> break_stmt .)
    BREAK           reduce using rule 138 (stmt -> break_stmt .)
    GLOBAL          reduce using rule 138 (stmt -> break_stmt .)
    PERSISTENT      reduce using rule 138 (stmt -> break_stmt .)
    ERROR_STMT      reduce using rule 138 (stmt -> break_stmt .)
    FOR             reduce using rule 138 (stmt -> break_stmt .)
    IF              reduce using rule 138 (stmt -> break_stmt .)
    SEMI            reduce using rule 138 (stmt -> break_stmt .)
    COMMA           reduce using rule 138 (stmt -> break_stmt .)
    RETURN          reduce using rule 138 (stmt -> break_stmt .)
    SWITCH          reduce using rule 138 (stmt -> break_stmt .)
    TRY             reduce using rule 138 (stmt -> break_stmt .)
    WHILE           reduce using rule 138 (stmt -> break_stmt .)
    UNWIND_PROTECT  reduce using rule 138 (stmt -> break_stmt .)
    IDENT           reduce using rule 138 (stmt -> break_stmt .)
    NEG             reduce using rule 138 (stmt -> break_stmt .)
    LPAREN          reduce using rule 138 (stmt -> break_stmt .)
    END_EXPR        reduce using rule 138 (stmt -> break_stmt .)
    NUMBER          reduce using rule 138 (stmt -> break_stmt .)
    STRING          reduce using rule 138 (stmt -> break_stmt .)
    COLON           reduce using rule 138 (stmt -> break_stmt .)
    LBRACKET        reduce using rule 138 (stmt -> break_stmt .)
    LBRACE          reduce using rule 138 (stmt -> break_stmt .)
    MINUS           reduce using rule 138 (stmt -> break_stmt .)
    PLUS            reduce using rule 138 (stmt -> break_stmt .)
    HANDLE          reduce using rule 138 (stmt -> break_stmt .)
    PLUSPLUS        reduce using rule 138 (stmt -> break_stmt .)
    MINUSMINUS      reduce using rule 138 (stmt -> break_stmt .)
    $end            reduce using rule 138 (stmt -> break_stmt .)
    CATCH           reduce using rule 138 (stmt -> break_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 138 (stmt -> break_stmt .)
    ELSE            reduce using rule 138 (stmt -> break_stmt .)
    ELSEIF          reduce using rule 138 (stmt -> break_stmt .)
    END_UNWIND_PROTECT reduce using rule 138 (stmt -> break_stmt .)
    CASE            reduce using rule 138 (stmt -> break_stmt .)
    OTHERWISE       reduce using rule 138 (stmt -> break_stmt .)


state 9

    (139) stmt -> expr_stmt .

    END_STMT        reduce using rule 139 (stmt -> expr_stmt .)
    END_FUNCTION    reduce using rule 139 (stmt -> expr_stmt .)
    CONTINUE        reduce using rule 139 (stmt -> expr_stmt .)
    COMMENT         reduce using rule 139 (stmt -> expr_stmt .)
    FUNCTION        reduce using rule 139 (stmt -> expr_stmt .)
    BREAK           reduce using rule 139 (stmt -> expr_stmt .)
    GLOBAL          reduce using rule 139 (stmt -> expr_stmt .)
    PERSISTENT      reduce using rule 139 (stmt -> expr_stmt .)
    ERROR_STMT      reduce using rule 139 (stmt -> expr_stmt .)
    FOR             reduce using rule 139 (stmt -> expr_stmt .)
    IF              reduce using rule 139 (stmt -> expr_stmt .)
    SEMI            reduce using rule 139 (stmt -> expr_stmt .)
    COMMA           reduce using rule 139 (stmt -> expr_stmt .)
    RETURN          reduce using rule 139 (stmt -> expr_stmt .)
    SWITCH          reduce using rule 139 (stmt -> expr_stmt .)
    TRY             reduce using rule 139 (stmt -> expr_stmt .)
    WHILE           reduce using rule 139 (stmt -> expr_stmt .)
    UNWIND_PROTECT  reduce using rule 139 (stmt -> expr_stmt .)
    IDENT           reduce using rule 139 (stmt -> expr_stmt .)
    NEG             reduce using rule 139 (stmt -> expr_stmt .)
    LPAREN          reduce using rule 139 (stmt -> expr_stmt .)
    END_EXPR        reduce using rule 139 (stmt -> expr_stmt .)
    NUMBER          reduce using rule 139 (stmt -> expr_stmt .)
    STRING          reduce using rule 139 (stmt -> expr_stmt .)
    COLON           reduce using rule 139 (stmt -> expr_stmt .)
    LBRACKET        reduce using rule 139 (stmt -> expr_stmt .)
    LBRACE          reduce using rule 139 (stmt -> expr_stmt .)
    MINUS           reduce using rule 139 (stmt -> expr_stmt .)
    PLUS            reduce using rule 139 (stmt -> expr_stmt .)
    HANDLE          reduce using rule 139 (stmt -> expr_stmt .)
    PLUSPLUS        reduce using rule 139 (stmt -> expr_stmt .)
    MINUSMINUS      reduce using rule 139 (stmt -> expr_stmt .)
    $end            reduce using rule 139 (stmt -> expr_stmt .)
    CATCH           reduce using rule 139 (stmt -> expr_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 139 (stmt -> expr_stmt .)
    ELSE            reduce using rule 139 (stmt -> expr_stmt .)
    ELSEIF          reduce using rule 139 (stmt -> expr_stmt .)
    END_UNWIND_PROTECT reduce using rule 139 (stmt -> expr_stmt .)
    CASE            reduce using rule 139 (stmt -> expr_stmt .)
    OTHERWISE       reduce using rule 139 (stmt -> expr_stmt .)


state 10

    (140) stmt -> global_stmt .

    END_STMT        reduce using rule 140 (stmt -> global_stmt .)
    END_FUNCTION    reduce using rule 140 (stmt -> global_stmt .)
    CONTINUE        reduce using rule 140 (stmt -> global_stmt .)
    COMMENT         reduce using rule 140 (stmt -> global_stmt .)
    FUNCTION        reduce using rule 140 (stmt -> global_stmt .)
    BREAK           reduce using rule 140 (stmt -> global_stmt .)
    GLOBAL          reduce using rule 140 (stmt -> global_stmt .)
    PERSISTENT      reduce using rule 140 (stmt -> global_stmt .)
    ERROR_STMT      reduce using rule 140 (stmt -> global_stmt .)
    FOR             reduce using rule 140 (stmt -> global_stmt .)
    IF              reduce using rule 140 (stmt -> global_stmt .)
    SEMI            reduce using rule 140 (stmt -> global_stmt .)
    COMMA           reduce using rule 140 (stmt -> global_stmt .)
    RETURN          reduce using rule 140 (stmt -> global_stmt .)
    SWITCH          reduce using rule 140 (stmt -> global_stmt .)
    TRY             reduce using rule 140 (stmt -> global_stmt .)
    WHILE           reduce using rule 140 (stmt -> global_stmt .)
    UNWIND_PROTECT  reduce using rule 140 (stmt -> global_stmt .)
    IDENT           reduce using rule 140 (stmt -> global_stmt .)
    NEG             reduce using rule 140 (stmt -> global_stmt .)
    LPAREN          reduce using rule 140 (stmt -> global_stmt .)
    END_EXPR        reduce using rule 140 (stmt -> global_stmt .)
    NUMBER          reduce using rule 140 (stmt -> global_stmt .)
    STRING          reduce using rule 140 (stmt -> global_stmt .)
    COLON           reduce using rule 140 (stmt -> global_stmt .)
    LBRACKET        reduce using rule 140 (stmt -> global_stmt .)
    LBRACE          reduce using rule 140 (stmt -> global_stmt .)
    MINUS           reduce using rule 140 (stmt -> global_stmt .)
    PLUS            reduce using rule 140 (stmt -> global_stmt .)
    HANDLE          reduce using rule 140 (stmt -> global_stmt .)
    PLUSPLUS        reduce using rule 140 (stmt -> global_stmt .)
    MINUSMINUS      reduce using rule 140 (stmt -> global_stmt .)
    $end            reduce using rule 140 (stmt -> global_stmt .)
    CATCH           reduce using rule 140 (stmt -> global_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 140 (stmt -> global_stmt .)
    ELSE            reduce using rule 140 (stmt -> global_stmt .)
    ELSEIF          reduce using rule 140 (stmt -> global_stmt .)
    END_UNWIND_PROTECT reduce using rule 140 (stmt -> global_stmt .)
    CASE            reduce using rule 140 (stmt -> global_stmt .)
    OTHERWISE       reduce using rule 140 (stmt -> global_stmt .)


state 11

    (141) stmt -> persistent_stmt .

    END_STMT        reduce using rule 141 (stmt -> persistent_stmt .)
    END_FUNCTION    reduce using rule 141 (stmt -> persistent_stmt .)
    CONTINUE        reduce using rule 141 (stmt -> persistent_stmt .)
    COMMENT         reduce using rule 141 (stmt -> persistent_stmt .)
    FUNCTION        reduce using rule 141 (stmt -> persistent_stmt .)
    BREAK           reduce using rule 141 (stmt -> persistent_stmt .)
    GLOBAL          reduce using rule 141 (stmt -> persistent_stmt .)
    PERSISTENT      reduce using rule 141 (stmt -> persistent_stmt .)
    ERROR_STMT      reduce using rule 141 (stmt -> persistent_stmt .)
    FOR             reduce using rule 141 (stmt -> persistent_stmt .)
    IF              reduce using rule 141 (stmt -> persistent_stmt .)
    SEMI            reduce using rule 141 (stmt -> persistent_stmt .)
    COMMA           reduce using rule 141 (stmt -> persistent_stmt .)
    RETURN          reduce using rule 141 (stmt -> persistent_stmt .)
    SWITCH          reduce using rule 141 (stmt -> persistent_stmt .)
    TRY             reduce using rule 141 (stmt -> persistent_stmt .)
    WHILE           reduce using rule 141 (stmt -> persistent_stmt .)
    UNWIND_PROTECT  reduce using rule 141 (stmt -> persistent_stmt .)
    IDENT           reduce using rule 141 (stmt -> persistent_stmt .)
    NEG             reduce using rule 141 (stmt -> persistent_stmt .)
    LPAREN          reduce using rule 141 (stmt -> persistent_stmt .)
    END_EXPR        reduce using rule 141 (stmt -> persistent_stmt .)
    NUMBER          reduce using rule 141 (stmt -> persistent_stmt .)
    STRING          reduce using rule 141 (stmt -> persistent_stmt .)
    COLON           reduce using rule 141 (stmt -> persistent_stmt .)
    LBRACKET        reduce using rule 141 (stmt -> persistent_stmt .)
    LBRACE          reduce using rule 141 (stmt -> persistent_stmt .)
    MINUS           reduce using rule 141 (stmt -> persistent_stmt .)
    PLUS            reduce using rule 141 (stmt -> persistent_stmt .)
    HANDLE          reduce using rule 141 (stmt -> persistent_stmt .)
    PLUSPLUS        reduce using rule 141 (stmt -> persistent_stmt .)
    MINUSMINUS      reduce using rule 141 (stmt -> persistent_stmt .)
    $end            reduce using rule 141 (stmt -> persistent_stmt .)
    CATCH           reduce using rule 141 (stmt -> persistent_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 141 (stmt -> persistent_stmt .)
    ELSE            reduce using rule 141 (stmt -> persistent_stmt .)
    ELSEIF          reduce using rule 141 (stmt -> persistent_stmt .)
    END_UNWIND_PROTECT reduce using rule 141 (stmt -> persistent_stmt .)
    CASE            reduce using rule 141 (stmt -> persistent_stmt .)
    OTHERWISE       reduce using rule 141 (stmt -> persistent_stmt .)


state 12

    (142) stmt -> error_stmt .

    END_STMT        reduce using rule 142 (stmt -> error_stmt .)
    END_FUNCTION    reduce using rule 142 (stmt -> error_stmt .)
    CONTINUE        reduce using rule 142 (stmt -> error_stmt .)
    COMMENT         reduce using rule 142 (stmt -> error_stmt .)
    FUNCTION        reduce using rule 142 (stmt -> error_stmt .)
    BREAK           reduce using rule 142 (stmt -> error_stmt .)
    GLOBAL          reduce using rule 142 (stmt -> error_stmt .)
    PERSISTENT      reduce using rule 142 (stmt -> error_stmt .)
    ERROR_STMT      reduce using rule 142 (stmt -> error_stmt .)
    FOR             reduce using rule 142 (stmt -> error_stmt .)
    IF              reduce using rule 142 (stmt -> error_stmt .)
    SEMI            reduce using rule 142 (stmt -> error_stmt .)
    COMMA           reduce using rule 142 (stmt -> error_stmt .)
    RETURN          reduce using rule 142 (stmt -> error_stmt .)
    SWITCH          reduce using rule 142 (stmt -> error_stmt .)
    TRY             reduce using rule 142 (stmt -> error_stmt .)
    WHILE           reduce using rule 142 (stmt -> error_stmt .)
    UNWIND_PROTECT  reduce using rule 142 (stmt -> error_stmt .)
    IDENT           reduce using rule 142 (stmt -> error_stmt .)
    NEG             reduce using rule 142 (stmt -> error_stmt .)
    LPAREN          reduce using rule 142 (stmt -> error_stmt .)
    END_EXPR        reduce using rule 142 (stmt -> error_stmt .)
    NUMBER          reduce using rule 142 (stmt -> error_stmt .)
    STRING          reduce using rule 142 (stmt -> error_stmt .)
    COLON           reduce using rule 142 (stmt -> error_stmt .)
    LBRACKET        reduce using rule 142 (stmt -> error_stmt .)
    LBRACE          reduce using rule 142 (stmt -> error_stmt .)
    MINUS           reduce using rule 142 (stmt -> error_stmt .)
    PLUS            reduce using rule 142 (stmt -> error_stmt .)
    HANDLE          reduce using rule 142 (stmt -> error_stmt .)
    PLUSPLUS        reduce using rule 142 (stmt -> error_stmt .)
    MINUSMINUS      reduce using rule 142 (stmt -> error_stmt .)
    $end            reduce using rule 142 (stmt -> error_stmt .)
    CATCH           reduce using rule 142 (stmt -> error_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 142 (stmt -> error_stmt .)
    ELSE            reduce using rule 142 (stmt -> error_stmt .)
    ELSEIF          reduce using rule 142 (stmt -> error_stmt .)
    END_UNWIND_PROTECT reduce using rule 142 (stmt -> error_stmt .)
    CASE            reduce using rule 142 (stmt -> error_stmt .)
    OTHERWISE       reduce using rule 142 (stmt -> error_stmt .)


state 13

    (143) stmt -> command .

    END_STMT        reduce using rule 143 (stmt -> command .)
    END_FUNCTION    reduce using rule 143 (stmt -> command .)
    CONTINUE        reduce using rule 143 (stmt -> command .)
    COMMENT         reduce using rule 143 (stmt -> command .)
    FUNCTION        reduce using rule 143 (stmt -> command .)
    BREAK           reduce using rule 143 (stmt -> command .)
    GLOBAL          reduce using rule 143 (stmt -> command .)
    PERSISTENT      reduce using rule 143 (stmt -> command .)
    ERROR_STMT      reduce using rule 143 (stmt -> command .)
    FOR             reduce using rule 143 (stmt -> command .)
    IF              reduce using rule 143 (stmt -> command .)
    SEMI            reduce using rule 143 (stmt -> command .)
    COMMA           reduce using rule 143 (stmt -> command .)
    RETURN          reduce using rule 143 (stmt -> command .)
    SWITCH          reduce using rule 143 (stmt -> command .)
    TRY             reduce using rule 143 (stmt -> command .)
    WHILE           reduce using rule 143 (stmt -> command .)
    UNWIND_PROTECT  reduce using rule 143 (stmt -> command .)
    IDENT           reduce using rule 143 (stmt -> command .)
    NEG             reduce using rule 143 (stmt -> command .)
    LPAREN          reduce using rule 143 (stmt -> command .)
    END_EXPR        reduce using rule 143 (stmt -> command .)
    NUMBER          reduce using rule 143 (stmt -> command .)
    STRING          reduce using rule 143 (stmt -> command .)
    COLON           reduce using rule 143 (stmt -> command .)
    LBRACKET        reduce using rule 143 (stmt -> command .)
    LBRACE          reduce using rule 143 (stmt -> command .)
    MINUS           reduce using rule 143 (stmt -> command .)
    PLUS            reduce using rule 143 (stmt -> command .)
    HANDLE          reduce using rule 143 (stmt -> command .)
    PLUSPLUS        reduce using rule 143 (stmt -> command .)
    MINUSMINUS      reduce using rule 143 (stmt -> command .)
    $end            reduce using rule 143 (stmt -> command .)
    CATCH           reduce using rule 143 (stmt -> command .)
    UNWIND_PROTECT_CLEANUP reduce using rule 143 (stmt -> command .)
    ELSE            reduce using rule 143 (stmt -> command .)
    ELSEIF          reduce using rule 143 (stmt -> command .)
    END_UNWIND_PROTECT reduce using rule 143 (stmt -> command .)
    CASE            reduce using rule 143 (stmt -> command .)
    OTHERWISE       reduce using rule 143 (stmt -> command .)


state 14

    (144) stmt -> for_stmt .

    END_STMT        reduce using rule 144 (stmt -> for_stmt .)
    END_FUNCTION    reduce using rule 144 (stmt -> for_stmt .)
    CONTINUE        reduce using rule 144 (stmt -> for_stmt .)
    COMMENT         reduce using rule 144 (stmt -> for_stmt .)
    FUNCTION        reduce using rule 144 (stmt -> for_stmt .)
    BREAK           reduce using rule 144 (stmt -> for_stmt .)
    GLOBAL          reduce using rule 144 (stmt -> for_stmt .)
    PERSISTENT      reduce using rule 144 (stmt -> for_stmt .)
    ERROR_STMT      reduce using rule 144 (stmt -> for_stmt .)
    FOR             reduce using rule 144 (stmt -> for_stmt .)
    IF              reduce using rule 144 (stmt -> for_stmt .)
    SEMI            reduce using rule 144 (stmt -> for_stmt .)
    COMMA           reduce using rule 144 (stmt -> for_stmt .)
    RETURN          reduce using rule 144 (stmt -> for_stmt .)
    SWITCH          reduce using rule 144 (stmt -> for_stmt .)
    TRY             reduce using rule 144 (stmt -> for_stmt .)
    WHILE           reduce using rule 144 (stmt -> for_stmt .)
    UNWIND_PROTECT  reduce using rule 144 (stmt -> for_stmt .)
    IDENT           reduce using rule 144 (stmt -> for_stmt .)
    NEG             reduce using rule 144 (stmt -> for_stmt .)
    LPAREN          reduce using rule 144 (stmt -> for_stmt .)
    END_EXPR        reduce using rule 144 (stmt -> for_stmt .)
    NUMBER          reduce using rule 144 (stmt -> for_stmt .)
    STRING          reduce using rule 144 (stmt -> for_stmt .)
    COLON           reduce using rule 144 (stmt -> for_stmt .)
    LBRACKET        reduce using rule 144 (stmt -> for_stmt .)
    LBRACE          reduce using rule 144 (stmt -> for_stmt .)
    MINUS           reduce using rule 144 (stmt -> for_stmt .)
    PLUS            reduce using rule 144 (stmt -> for_stmt .)
    HANDLE          reduce using rule 144 (stmt -> for_stmt .)
    PLUSPLUS        reduce using rule 144 (stmt -> for_stmt .)
    MINUSMINUS      reduce using rule 144 (stmt -> for_stmt .)
    $end            reduce using rule 144 (stmt -> for_stmt .)
    CATCH           reduce using rule 144 (stmt -> for_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 144 (stmt -> for_stmt .)
    ELSE            reduce using rule 144 (stmt -> for_stmt .)
    ELSEIF          reduce using rule 144 (stmt -> for_stmt .)
    END_UNWIND_PROTECT reduce using rule 144 (stmt -> for_stmt .)
    CASE            reduce using rule 144 (stmt -> for_stmt .)
    OTHERWISE       reduce using rule 144 (stmt -> for_stmt .)


state 15

    (145) stmt -> if_stmt .

    END_STMT        reduce using rule 145 (stmt -> if_stmt .)
    END_FUNCTION    reduce using rule 145 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 145 (stmt -> if_stmt .)
    COMMENT         reduce using rule 145 (stmt -> if_stmt .)
    FUNCTION        reduce using rule 145 (stmt -> if_stmt .)
    BREAK           reduce using rule 145 (stmt -> if_stmt .)
    GLOBAL          reduce using rule 145 (stmt -> if_stmt .)
    PERSISTENT      reduce using rule 145 (stmt -> if_stmt .)
    ERROR_STMT      reduce using rule 145 (stmt -> if_stmt .)
    FOR             reduce using rule 145 (stmt -> if_stmt .)
    IF              reduce using rule 145 (stmt -> if_stmt .)
    SEMI            reduce using rule 145 (stmt -> if_stmt .)
    COMMA           reduce using rule 145 (stmt -> if_stmt .)
    RETURN          reduce using rule 145 (stmt -> if_stmt .)
    SWITCH          reduce using rule 145 (stmt -> if_stmt .)
    TRY             reduce using rule 145 (stmt -> if_stmt .)
    WHILE           reduce using rule 145 (stmt -> if_stmt .)
    UNWIND_PROTECT  reduce using rule 145 (stmt -> if_stmt .)
    IDENT           reduce using rule 145 (stmt -> if_stmt .)
    NEG             reduce using rule 145 (stmt -> if_stmt .)
    LPAREN          reduce using rule 145 (stmt -> if_stmt .)
    END_EXPR        reduce using rule 145 (stmt -> if_stmt .)
    NUMBER          reduce using rule 145 (stmt -> if_stmt .)
    STRING          reduce using rule 145 (stmt -> if_stmt .)
    COLON           reduce using rule 145 (stmt -> if_stmt .)
    LBRACKET        reduce using rule 145 (stmt -> if_stmt .)
    LBRACE          reduce using rule 145 (stmt -> if_stmt .)
    MINUS           reduce using rule 145 (stmt -> if_stmt .)
    PLUS            reduce using rule 145 (stmt -> if_stmt .)
    HANDLE          reduce using rule 145 (stmt -> if_stmt .)
    PLUSPLUS        reduce using rule 145 (stmt -> if_stmt .)
    MINUSMINUS      reduce using rule 145 (stmt -> if_stmt .)
    $end            reduce using rule 145 (stmt -> if_stmt .)
    CATCH           reduce using rule 145 (stmt -> if_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 145 (stmt -> if_stmt .)
    ELSE            reduce using rule 145 (stmt -> if_stmt .)
    ELSEIF          reduce using rule 145 (stmt -> if_stmt .)
    END_UNWIND_PROTECT reduce using rule 145 (stmt -> if_stmt .)
    CASE            reduce using rule 145 (stmt -> if_stmt .)
    OTHERWISE       reduce using rule 145 (stmt -> if_stmt .)


state 16

    (146) stmt -> null_stmt .

    END_STMT        reduce using rule 146 (stmt -> null_stmt .)
    END_FUNCTION    reduce using rule 146 (stmt -> null_stmt .)
    CONTINUE        reduce using rule 146 (stmt -> null_stmt .)
    COMMENT         reduce using rule 146 (stmt -> null_stmt .)
    FUNCTION        reduce using rule 146 (stmt -> null_stmt .)
    BREAK           reduce using rule 146 (stmt -> null_stmt .)
    GLOBAL          reduce using rule 146 (stmt -> null_stmt .)
    PERSISTENT      reduce using rule 146 (stmt -> null_stmt .)
    ERROR_STMT      reduce using rule 146 (stmt -> null_stmt .)
    FOR             reduce using rule 146 (stmt -> null_stmt .)
    IF              reduce using rule 146 (stmt -> null_stmt .)
    SEMI            reduce using rule 146 (stmt -> null_stmt .)
    COMMA           reduce using rule 146 (stmt -> null_stmt .)
    RETURN          reduce using rule 146 (stmt -> null_stmt .)
    SWITCH          reduce using rule 146 (stmt -> null_stmt .)
    TRY             reduce using rule 146 (stmt -> null_stmt .)
    WHILE           reduce using rule 146 (stmt -> null_stmt .)
    UNWIND_PROTECT  reduce using rule 146 (stmt -> null_stmt .)
    IDENT           reduce using rule 146 (stmt -> null_stmt .)
    NEG             reduce using rule 146 (stmt -> null_stmt .)
    LPAREN          reduce using rule 146 (stmt -> null_stmt .)
    END_EXPR        reduce using rule 146 (stmt -> null_stmt .)
    NUMBER          reduce using rule 146 (stmt -> null_stmt .)
    STRING          reduce using rule 146 (stmt -> null_stmt .)
    COLON           reduce using rule 146 (stmt -> null_stmt .)
    LBRACKET        reduce using rule 146 (stmt -> null_stmt .)
    LBRACE          reduce using rule 146 (stmt -> null_stmt .)
    MINUS           reduce using rule 146 (stmt -> null_stmt .)
    PLUS            reduce using rule 146 (stmt -> null_stmt .)
    HANDLE          reduce using rule 146 (stmt -> null_stmt .)
    PLUSPLUS        reduce using rule 146 (stmt -> null_stmt .)
    MINUSMINUS      reduce using rule 146 (stmt -> null_stmt .)
    $end            reduce using rule 146 (stmt -> null_stmt .)
    CATCH           reduce using rule 146 (stmt -> null_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 146 (stmt -> null_stmt .)
    ELSE            reduce using rule 146 (stmt -> null_stmt .)
    ELSEIF          reduce using rule 146 (stmt -> null_stmt .)
    END_UNWIND_PROTECT reduce using rule 146 (stmt -> null_stmt .)
    CASE            reduce using rule 146 (stmt -> null_stmt .)
    OTHERWISE       reduce using rule 146 (stmt -> null_stmt .)


state 17

    (147) stmt -> return_stmt .

    END_STMT        reduce using rule 147 (stmt -> return_stmt .)
    END_FUNCTION    reduce using rule 147 (stmt -> return_stmt .)
    CONTINUE        reduce using rule 147 (stmt -> return_stmt .)
    COMMENT         reduce using rule 147 (stmt -> return_stmt .)
    FUNCTION        reduce using rule 147 (stmt -> return_stmt .)
    BREAK           reduce using rule 147 (stmt -> return_stmt .)
    GLOBAL          reduce using rule 147 (stmt -> return_stmt .)
    PERSISTENT      reduce using rule 147 (stmt -> return_stmt .)
    ERROR_STMT      reduce using rule 147 (stmt -> return_stmt .)
    FOR             reduce using rule 147 (stmt -> return_stmt .)
    IF              reduce using rule 147 (stmt -> return_stmt .)
    SEMI            reduce using rule 147 (stmt -> return_stmt .)
    COMMA           reduce using rule 147 (stmt -> return_stmt .)
    RETURN          reduce using rule 147 (stmt -> return_stmt .)
    SWITCH          reduce using rule 147 (stmt -> return_stmt .)
    TRY             reduce using rule 147 (stmt -> return_stmt .)
    WHILE           reduce using rule 147 (stmt -> return_stmt .)
    UNWIND_PROTECT  reduce using rule 147 (stmt -> return_stmt .)
    IDENT           reduce using rule 147 (stmt -> return_stmt .)
    NEG             reduce using rule 147 (stmt -> return_stmt .)
    LPAREN          reduce using rule 147 (stmt -> return_stmt .)
    END_EXPR        reduce using rule 147 (stmt -> return_stmt .)
    NUMBER          reduce using rule 147 (stmt -> return_stmt .)
    STRING          reduce using rule 147 (stmt -> return_stmt .)
    COLON           reduce using rule 147 (stmt -> return_stmt .)
    LBRACKET        reduce using rule 147 (stmt -> return_stmt .)
    LBRACE          reduce using rule 147 (stmt -> return_stmt .)
    MINUS           reduce using rule 147 (stmt -> return_stmt .)
    PLUS            reduce using rule 147 (stmt -> return_stmt .)
    HANDLE          reduce using rule 147 (stmt -> return_stmt .)
    PLUSPLUS        reduce using rule 147 (stmt -> return_stmt .)
    MINUSMINUS      reduce using rule 147 (stmt -> return_stmt .)
    $end            reduce using rule 147 (stmt -> return_stmt .)
    CATCH           reduce using rule 147 (stmt -> return_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 147 (stmt -> return_stmt .)
    ELSE            reduce using rule 147 (stmt -> return_stmt .)
    ELSEIF          reduce using rule 147 (stmt -> return_stmt .)
    END_UNWIND_PROTECT reduce using rule 147 (stmt -> return_stmt .)
    CASE            reduce using rule 147 (stmt -> return_stmt .)
    OTHERWISE       reduce using rule 147 (stmt -> return_stmt .)


state 18

    (148) stmt -> switch_stmt .

    END_STMT        reduce using rule 148 (stmt -> switch_stmt .)
    END_FUNCTION    reduce using rule 148 (stmt -> switch_stmt .)
    CONTINUE        reduce using rule 148 (stmt -> switch_stmt .)
    COMMENT         reduce using rule 148 (stmt -> switch_stmt .)
    FUNCTION        reduce using rule 148 (stmt -> switch_stmt .)
    BREAK           reduce using rule 148 (stmt -> switch_stmt .)
    GLOBAL          reduce using rule 148 (stmt -> switch_stmt .)
    PERSISTENT      reduce using rule 148 (stmt -> switch_stmt .)
    ERROR_STMT      reduce using rule 148 (stmt -> switch_stmt .)
    FOR             reduce using rule 148 (stmt -> switch_stmt .)
    IF              reduce using rule 148 (stmt -> switch_stmt .)
    SEMI            reduce using rule 148 (stmt -> switch_stmt .)
    COMMA           reduce using rule 148 (stmt -> switch_stmt .)
    RETURN          reduce using rule 148 (stmt -> switch_stmt .)
    SWITCH          reduce using rule 148 (stmt -> switch_stmt .)
    TRY             reduce using rule 148 (stmt -> switch_stmt .)
    WHILE           reduce using rule 148 (stmt -> switch_stmt .)
    UNWIND_PROTECT  reduce using rule 148 (stmt -> switch_stmt .)
    IDENT           reduce using rule 148 (stmt -> switch_stmt .)
    NEG             reduce using rule 148 (stmt -> switch_stmt .)
    LPAREN          reduce using rule 148 (stmt -> switch_stmt .)
    END_EXPR        reduce using rule 148 (stmt -> switch_stmt .)
    NUMBER          reduce using rule 148 (stmt -> switch_stmt .)
    STRING          reduce using rule 148 (stmt -> switch_stmt .)
    COLON           reduce using rule 148 (stmt -> switch_stmt .)
    LBRACKET        reduce using rule 148 (stmt -> switch_stmt .)
    LBRACE          reduce using rule 148 (stmt -> switch_stmt .)
    MINUS           reduce using rule 148 (stmt -> switch_stmt .)
    PLUS            reduce using rule 148 (stmt -> switch_stmt .)
    HANDLE          reduce using rule 148 (stmt -> switch_stmt .)
    PLUSPLUS        reduce using rule 148 (stmt -> switch_stmt .)
    MINUSMINUS      reduce using rule 148 (stmt -> switch_stmt .)
    $end            reduce using rule 148 (stmt -> switch_stmt .)
    CATCH           reduce using rule 148 (stmt -> switch_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 148 (stmt -> switch_stmt .)
    ELSE            reduce using rule 148 (stmt -> switch_stmt .)
    ELSEIF          reduce using rule 148 (stmt -> switch_stmt .)
    END_UNWIND_PROTECT reduce using rule 148 (stmt -> switch_stmt .)
    CASE            reduce using rule 148 (stmt -> switch_stmt .)
    OTHERWISE       reduce using rule 148 (stmt -> switch_stmt .)


state 19

    (149) stmt -> try_catch .

    END_STMT        reduce using rule 149 (stmt -> try_catch .)
    END_FUNCTION    reduce using rule 149 (stmt -> try_catch .)
    CONTINUE        reduce using rule 149 (stmt -> try_catch .)
    COMMENT         reduce using rule 149 (stmt -> try_catch .)
    FUNCTION        reduce using rule 149 (stmt -> try_catch .)
    BREAK           reduce using rule 149 (stmt -> try_catch .)
    GLOBAL          reduce using rule 149 (stmt -> try_catch .)
    PERSISTENT      reduce using rule 149 (stmt -> try_catch .)
    ERROR_STMT      reduce using rule 149 (stmt -> try_catch .)
    FOR             reduce using rule 149 (stmt -> try_catch .)
    IF              reduce using rule 149 (stmt -> try_catch .)
    SEMI            reduce using rule 149 (stmt -> try_catch .)
    COMMA           reduce using rule 149 (stmt -> try_catch .)
    RETURN          reduce using rule 149 (stmt -> try_catch .)
    SWITCH          reduce using rule 149 (stmt -> try_catch .)
    TRY             reduce using rule 149 (stmt -> try_catch .)
    WHILE           reduce using rule 149 (stmt -> try_catch .)
    UNWIND_PROTECT  reduce using rule 149 (stmt -> try_catch .)
    IDENT           reduce using rule 149 (stmt -> try_catch .)
    NEG             reduce using rule 149 (stmt -> try_catch .)
    LPAREN          reduce using rule 149 (stmt -> try_catch .)
    END_EXPR        reduce using rule 149 (stmt -> try_catch .)
    NUMBER          reduce using rule 149 (stmt -> try_catch .)
    STRING          reduce using rule 149 (stmt -> try_catch .)
    COLON           reduce using rule 149 (stmt -> try_catch .)
    LBRACKET        reduce using rule 149 (stmt -> try_catch .)
    LBRACE          reduce using rule 149 (stmt -> try_catch .)
    MINUS           reduce using rule 149 (stmt -> try_catch .)
    PLUS            reduce using rule 149 (stmt -> try_catch .)
    HANDLE          reduce using rule 149 (stmt -> try_catch .)
    PLUSPLUS        reduce using rule 149 (stmt -> try_catch .)
    MINUSMINUS      reduce using rule 149 (stmt -> try_catch .)
    $end            reduce using rule 149 (stmt -> try_catch .)
    CATCH           reduce using rule 149 (stmt -> try_catch .)
    UNWIND_PROTECT_CLEANUP reduce using rule 149 (stmt -> try_catch .)
    ELSE            reduce using rule 149 (stmt -> try_catch .)
    ELSEIF          reduce using rule 149 (stmt -> try_catch .)
    END_UNWIND_PROTECT reduce using rule 149 (stmt -> try_catch .)
    CASE            reduce using rule 149 (stmt -> try_catch .)
    OTHERWISE       reduce using rule 149 (stmt -> try_catch .)


state 20

    (150) stmt -> while_stmt .

    END_STMT        reduce using rule 150 (stmt -> while_stmt .)
    END_FUNCTION    reduce using rule 150 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 150 (stmt -> while_stmt .)
    COMMENT         reduce using rule 150 (stmt -> while_stmt .)
    FUNCTION        reduce using rule 150 (stmt -> while_stmt .)
    BREAK           reduce using rule 150 (stmt -> while_stmt .)
    GLOBAL          reduce using rule 150 (stmt -> while_stmt .)
    PERSISTENT      reduce using rule 150 (stmt -> while_stmt .)
    ERROR_STMT      reduce using rule 150 (stmt -> while_stmt .)
    FOR             reduce using rule 150 (stmt -> while_stmt .)
    IF              reduce using rule 150 (stmt -> while_stmt .)
    SEMI            reduce using rule 150 (stmt -> while_stmt .)
    COMMA           reduce using rule 150 (stmt -> while_stmt .)
    RETURN          reduce using rule 150 (stmt -> while_stmt .)
    SWITCH          reduce using rule 150 (stmt -> while_stmt .)
    TRY             reduce using rule 150 (stmt -> while_stmt .)
    WHILE           reduce using rule 150 (stmt -> while_stmt .)
    UNWIND_PROTECT  reduce using rule 150 (stmt -> while_stmt .)
    IDENT           reduce using rule 150 (stmt -> while_stmt .)
    NEG             reduce using rule 150 (stmt -> while_stmt .)
    LPAREN          reduce using rule 150 (stmt -> while_stmt .)
    END_EXPR        reduce using rule 150 (stmt -> while_stmt .)
    NUMBER          reduce using rule 150 (stmt -> while_stmt .)
    STRING          reduce using rule 150 (stmt -> while_stmt .)
    COLON           reduce using rule 150 (stmt -> while_stmt .)
    LBRACKET        reduce using rule 150 (stmt -> while_stmt .)
    LBRACE          reduce using rule 150 (stmt -> while_stmt .)
    MINUS           reduce using rule 150 (stmt -> while_stmt .)
    PLUS            reduce using rule 150 (stmt -> while_stmt .)
    HANDLE          reduce using rule 150 (stmt -> while_stmt .)
    PLUSPLUS        reduce using rule 150 (stmt -> while_stmt .)
    MINUSMINUS      reduce using rule 150 (stmt -> while_stmt .)
    $end            reduce using rule 150 (stmt -> while_stmt .)
    CATCH           reduce using rule 150 (stmt -> while_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 150 (stmt -> while_stmt .)
    ELSE            reduce using rule 150 (stmt -> while_stmt .)
    ELSEIF          reduce using rule 150 (stmt -> while_stmt .)
    END_UNWIND_PROTECT reduce using rule 150 (stmt -> while_stmt .)
    CASE            reduce using rule 150 (stmt -> while_stmt .)
    OTHERWISE       reduce using rule 150 (stmt -> while_stmt .)


state 21

    (151) stmt -> foo_stmt .

    END_STMT        reduce using rule 151 (stmt -> foo_stmt .)
    END_FUNCTION    reduce using rule 151 (stmt -> foo_stmt .)
    CONTINUE        reduce using rule 151 (stmt -> foo_stmt .)
    COMMENT         reduce using rule 151 (stmt -> foo_stmt .)
    FUNCTION        reduce using rule 151 (stmt -> foo_stmt .)
    BREAK           reduce using rule 151 (stmt -> foo_stmt .)
    GLOBAL          reduce using rule 151 (stmt -> foo_stmt .)
    PERSISTENT      reduce using rule 151 (stmt -> foo_stmt .)
    ERROR_STMT      reduce using rule 151 (stmt -> foo_stmt .)
    FOR             reduce using rule 151 (stmt -> foo_stmt .)
    IF              reduce using rule 151 (stmt -> foo_stmt .)
    SEMI            reduce using rule 151 (stmt -> foo_stmt .)
    COMMA           reduce using rule 151 (stmt -> foo_stmt .)
    RETURN          reduce using rule 151 (stmt -> foo_stmt .)
    SWITCH          reduce using rule 151 (stmt -> foo_stmt .)
    TRY             reduce using rule 151 (stmt -> foo_stmt .)
    WHILE           reduce using rule 151 (stmt -> foo_stmt .)
    UNWIND_PROTECT  reduce using rule 151 (stmt -> foo_stmt .)
    IDENT           reduce using rule 151 (stmt -> foo_stmt .)
    NEG             reduce using rule 151 (stmt -> foo_stmt .)
    LPAREN          reduce using rule 151 (stmt -> foo_stmt .)
    END_EXPR        reduce using rule 151 (stmt -> foo_stmt .)
    NUMBER          reduce using rule 151 (stmt -> foo_stmt .)
    STRING          reduce using rule 151 (stmt -> foo_stmt .)
    COLON           reduce using rule 151 (stmt -> foo_stmt .)
    LBRACKET        reduce using rule 151 (stmt -> foo_stmt .)
    LBRACE          reduce using rule 151 (stmt -> foo_stmt .)
    MINUS           reduce using rule 151 (stmt -> foo_stmt .)
    PLUS            reduce using rule 151 (stmt -> foo_stmt .)
    HANDLE          reduce using rule 151 (stmt -> foo_stmt .)
    PLUSPLUS        reduce using rule 151 (stmt -> foo_stmt .)
    MINUSMINUS      reduce using rule 151 (stmt -> foo_stmt .)
    $end            reduce using rule 151 (stmt -> foo_stmt .)
    CATCH           reduce using rule 151 (stmt -> foo_stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 151 (stmt -> foo_stmt .)
    ELSE            reduce using rule 151 (stmt -> foo_stmt .)
    ELSEIF          reduce using rule 151 (stmt -> foo_stmt .)
    END_UNWIND_PROTECT reduce using rule 151 (stmt -> foo_stmt .)
    CASE            reduce using rule 151 (stmt -> foo_stmt .)
    OTHERWISE       reduce using rule 151 (stmt -> foo_stmt .)


state 22

    (152) stmt -> unwind .

    END_STMT        reduce using rule 152 (stmt -> unwind .)
    END_FUNCTION    reduce using rule 152 (stmt -> unwind .)
    CONTINUE        reduce using rule 152 (stmt -> unwind .)
    COMMENT         reduce using rule 152 (stmt -> unwind .)
    FUNCTION        reduce using rule 152 (stmt -> unwind .)
    BREAK           reduce using rule 152 (stmt -> unwind .)
    GLOBAL          reduce using rule 152 (stmt -> unwind .)
    PERSISTENT      reduce using rule 152 (stmt -> unwind .)
    ERROR_STMT      reduce using rule 152 (stmt -> unwind .)
    FOR             reduce using rule 152 (stmt -> unwind .)
    IF              reduce using rule 152 (stmt -> unwind .)
    SEMI            reduce using rule 152 (stmt -> unwind .)
    COMMA           reduce using rule 152 (stmt -> unwind .)
    RETURN          reduce using rule 152 (stmt -> unwind .)
    SWITCH          reduce using rule 152 (stmt -> unwind .)
    TRY             reduce using rule 152 (stmt -> unwind .)
    WHILE           reduce using rule 152 (stmt -> unwind .)
    UNWIND_PROTECT  reduce using rule 152 (stmt -> unwind .)
    IDENT           reduce using rule 152 (stmt -> unwind .)
    NEG             reduce using rule 152 (stmt -> unwind .)
    LPAREN          reduce using rule 152 (stmt -> unwind .)
    END_EXPR        reduce using rule 152 (stmt -> unwind .)
    NUMBER          reduce using rule 152 (stmt -> unwind .)
    STRING          reduce using rule 152 (stmt -> unwind .)
    COLON           reduce using rule 152 (stmt -> unwind .)
    LBRACKET        reduce using rule 152 (stmt -> unwind .)
    LBRACE          reduce using rule 152 (stmt -> unwind .)
    MINUS           reduce using rule 152 (stmt -> unwind .)
    PLUS            reduce using rule 152 (stmt -> unwind .)
    HANDLE          reduce using rule 152 (stmt -> unwind .)
    PLUSPLUS        reduce using rule 152 (stmt -> unwind .)
    MINUSMINUS      reduce using rule 152 (stmt -> unwind .)
    $end            reduce using rule 152 (stmt -> unwind .)
    CATCH           reduce using rule 152 (stmt -> unwind .)
    UNWIND_PROTECT_CLEANUP reduce using rule 152 (stmt -> unwind .)
    ELSE            reduce using rule 152 (stmt -> unwind .)
    ELSEIF          reduce using rule 152 (stmt -> unwind .)
    END_UNWIND_PROTECT reduce using rule 152 (stmt -> unwind .)
    CASE            reduce using rule 152 (stmt -> unwind .)
    OTHERWISE       reduce using rule 152 (stmt -> unwind .)


state 23

    (28) continue_stmt -> CONTINUE . SEMI

    SEMI            shift and go to state 66


state 24

    (121) null_stmt -> SEMI .

    END_STMT        reduce using rule 121 (null_stmt -> SEMI .)
    END_FUNCTION    reduce using rule 121 (null_stmt -> SEMI .)
    CONTINUE        reduce using rule 121 (null_stmt -> SEMI .)
    COMMENT         reduce using rule 121 (null_stmt -> SEMI .)
    FUNCTION        reduce using rule 121 (null_stmt -> SEMI .)
    BREAK           reduce using rule 121 (null_stmt -> SEMI .)
    GLOBAL          reduce using rule 121 (null_stmt -> SEMI .)
    PERSISTENT      reduce using rule 121 (null_stmt -> SEMI .)
    ERROR_STMT      reduce using rule 121 (null_stmt -> SEMI .)
    FOR             reduce using rule 121 (null_stmt -> SEMI .)
    IF              reduce using rule 121 (null_stmt -> SEMI .)
    SEMI            reduce using rule 121 (null_stmt -> SEMI .)
    COMMA           reduce using rule 121 (null_stmt -> SEMI .)
    RETURN          reduce using rule 121 (null_stmt -> SEMI .)
    SWITCH          reduce using rule 121 (null_stmt -> SEMI .)
    TRY             reduce using rule 121 (null_stmt -> SEMI .)
    WHILE           reduce using rule 121 (null_stmt -> SEMI .)
    UNWIND_PROTECT  reduce using rule 121 (null_stmt -> SEMI .)
    IDENT           reduce using rule 121 (null_stmt -> SEMI .)
    NEG             reduce using rule 121 (null_stmt -> SEMI .)
    LPAREN          reduce using rule 121 (null_stmt -> SEMI .)
    END_EXPR        reduce using rule 121 (null_stmt -> SEMI .)
    NUMBER          reduce using rule 121 (null_stmt -> SEMI .)
    STRING          reduce using rule 121 (null_stmt -> SEMI .)
    COLON           reduce using rule 121 (null_stmt -> SEMI .)
    LBRACKET        reduce using rule 121 (null_stmt -> SEMI .)
    LBRACE          reduce using rule 121 (null_stmt -> SEMI .)
    MINUS           reduce using rule 121 (null_stmt -> SEMI .)
    PLUS            reduce using rule 121 (null_stmt -> SEMI .)
    HANDLE          reduce using rule 121 (null_stmt -> SEMI .)
    PLUSPLUS        reduce using rule 121 (null_stmt -> SEMI .)
    MINUSMINUS      reduce using rule 121 (null_stmt -> SEMI .)
    $end            reduce using rule 121 (null_stmt -> SEMI .)
    CATCH           reduce using rule 121 (null_stmt -> SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 121 (null_stmt -> SEMI .)
    ELSE            reduce using rule 121 (null_stmt -> SEMI .)
    ELSEIF          reduce using rule 121 (null_stmt -> SEMI .)
    END_UNWIND_PROTECT reduce using rule 121 (null_stmt -> SEMI .)
    CASE            reduce using rule 121 (null_stmt -> SEMI .)
    OTHERWISE       reduce using rule 121 (null_stmt -> SEMI .)


state 25

    (25) comment_stmt -> COMMENT .

    END_STMT        reduce using rule 25 (comment_stmt -> COMMENT .)
    END_FUNCTION    reduce using rule 25 (comment_stmt -> COMMENT .)
    CONTINUE        reduce using rule 25 (comment_stmt -> COMMENT .)
    COMMENT         reduce using rule 25 (comment_stmt -> COMMENT .)
    FUNCTION        reduce using rule 25 (comment_stmt -> COMMENT .)
    BREAK           reduce using rule 25 (comment_stmt -> COMMENT .)
    GLOBAL          reduce using rule 25 (comment_stmt -> COMMENT .)
    PERSISTENT      reduce using rule 25 (comment_stmt -> COMMENT .)
    ERROR_STMT      reduce using rule 25 (comment_stmt -> COMMENT .)
    FOR             reduce using rule 25 (comment_stmt -> COMMENT .)
    IF              reduce using rule 25 (comment_stmt -> COMMENT .)
    SEMI            reduce using rule 25 (comment_stmt -> COMMENT .)
    COMMA           reduce using rule 25 (comment_stmt -> COMMENT .)
    RETURN          reduce using rule 25 (comment_stmt -> COMMENT .)
    SWITCH          reduce using rule 25 (comment_stmt -> COMMENT .)
    TRY             reduce using rule 25 (comment_stmt -> COMMENT .)
    WHILE           reduce using rule 25 (comment_stmt -> COMMENT .)
    UNWIND_PROTECT  reduce using rule 25 (comment_stmt -> COMMENT .)
    IDENT           reduce using rule 25 (comment_stmt -> COMMENT .)
    NEG             reduce using rule 25 (comment_stmt -> COMMENT .)
    LPAREN          reduce using rule 25 (comment_stmt -> COMMENT .)
    END_EXPR        reduce using rule 25 (comment_stmt -> COMMENT .)
    NUMBER          reduce using rule 25 (comment_stmt -> COMMENT .)
    STRING          reduce using rule 25 (comment_stmt -> COMMENT .)
    COLON           reduce using rule 25 (comment_stmt -> COMMENT .)
    LBRACKET        reduce using rule 25 (comment_stmt -> COMMENT .)
    LBRACE          reduce using rule 25 (comment_stmt -> COMMENT .)
    MINUS           reduce using rule 25 (comment_stmt -> COMMENT .)
    PLUS            reduce using rule 25 (comment_stmt -> COMMENT .)
    HANDLE          reduce using rule 25 (comment_stmt -> COMMENT .)
    PLUSPLUS        reduce using rule 25 (comment_stmt -> COMMENT .)
    MINUSMINUS      reduce using rule 25 (comment_stmt -> COMMENT .)
    $end            reduce using rule 25 (comment_stmt -> COMMENT .)
    CATCH           reduce using rule 25 (comment_stmt -> COMMENT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 25 (comment_stmt -> COMMENT .)
    ELSE            reduce using rule 25 (comment_stmt -> COMMENT .)
    ELSEIF          reduce using rule 25 (comment_stmt -> COMMENT .)
    END_UNWIND_PROTECT reduce using rule 25 (comment_stmt -> COMMENT .)
    CASE            reduce using rule 25 (comment_stmt -> COMMENT .)
    OTHERWISE       reduce using rule 25 (comment_stmt -> COMMENT .)


state 26

    (103) func_stmt -> FUNCTION . ident lambda_args SEMI
    (104) func_stmt -> FUNCTION . ret EQ ident lambda_args SEMI
    (87) ident -> . IDENT
    (126) ret -> . ident
    (127) ret -> . LBRACKET RBRACKET
    (128) ret -> . LBRACKET expr_list RBRACKET

    IDENT           shift and go to state 45
    LBRACKET        shift and go to state 69

    ident                          shift and go to state 67
    ret                            shift and go to state 68

state 27

    (24) command -> ident . args SEMI
    (34) expr -> ident .
    (11) args -> . arg1
    (12) args -> . args arg1
    (5) arg1 -> . STRING
    (6) arg1 -> . NUMBER
    (7) arg1 -> . IDENT
    (8) arg1 -> . GLOBAL

    OROR            reduce using rule 34 (expr -> ident .)
    LBRACE          reduce using rule 34 (expr -> ident .)
    PLUSPLUS        reduce using rule 34 (expr -> ident .)
    MINUSMINUS      reduce using rule 34 (expr -> ident .)
    FIELD           reduce using rule 34 (expr -> ident .)
    LPAREN          reduce using rule 34 (expr -> ident .)
    TRANSPOSE       reduce using rule 34 (expr -> ident .)
    AND             reduce using rule 34 (expr -> ident .)
    ANDAND          reduce using rule 34 (expr -> ident .)
    BACKSLASH       reduce using rule 34 (expr -> ident .)
    COLON           reduce using rule 34 (expr -> ident .)
    DIV             reduce using rule 34 (expr -> ident .)
    DOT             reduce using rule 34 (expr -> ident .)
    DOTDIV          reduce using rule 34 (expr -> ident .)
    DOTDIVEQ        reduce using rule 34 (expr -> ident .)
    DOTEXP          reduce using rule 34 (expr -> ident .)
    DOTMUL          reduce using rule 34 (expr -> ident .)
    DOTMULEQ        reduce using rule 34 (expr -> ident .)
    EQEQ            reduce using rule 34 (expr -> ident .)
    POW             reduce using rule 34 (expr -> ident .)
    EXP             reduce using rule 34 (expr -> ident .)
    EXPEQ           reduce using rule 34 (expr -> ident .)
    GE              reduce using rule 34 (expr -> ident .)
    GT              reduce using rule 34 (expr -> ident .)
    LE              reduce using rule 34 (expr -> ident .)
    LT              reduce using rule 34 (expr -> ident .)
    MINUS           reduce using rule 34 (expr -> ident .)
    MUL             reduce using rule 34 (expr -> ident .)
    NE              reduce using rule 34 (expr -> ident .)
    OR              reduce using rule 34 (expr -> ident .)
    PLUS            reduce using rule 34 (expr -> ident .)
    EQ              reduce using rule 34 (expr -> ident .)
    MULEQ           reduce using rule 34 (expr -> ident .)
    DIVEQ           reduce using rule 34 (expr -> ident .)
    MINUSEQ         reduce using rule 34 (expr -> ident .)
    PLUSEQ          reduce using rule 34 (expr -> ident .)
    OREQ            reduce using rule 34 (expr -> ident .)
    ANDEQ           reduce using rule 34 (expr -> ident .)
    COMMA           reduce using rule 34 (expr -> ident .)
    SEMI            reduce using rule 34 (expr -> ident .)
    STRING          shift and go to state 72
    NUMBER          shift and go to state 73
    IDENT           shift and go to state 74
    GLOBAL          shift and go to state 75

    args                           shift and go to state 70
    arg1                           shift and go to state 71

state 28

    (13) break_stmt -> BREAK . SEMI

    SEMI            shift and go to state 76


state 29

    (94) expr_stmt -> expr_list . SEMI

    SEMI            shift and go to state 77


state 30

    (109) global_stmt -> GLOBAL . global_list SEMI
    (110) global_stmt -> GLOBAL . ident EQ expr SEMI
    (107) global_list -> . ident
    (108) global_list -> . global_list ident
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    global_list                    shift and go to state 78
    ident                          shift and go to state 79

state 31

    (99) foo_stmt -> expr . OROR expr SEMI
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (96) exprs -> expr .
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            shift and go to state 80
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    COMMA           reduce using rule 96 (exprs -> expr .)
    SEMI            reduce using rule 96 (exprs -> expr .)
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 32

    (124) persistent_stmt -> PERSISTENT . global_list SEMI
    (125) persistent_stmt -> PERSISTENT . ident EQ expr SEMI
    (107) global_list -> . ident
    (108) global_list -> . global_list ident
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    global_list                    shift and go to state 118
    ident                          shift and go to state 119

state 33

    (33) error_stmt -> ERROR_STMT . SEMI

    SEMI            shift and go to state 120


state 34

    (100) for_stmt -> FOR . ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> FOR . LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> FOR . matrix EQ expr SEMI stmt_list END_STMT
    (87) ident -> . IDENT
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET

    LPAREN          shift and go to state 122
    IDENT           shift and go to state 45
    LBRACKET        shift and go to state 62

    ident                          shift and go to state 121
    matrix                         shift and go to state 123

state 35

    (123) expr -> LPAREN . expr RPAREN
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 124
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 36

    (40) expr -> matrix .

    OROR            reduce using rule 40 (expr -> matrix .)
    LBRACE          reduce using rule 40 (expr -> matrix .)
    PLUSPLUS        reduce using rule 40 (expr -> matrix .)
    MINUSMINUS      reduce using rule 40 (expr -> matrix .)
    FIELD           reduce using rule 40 (expr -> matrix .)
    LPAREN          reduce using rule 40 (expr -> matrix .)
    TRANSPOSE       reduce using rule 40 (expr -> matrix .)
    AND             reduce using rule 40 (expr -> matrix .)
    ANDAND          reduce using rule 40 (expr -> matrix .)
    BACKSLASH       reduce using rule 40 (expr -> matrix .)
    COLON           reduce using rule 40 (expr -> matrix .)
    DIV             reduce using rule 40 (expr -> matrix .)
    DOT             reduce using rule 40 (expr -> matrix .)
    DOTDIV          reduce using rule 40 (expr -> matrix .)
    DOTDIVEQ        reduce using rule 40 (expr -> matrix .)
    DOTEXP          reduce using rule 40 (expr -> matrix .)
    DOTMUL          reduce using rule 40 (expr -> matrix .)
    DOTMULEQ        reduce using rule 40 (expr -> matrix .)
    EQEQ            reduce using rule 40 (expr -> matrix .)
    POW             reduce using rule 40 (expr -> matrix .)
    EXP             reduce using rule 40 (expr -> matrix .)
    EXPEQ           reduce using rule 40 (expr -> matrix .)
    GE              reduce using rule 40 (expr -> matrix .)
    GT              reduce using rule 40 (expr -> matrix .)
    LE              reduce using rule 40 (expr -> matrix .)
    LT              reduce using rule 40 (expr -> matrix .)
    MINUS           reduce using rule 40 (expr -> matrix .)
    MUL             reduce using rule 40 (expr -> matrix .)
    NE              reduce using rule 40 (expr -> matrix .)
    OR              reduce using rule 40 (expr -> matrix .)
    PLUS            reduce using rule 40 (expr -> matrix .)
    EQ              reduce using rule 40 (expr -> matrix .)
    MULEQ           reduce using rule 40 (expr -> matrix .)
    DIVEQ           reduce using rule 40 (expr -> matrix .)
    MINUSEQ         reduce using rule 40 (expr -> matrix .)
    PLUSEQ          reduce using rule 40 (expr -> matrix .)
    OREQ            reduce using rule 40 (expr -> matrix .)
    ANDEQ           reduce using rule 40 (expr -> matrix .)
    COMMA           reduce using rule 40 (expr -> matrix .)
    SEMI            reduce using rule 40 (expr -> matrix .)
    RPAREN          reduce using rule 40 (expr -> matrix .)
    CASE            reduce using rule 40 (expr -> matrix .)
    OTHERWISE       reduce using rule 40 (expr -> matrix .)
    END_STMT        reduce using rule 40 (expr -> matrix .)
    RBRACE          reduce using rule 40 (expr -> matrix .)
    RBRACKET        reduce using rule 40 (expr -> matrix .)
    error           reduce using rule 40 (expr -> matrix .)


state 37

    (111) if_stmt -> IF . expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> IF . LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    LPAREN          shift and go to state 127
    NEG             shift and go to state 51
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 126
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 38

    (122) null_stmt -> COMMA .

    END_STMT        reduce using rule 122 (null_stmt -> COMMA .)
    END_FUNCTION    reduce using rule 122 (null_stmt -> COMMA .)
    CONTINUE        reduce using rule 122 (null_stmt -> COMMA .)
    COMMENT         reduce using rule 122 (null_stmt -> COMMA .)
    FUNCTION        reduce using rule 122 (null_stmt -> COMMA .)
    BREAK           reduce using rule 122 (null_stmt -> COMMA .)
    GLOBAL          reduce using rule 122 (null_stmt -> COMMA .)
    PERSISTENT      reduce using rule 122 (null_stmt -> COMMA .)
    ERROR_STMT      reduce using rule 122 (null_stmt -> COMMA .)
    FOR             reduce using rule 122 (null_stmt -> COMMA .)
    IF              reduce using rule 122 (null_stmt -> COMMA .)
    SEMI            reduce using rule 122 (null_stmt -> COMMA .)
    COMMA           reduce using rule 122 (null_stmt -> COMMA .)
    RETURN          reduce using rule 122 (null_stmt -> COMMA .)
    SWITCH          reduce using rule 122 (null_stmt -> COMMA .)
    TRY             reduce using rule 122 (null_stmt -> COMMA .)
    WHILE           reduce using rule 122 (null_stmt -> COMMA .)
    UNWIND_PROTECT  reduce using rule 122 (null_stmt -> COMMA .)
    IDENT           reduce using rule 122 (null_stmt -> COMMA .)
    NEG             reduce using rule 122 (null_stmt -> COMMA .)
    LPAREN          reduce using rule 122 (null_stmt -> COMMA .)
    END_EXPR        reduce using rule 122 (null_stmt -> COMMA .)
    NUMBER          reduce using rule 122 (null_stmt -> COMMA .)
    STRING          reduce using rule 122 (null_stmt -> COMMA .)
    COLON           reduce using rule 122 (null_stmt -> COMMA .)
    LBRACKET        reduce using rule 122 (null_stmt -> COMMA .)
    LBRACE          reduce using rule 122 (null_stmt -> COMMA .)
    MINUS           reduce using rule 122 (null_stmt -> COMMA .)
    PLUS            reduce using rule 122 (null_stmt -> COMMA .)
    HANDLE          reduce using rule 122 (null_stmt -> COMMA .)
    PLUSPLUS        reduce using rule 122 (null_stmt -> COMMA .)
    MINUSMINUS      reduce using rule 122 (null_stmt -> COMMA .)
    $end            reduce using rule 122 (null_stmt -> COMMA .)
    CATCH           reduce using rule 122 (null_stmt -> COMMA .)
    UNWIND_PROTECT_CLEANUP reduce using rule 122 (null_stmt -> COMMA .)
    ELSE            reduce using rule 122 (null_stmt -> COMMA .)
    ELSEIF          reduce using rule 122 (null_stmt -> COMMA .)
    END_UNWIND_PROTECT reduce using rule 122 (null_stmt -> COMMA .)
    CASE            reduce using rule 122 (null_stmt -> COMMA .)
    OTHERWISE       reduce using rule 122 (null_stmt -> COMMA .)


state 39

    (129) return_stmt -> RETURN . SEMI

    SEMI            shift and go to state 128


state 40

    (157) switch_stmt -> SWITCH . expr semi_opt case_list END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 129
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 41

    (159) try_catch -> TRY . stmt_list CATCH stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list                      shift and go to state 130
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 42

    (161) while_stmt -> WHILE . expr SEMI stmt_list END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 132
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 43

    (160) unwind -> UNWIND_PROTECT . stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list                      shift and go to state 133
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 44

    (91) expr_list -> exprs .
    (92) expr_list -> exprs . COMMA
    (97) exprs -> exprs . COMMA expr

    SEMI            reduce using rule 91 (expr_list -> exprs .)
    RBRACE          reduce using rule 91 (expr_list -> exprs .)
    RBRACKET        reduce using rule 91 (expr_list -> exprs .)
    RPAREN          reduce using rule 91 (expr_list -> exprs .)
    COMMA           shift and go to state 134


state 45

    (87) ident -> IDENT .

    STRING          reduce using rule 87 (ident -> IDENT .)
    NUMBER          reduce using rule 87 (ident -> IDENT .)
    IDENT           reduce using rule 87 (ident -> IDENT .)
    GLOBAL          reduce using rule 87 (ident -> IDENT .)
    OROR            reduce using rule 87 (ident -> IDENT .)
    LBRACE          reduce using rule 87 (ident -> IDENT .)
    PLUSPLUS        reduce using rule 87 (ident -> IDENT .)
    MINUSMINUS      reduce using rule 87 (ident -> IDENT .)
    FIELD           reduce using rule 87 (ident -> IDENT .)
    LPAREN          reduce using rule 87 (ident -> IDENT .)
    TRANSPOSE       reduce using rule 87 (ident -> IDENT .)
    AND             reduce using rule 87 (ident -> IDENT .)
    ANDAND          reduce using rule 87 (ident -> IDENT .)
    BACKSLASH       reduce using rule 87 (ident -> IDENT .)
    COLON           reduce using rule 87 (ident -> IDENT .)
    DIV             reduce using rule 87 (ident -> IDENT .)
    DOT             reduce using rule 87 (ident -> IDENT .)
    DOTDIV          reduce using rule 87 (ident -> IDENT .)
    DOTDIVEQ        reduce using rule 87 (ident -> IDENT .)
    DOTEXP          reduce using rule 87 (ident -> IDENT .)
    DOTMUL          reduce using rule 87 (ident -> IDENT .)
    DOTMULEQ        reduce using rule 87 (ident -> IDENT .)
    EQEQ            reduce using rule 87 (ident -> IDENT .)
    POW             reduce using rule 87 (ident -> IDENT .)
    EXP             reduce using rule 87 (ident -> IDENT .)
    EXPEQ           reduce using rule 87 (ident -> IDENT .)
    GE              reduce using rule 87 (ident -> IDENT .)
    GT              reduce using rule 87 (ident -> IDENT .)
    LE              reduce using rule 87 (ident -> IDENT .)
    LT              reduce using rule 87 (ident -> IDENT .)
    MINUS           reduce using rule 87 (ident -> IDENT .)
    MUL             reduce using rule 87 (ident -> IDENT .)
    NE              reduce using rule 87 (ident -> IDENT .)
    OR              reduce using rule 87 (ident -> IDENT .)
    PLUS            reduce using rule 87 (ident -> IDENT .)
    EQ              reduce using rule 87 (ident -> IDENT .)
    MULEQ           reduce using rule 87 (ident -> IDENT .)
    DIVEQ           reduce using rule 87 (ident -> IDENT .)
    MINUSEQ         reduce using rule 87 (ident -> IDENT .)
    PLUSEQ          reduce using rule 87 (ident -> IDENT .)
    OREQ            reduce using rule 87 (ident -> IDENT .)
    ANDEQ           reduce using rule 87 (ident -> IDENT .)
    COMMA           reduce using rule 87 (ident -> IDENT .)
    SEMI            reduce using rule 87 (ident -> IDENT .)
    RPAREN          reduce using rule 87 (ident -> IDENT .)
    CASE            reduce using rule 87 (ident -> IDENT .)
    OTHERWISE       reduce using rule 87 (ident -> IDENT .)
    END_STMT        reduce using rule 87 (ident -> IDENT .)
    RBRACE          reduce using rule 87 (ident -> IDENT .)
    RBRACKET        reduce using rule 87 (ident -> IDENT .)
    error           reduce using rule 87 (ident -> IDENT .)


state 46

    (18) cellarray -> LBRACE . RBRACE
    (19) cellarray -> LBRACE . expr_list RBRACE
    (20) cellarray -> LBRACE . concat_list RBRACE
    (21) cellarray -> LBRACE . concat_list SEMI RBRACE
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (26) concat_list -> . expr_list SEMI expr_list
    (27) concat_list -> . concat_list SEMI expr_list
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 135
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 136
    concat_list                    shift and go to state 137
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 47

    (35) expr -> end .

    OROR            reduce using rule 35 (expr -> end .)
    LBRACE          reduce using rule 35 (expr -> end .)
    PLUSPLUS        reduce using rule 35 (expr -> end .)
    MINUSMINUS      reduce using rule 35 (expr -> end .)
    FIELD           reduce using rule 35 (expr -> end .)
    LPAREN          reduce using rule 35 (expr -> end .)
    TRANSPOSE       reduce using rule 35 (expr -> end .)
    AND             reduce using rule 35 (expr -> end .)
    ANDAND          reduce using rule 35 (expr -> end .)
    BACKSLASH       reduce using rule 35 (expr -> end .)
    COLON           reduce using rule 35 (expr -> end .)
    DIV             reduce using rule 35 (expr -> end .)
    DOT             reduce using rule 35 (expr -> end .)
    DOTDIV          reduce using rule 35 (expr -> end .)
    DOTDIVEQ        reduce using rule 35 (expr -> end .)
    DOTEXP          reduce using rule 35 (expr -> end .)
    DOTMUL          reduce using rule 35 (expr -> end .)
    DOTMULEQ        reduce using rule 35 (expr -> end .)
    EQEQ            reduce using rule 35 (expr -> end .)
    POW             reduce using rule 35 (expr -> end .)
    EXP             reduce using rule 35 (expr -> end .)
    EXPEQ           reduce using rule 35 (expr -> end .)
    GE              reduce using rule 35 (expr -> end .)
    GT              reduce using rule 35 (expr -> end .)
    LE              reduce using rule 35 (expr -> end .)
    LT              reduce using rule 35 (expr -> end .)
    MINUS           reduce using rule 35 (expr -> end .)
    MUL             reduce using rule 35 (expr -> end .)
    NE              reduce using rule 35 (expr -> end .)
    OR              reduce using rule 35 (expr -> end .)
    PLUS            reduce using rule 35 (expr -> end .)
    EQ              reduce using rule 35 (expr -> end .)
    MULEQ           reduce using rule 35 (expr -> end .)
    DIVEQ           reduce using rule 35 (expr -> end .)
    MINUSEQ         reduce using rule 35 (expr -> end .)
    PLUSEQ          reduce using rule 35 (expr -> end .)
    OREQ            reduce using rule 35 (expr -> end .)
    ANDEQ           reduce using rule 35 (expr -> end .)
    COMMA           reduce using rule 35 (expr -> end .)
    SEMI            reduce using rule 35 (expr -> end .)
    RPAREN          reduce using rule 35 (expr -> end .)
    CASE            reduce using rule 35 (expr -> end .)
    OTHERWISE       reduce using rule 35 (expr -> end .)
    END_STMT        reduce using rule 35 (expr -> end .)
    RBRACE          reduce using rule 35 (expr -> end .)
    RBRACKET        reduce using rule 35 (expr -> end .)
    error           reduce using rule 35 (expr -> end .)


state 48

    (36) expr -> number .

    OROR            reduce using rule 36 (expr -> number .)
    LBRACE          reduce using rule 36 (expr -> number .)
    PLUSPLUS        reduce using rule 36 (expr -> number .)
    MINUSMINUS      reduce using rule 36 (expr -> number .)
    FIELD           reduce using rule 36 (expr -> number .)
    LPAREN          reduce using rule 36 (expr -> number .)
    TRANSPOSE       reduce using rule 36 (expr -> number .)
    AND             reduce using rule 36 (expr -> number .)
    ANDAND          reduce using rule 36 (expr -> number .)
    BACKSLASH       reduce using rule 36 (expr -> number .)
    COLON           reduce using rule 36 (expr -> number .)
    DIV             reduce using rule 36 (expr -> number .)
    DOT             reduce using rule 36 (expr -> number .)
    DOTDIV          reduce using rule 36 (expr -> number .)
    DOTDIVEQ        reduce using rule 36 (expr -> number .)
    DOTEXP          reduce using rule 36 (expr -> number .)
    DOTMUL          reduce using rule 36 (expr -> number .)
    DOTMULEQ        reduce using rule 36 (expr -> number .)
    EQEQ            reduce using rule 36 (expr -> number .)
    POW             reduce using rule 36 (expr -> number .)
    EXP             reduce using rule 36 (expr -> number .)
    EXPEQ           reduce using rule 36 (expr -> number .)
    GE              reduce using rule 36 (expr -> number .)
    GT              reduce using rule 36 (expr -> number .)
    LE              reduce using rule 36 (expr -> number .)
    LT              reduce using rule 36 (expr -> number .)
    MINUS           reduce using rule 36 (expr -> number .)
    MUL             reduce using rule 36 (expr -> number .)
    NE              reduce using rule 36 (expr -> number .)
    OR              reduce using rule 36 (expr -> number .)
    PLUS            reduce using rule 36 (expr -> number .)
    EQ              reduce using rule 36 (expr -> number .)
    MULEQ           reduce using rule 36 (expr -> number .)
    DIVEQ           reduce using rule 36 (expr -> number .)
    MINUSEQ         reduce using rule 36 (expr -> number .)
    PLUSEQ          reduce using rule 36 (expr -> number .)
    OREQ            reduce using rule 36 (expr -> number .)
    ANDEQ           reduce using rule 36 (expr -> number .)
    COMMA           reduce using rule 36 (expr -> number .)
    SEMI            reduce using rule 36 (expr -> number .)
    RPAREN          reduce using rule 36 (expr -> number .)
    CASE            reduce using rule 36 (expr -> number .)
    OTHERWISE       reduce using rule 36 (expr -> number .)
    END_STMT        reduce using rule 36 (expr -> number .)
    RBRACE          reduce using rule 36 (expr -> number .)
    RBRACKET        reduce using rule 36 (expr -> number .)
    error           reduce using rule 36 (expr -> number .)


state 49

    (37) expr -> string .

    OROR            reduce using rule 37 (expr -> string .)
    LBRACE          reduce using rule 37 (expr -> string .)
    PLUSPLUS        reduce using rule 37 (expr -> string .)
    MINUSMINUS      reduce using rule 37 (expr -> string .)
    FIELD           reduce using rule 37 (expr -> string .)
    LPAREN          reduce using rule 37 (expr -> string .)
    TRANSPOSE       reduce using rule 37 (expr -> string .)
    AND             reduce using rule 37 (expr -> string .)
    ANDAND          reduce using rule 37 (expr -> string .)
    BACKSLASH       reduce using rule 37 (expr -> string .)
    COLON           reduce using rule 37 (expr -> string .)
    DIV             reduce using rule 37 (expr -> string .)
    DOT             reduce using rule 37 (expr -> string .)
    DOTDIV          reduce using rule 37 (expr -> string .)
    DOTDIVEQ        reduce using rule 37 (expr -> string .)
    DOTEXP          reduce using rule 37 (expr -> string .)
    DOTMUL          reduce using rule 37 (expr -> string .)
    DOTMULEQ        reduce using rule 37 (expr -> string .)
    EQEQ            reduce using rule 37 (expr -> string .)
    POW             reduce using rule 37 (expr -> string .)
    EXP             reduce using rule 37 (expr -> string .)
    EXPEQ           reduce using rule 37 (expr -> string .)
    GE              reduce using rule 37 (expr -> string .)
    GT              reduce using rule 37 (expr -> string .)
    LE              reduce using rule 37 (expr -> string .)
    LT              reduce using rule 37 (expr -> string .)
    MINUS           reduce using rule 37 (expr -> string .)
    MUL             reduce using rule 37 (expr -> string .)
    NE              reduce using rule 37 (expr -> string .)
    OR              reduce using rule 37 (expr -> string .)
    PLUS            reduce using rule 37 (expr -> string .)
    EQ              reduce using rule 37 (expr -> string .)
    MULEQ           reduce using rule 37 (expr -> string .)
    DIVEQ           reduce using rule 37 (expr -> string .)
    MINUSEQ         reduce using rule 37 (expr -> string .)
    PLUSEQ          reduce using rule 37 (expr -> string .)
    OREQ            reduce using rule 37 (expr -> string .)
    ANDEQ           reduce using rule 37 (expr -> string .)
    COMMA           reduce using rule 37 (expr -> string .)
    SEMI            reduce using rule 37 (expr -> string .)
    RPAREN          reduce using rule 37 (expr -> string .)
    CASE            reduce using rule 37 (expr -> string .)
    OTHERWISE       reduce using rule 37 (expr -> string .)
    END_STMT        reduce using rule 37 (expr -> string .)
    RBRACE          reduce using rule 37 (expr -> string .)
    RBRACKET        reduce using rule 37 (expr -> string .)
    error           reduce using rule 37 (expr -> string .)


state 50

    (38) expr -> colon .

    OROR            reduce using rule 38 (expr -> colon .)
    LBRACE          reduce using rule 38 (expr -> colon .)
    PLUSPLUS        reduce using rule 38 (expr -> colon .)
    MINUSMINUS      reduce using rule 38 (expr -> colon .)
    FIELD           reduce using rule 38 (expr -> colon .)
    LPAREN          reduce using rule 38 (expr -> colon .)
    TRANSPOSE       reduce using rule 38 (expr -> colon .)
    AND             reduce using rule 38 (expr -> colon .)
    ANDAND          reduce using rule 38 (expr -> colon .)
    BACKSLASH       reduce using rule 38 (expr -> colon .)
    COLON           reduce using rule 38 (expr -> colon .)
    DIV             reduce using rule 38 (expr -> colon .)
    DOT             reduce using rule 38 (expr -> colon .)
    DOTDIV          reduce using rule 38 (expr -> colon .)
    DOTDIVEQ        reduce using rule 38 (expr -> colon .)
    DOTEXP          reduce using rule 38 (expr -> colon .)
    DOTMUL          reduce using rule 38 (expr -> colon .)
    DOTMULEQ        reduce using rule 38 (expr -> colon .)
    EQEQ            reduce using rule 38 (expr -> colon .)
    POW             reduce using rule 38 (expr -> colon .)
    EXP             reduce using rule 38 (expr -> colon .)
    EXPEQ           reduce using rule 38 (expr -> colon .)
    GE              reduce using rule 38 (expr -> colon .)
    GT              reduce using rule 38 (expr -> colon .)
    LE              reduce using rule 38 (expr -> colon .)
    LT              reduce using rule 38 (expr -> colon .)
    MINUS           reduce using rule 38 (expr -> colon .)
    MUL             reduce using rule 38 (expr -> colon .)
    NE              reduce using rule 38 (expr -> colon .)
    OR              reduce using rule 38 (expr -> colon .)
    PLUS            reduce using rule 38 (expr -> colon .)
    EQ              reduce using rule 38 (expr -> colon .)
    MULEQ           reduce using rule 38 (expr -> colon .)
    DIVEQ           reduce using rule 38 (expr -> colon .)
    MINUSEQ         reduce using rule 38 (expr -> colon .)
    PLUSEQ          reduce using rule 38 (expr -> colon .)
    OREQ            reduce using rule 38 (expr -> colon .)
    ANDEQ           reduce using rule 38 (expr -> colon .)
    COMMA           reduce using rule 38 (expr -> colon .)
    SEMI            reduce using rule 38 (expr -> colon .)
    RPAREN          reduce using rule 38 (expr -> colon .)
    CASE            reduce using rule 38 (expr -> colon .)
    OTHERWISE       reduce using rule 38 (expr -> colon .)
    END_STMT        reduce using rule 38 (expr -> colon .)
    RBRACE          reduce using rule 38 (expr -> colon .)
    RBRACKET        reduce using rule 38 (expr -> colon .)
    error           reduce using rule 38 (expr -> colon .)


state 51

    (39) expr -> NEG .
    (49) expr1 -> NEG . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    OROR            reduce using rule 39 (expr -> NEG .)
    FIELD           reduce using rule 39 (expr -> NEG .)
    TRANSPOSE       reduce using rule 39 (expr -> NEG .)
    AND             reduce using rule 39 (expr -> NEG .)
    ANDAND          reduce using rule 39 (expr -> NEG .)
    BACKSLASH       reduce using rule 39 (expr -> NEG .)
    COLON           reduce using rule 39 (expr -> NEG .)
    DIV             reduce using rule 39 (expr -> NEG .)
    DOT             reduce using rule 39 (expr -> NEG .)
    DOTDIV          reduce using rule 39 (expr -> NEG .)
    DOTDIVEQ        reduce using rule 39 (expr -> NEG .)
    DOTEXP          reduce using rule 39 (expr -> NEG .)
    DOTMUL          reduce using rule 39 (expr -> NEG .)
    DOTMULEQ        reduce using rule 39 (expr -> NEG .)
    EQEQ            reduce using rule 39 (expr -> NEG .)
    POW             reduce using rule 39 (expr -> NEG .)
    EXP             reduce using rule 39 (expr -> NEG .)
    EXPEQ           reduce using rule 39 (expr -> NEG .)
    GE              reduce using rule 39 (expr -> NEG .)
    GT              reduce using rule 39 (expr -> NEG .)
    LE              reduce using rule 39 (expr -> NEG .)
    LT              reduce using rule 39 (expr -> NEG .)
    MINUS           reduce using rule 39 (expr -> NEG .)
    MUL             reduce using rule 39 (expr -> NEG .)
    NE              reduce using rule 39 (expr -> NEG .)
    OR              reduce using rule 39 (expr -> NEG .)
    PLUS            reduce using rule 39 (expr -> NEG .)
    EQ              reduce using rule 39 (expr -> NEG .)
    MULEQ           reduce using rule 39 (expr -> NEG .)
    DIVEQ           reduce using rule 39 (expr -> NEG .)
    MINUSEQ         reduce using rule 39 (expr -> NEG .)
    PLUSEQ          reduce using rule 39 (expr -> NEG .)
    OREQ            reduce using rule 39 (expr -> NEG .)
    ANDEQ           reduce using rule 39 (expr -> NEG .)
    COMMA           reduce using rule 39 (expr -> NEG .)
    SEMI            reduce using rule 39 (expr -> NEG .)
    RPAREN          reduce using rule 39 (expr -> NEG .)
    CASE            reduce using rule 39 (expr -> NEG .)
    OTHERWISE       reduce using rule 39 (expr -> NEG .)
    END_STMT        reduce using rule 39 (expr -> NEG .)
    RBRACE          reduce using rule 39 (expr -> NEG .)
    RBRACKET        reduce using rule 39 (expr -> NEG .)
    error           reduce using rule 39 (expr -> NEG .)
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

  ! LBRACE          [ reduce using rule 39 (expr -> NEG .) ]
  ! PLUSPLUS        [ reduce using rule 39 (expr -> NEG .) ]
  ! MINUSMINUS      [ reduce using rule 39 (expr -> NEG .) ]
  ! LPAREN          [ reduce using rule 39 (expr -> NEG .) ]
  ! COLON           [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 63 ]
  ! PLUS            [ shift and go to state 64 ]

    expr                           shift and go to state 139
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 52

    (41) expr -> cellarray .

    OROR            reduce using rule 41 (expr -> cellarray .)
    LBRACE          reduce using rule 41 (expr -> cellarray .)
    PLUSPLUS        reduce using rule 41 (expr -> cellarray .)
    MINUSMINUS      reduce using rule 41 (expr -> cellarray .)
    FIELD           reduce using rule 41 (expr -> cellarray .)
    LPAREN          reduce using rule 41 (expr -> cellarray .)
    TRANSPOSE       reduce using rule 41 (expr -> cellarray .)
    AND             reduce using rule 41 (expr -> cellarray .)
    ANDAND          reduce using rule 41 (expr -> cellarray .)
    BACKSLASH       reduce using rule 41 (expr -> cellarray .)
    COLON           reduce using rule 41 (expr -> cellarray .)
    DIV             reduce using rule 41 (expr -> cellarray .)
    DOT             reduce using rule 41 (expr -> cellarray .)
    DOTDIV          reduce using rule 41 (expr -> cellarray .)
    DOTDIVEQ        reduce using rule 41 (expr -> cellarray .)
    DOTEXP          reduce using rule 41 (expr -> cellarray .)
    DOTMUL          reduce using rule 41 (expr -> cellarray .)
    DOTMULEQ        reduce using rule 41 (expr -> cellarray .)
    EQEQ            reduce using rule 41 (expr -> cellarray .)
    POW             reduce using rule 41 (expr -> cellarray .)
    EXP             reduce using rule 41 (expr -> cellarray .)
    EXPEQ           reduce using rule 41 (expr -> cellarray .)
    GE              reduce using rule 41 (expr -> cellarray .)
    GT              reduce using rule 41 (expr -> cellarray .)
    LE              reduce using rule 41 (expr -> cellarray .)
    LT              reduce using rule 41 (expr -> cellarray .)
    MINUS           reduce using rule 41 (expr -> cellarray .)
    MUL             reduce using rule 41 (expr -> cellarray .)
    NE              reduce using rule 41 (expr -> cellarray .)
    OR              reduce using rule 41 (expr -> cellarray .)
    PLUS            reduce using rule 41 (expr -> cellarray .)
    EQ              reduce using rule 41 (expr -> cellarray .)
    MULEQ           reduce using rule 41 (expr -> cellarray .)
    DIVEQ           reduce using rule 41 (expr -> cellarray .)
    MINUSEQ         reduce using rule 41 (expr -> cellarray .)
    PLUSEQ          reduce using rule 41 (expr -> cellarray .)
    OREQ            reduce using rule 41 (expr -> cellarray .)
    ANDEQ           reduce using rule 41 (expr -> cellarray .)
    COMMA           reduce using rule 41 (expr -> cellarray .)
    SEMI            reduce using rule 41 (expr -> cellarray .)
    RPAREN          reduce using rule 41 (expr -> cellarray .)
    CASE            reduce using rule 41 (expr -> cellarray .)
    OTHERWISE       reduce using rule 41 (expr -> cellarray .)
    END_STMT        reduce using rule 41 (expr -> cellarray .)
    RBRACE          reduce using rule 41 (expr -> cellarray .)
    RBRACKET        reduce using rule 41 (expr -> cellarray .)
    error           reduce using rule 41 (expr -> cellarray .)


state 53

    (42) expr -> expr2 .

    OROR            reduce using rule 42 (expr -> expr2 .)
    LBRACE          reduce using rule 42 (expr -> expr2 .)
    PLUSPLUS        reduce using rule 42 (expr -> expr2 .)
    MINUSMINUS      reduce using rule 42 (expr -> expr2 .)
    FIELD           reduce using rule 42 (expr -> expr2 .)
    LPAREN          reduce using rule 42 (expr -> expr2 .)
    TRANSPOSE       reduce using rule 42 (expr -> expr2 .)
    AND             reduce using rule 42 (expr -> expr2 .)
    ANDAND          reduce using rule 42 (expr -> expr2 .)
    BACKSLASH       reduce using rule 42 (expr -> expr2 .)
    COLON           reduce using rule 42 (expr -> expr2 .)
    DIV             reduce using rule 42 (expr -> expr2 .)
    DOT             reduce using rule 42 (expr -> expr2 .)
    DOTDIV          reduce using rule 42 (expr -> expr2 .)
    DOTDIVEQ        reduce using rule 42 (expr -> expr2 .)
    DOTEXP          reduce using rule 42 (expr -> expr2 .)
    DOTMUL          reduce using rule 42 (expr -> expr2 .)
    DOTMULEQ        reduce using rule 42 (expr -> expr2 .)
    EQEQ            reduce using rule 42 (expr -> expr2 .)
    POW             reduce using rule 42 (expr -> expr2 .)
    EXP             reduce using rule 42 (expr -> expr2 .)
    EXPEQ           reduce using rule 42 (expr -> expr2 .)
    GE              reduce using rule 42 (expr -> expr2 .)
    GT              reduce using rule 42 (expr -> expr2 .)
    LE              reduce using rule 42 (expr -> expr2 .)
    LT              reduce using rule 42 (expr -> expr2 .)
    MINUS           reduce using rule 42 (expr -> expr2 .)
    MUL             reduce using rule 42 (expr -> expr2 .)
    NE              reduce using rule 42 (expr -> expr2 .)
    OR              reduce using rule 42 (expr -> expr2 .)
    PLUS            reduce using rule 42 (expr -> expr2 .)
    EQ              reduce using rule 42 (expr -> expr2 .)
    MULEQ           reduce using rule 42 (expr -> expr2 .)
    DIVEQ           reduce using rule 42 (expr -> expr2 .)
    MINUSEQ         reduce using rule 42 (expr -> expr2 .)
    PLUSEQ          reduce using rule 42 (expr -> expr2 .)
    OREQ            reduce using rule 42 (expr -> expr2 .)
    ANDEQ           reduce using rule 42 (expr -> expr2 .)
    COMMA           reduce using rule 42 (expr -> expr2 .)
    SEMI            reduce using rule 42 (expr -> expr2 .)
    RPAREN          reduce using rule 42 (expr -> expr2 .)
    CASE            reduce using rule 42 (expr -> expr2 .)
    OTHERWISE       reduce using rule 42 (expr -> expr2 .)
    END_STMT        reduce using rule 42 (expr -> expr2 .)
    RBRACE          reduce using rule 42 (expr -> expr2 .)
    RBRACKET        reduce using rule 42 (expr -> expr2 .)
    error           reduce using rule 42 (expr -> expr2 .)


state 54

    (43) expr -> expr1 .

    OROR            reduce using rule 43 (expr -> expr1 .)
    LBRACE          reduce using rule 43 (expr -> expr1 .)
    PLUSPLUS        reduce using rule 43 (expr -> expr1 .)
    MINUSMINUS      reduce using rule 43 (expr -> expr1 .)
    FIELD           reduce using rule 43 (expr -> expr1 .)
    LPAREN          reduce using rule 43 (expr -> expr1 .)
    TRANSPOSE       reduce using rule 43 (expr -> expr1 .)
    AND             reduce using rule 43 (expr -> expr1 .)
    ANDAND          reduce using rule 43 (expr -> expr1 .)
    BACKSLASH       reduce using rule 43 (expr -> expr1 .)
    COLON           reduce using rule 43 (expr -> expr1 .)
    DIV             reduce using rule 43 (expr -> expr1 .)
    DOT             reduce using rule 43 (expr -> expr1 .)
    DOTDIV          reduce using rule 43 (expr -> expr1 .)
    DOTDIVEQ        reduce using rule 43 (expr -> expr1 .)
    DOTEXP          reduce using rule 43 (expr -> expr1 .)
    DOTMUL          reduce using rule 43 (expr -> expr1 .)
    DOTMULEQ        reduce using rule 43 (expr -> expr1 .)
    EQEQ            reduce using rule 43 (expr -> expr1 .)
    POW             reduce using rule 43 (expr -> expr1 .)
    EXP             reduce using rule 43 (expr -> expr1 .)
    EXPEQ           reduce using rule 43 (expr -> expr1 .)
    GE              reduce using rule 43 (expr -> expr1 .)
    GT              reduce using rule 43 (expr -> expr1 .)
    LE              reduce using rule 43 (expr -> expr1 .)
    LT              reduce using rule 43 (expr -> expr1 .)
    MINUS           reduce using rule 43 (expr -> expr1 .)
    MUL             reduce using rule 43 (expr -> expr1 .)
    NE              reduce using rule 43 (expr -> expr1 .)
    OR              reduce using rule 43 (expr -> expr1 .)
    PLUS            reduce using rule 43 (expr -> expr1 .)
    EQ              reduce using rule 43 (expr -> expr1 .)
    MULEQ           reduce using rule 43 (expr -> expr1 .)
    DIVEQ           reduce using rule 43 (expr -> expr1 .)
    MINUSEQ         reduce using rule 43 (expr -> expr1 .)
    PLUSEQ          reduce using rule 43 (expr -> expr1 .)
    OREQ            reduce using rule 43 (expr -> expr1 .)
    ANDEQ           reduce using rule 43 (expr -> expr1 .)
    COMMA           reduce using rule 43 (expr -> expr1 .)
    SEMI            reduce using rule 43 (expr -> expr1 .)
    RPAREN          reduce using rule 43 (expr -> expr1 .)
    CASE            reduce using rule 43 (expr -> expr1 .)
    OTHERWISE       reduce using rule 43 (expr -> expr1 .)
    END_STMT        reduce using rule 43 (expr -> expr1 .)
    RBRACE          reduce using rule 43 (expr -> expr1 .)
    RBRACKET        reduce using rule 43 (expr -> expr1 .)
    error           reduce using rule 43 (expr -> expr1 .)


state 55

    (44) expr -> lambda_expr .

    OROR            reduce using rule 44 (expr -> lambda_expr .)
    LBRACE          reduce using rule 44 (expr -> lambda_expr .)
    PLUSPLUS        reduce using rule 44 (expr -> lambda_expr .)
    MINUSMINUS      reduce using rule 44 (expr -> lambda_expr .)
    FIELD           reduce using rule 44 (expr -> lambda_expr .)
    LPAREN          reduce using rule 44 (expr -> lambda_expr .)
    TRANSPOSE       reduce using rule 44 (expr -> lambda_expr .)
    AND             reduce using rule 44 (expr -> lambda_expr .)
    ANDAND          reduce using rule 44 (expr -> lambda_expr .)
    BACKSLASH       reduce using rule 44 (expr -> lambda_expr .)
    COLON           reduce using rule 44 (expr -> lambda_expr .)
    DIV             reduce using rule 44 (expr -> lambda_expr .)
    DOT             reduce using rule 44 (expr -> lambda_expr .)
    DOTDIV          reduce using rule 44 (expr -> lambda_expr .)
    DOTDIVEQ        reduce using rule 44 (expr -> lambda_expr .)
    DOTEXP          reduce using rule 44 (expr -> lambda_expr .)
    DOTMUL          reduce using rule 44 (expr -> lambda_expr .)
    DOTMULEQ        reduce using rule 44 (expr -> lambda_expr .)
    EQEQ            reduce using rule 44 (expr -> lambda_expr .)
    POW             reduce using rule 44 (expr -> lambda_expr .)
    EXP             reduce using rule 44 (expr -> lambda_expr .)
    EXPEQ           reduce using rule 44 (expr -> lambda_expr .)
    GE              reduce using rule 44 (expr -> lambda_expr .)
    GT              reduce using rule 44 (expr -> lambda_expr .)
    LE              reduce using rule 44 (expr -> lambda_expr .)
    LT              reduce using rule 44 (expr -> lambda_expr .)
    MINUS           reduce using rule 44 (expr -> lambda_expr .)
    MUL             reduce using rule 44 (expr -> lambda_expr .)
    NE              reduce using rule 44 (expr -> lambda_expr .)
    OR              reduce using rule 44 (expr -> lambda_expr .)
    PLUS            reduce using rule 44 (expr -> lambda_expr .)
    EQ              reduce using rule 44 (expr -> lambda_expr .)
    MULEQ           reduce using rule 44 (expr -> lambda_expr .)
    DIVEQ           reduce using rule 44 (expr -> lambda_expr .)
    MINUSEQ         reduce using rule 44 (expr -> lambda_expr .)
    PLUSEQ          reduce using rule 44 (expr -> lambda_expr .)
    OREQ            reduce using rule 44 (expr -> lambda_expr .)
    ANDEQ           reduce using rule 44 (expr -> lambda_expr .)
    COMMA           reduce using rule 44 (expr -> lambda_expr .)
    SEMI            reduce using rule 44 (expr -> lambda_expr .)
    RPAREN          reduce using rule 44 (expr -> lambda_expr .)
    CASE            reduce using rule 44 (expr -> lambda_expr .)
    OTHERWISE       reduce using rule 44 (expr -> lambda_expr .)
    END_STMT        reduce using rule 44 (expr -> lambda_expr .)
    RBRACE          reduce using rule 44 (expr -> lambda_expr .)
    RBRACKET        reduce using rule 44 (expr -> lambda_expr .)
    error           reduce using rule 44 (expr -> lambda_expr .)


state 56

    (51) expr1 -> PLUSPLUS . ident
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    ident                          shift and go to state 140

state 57

    (52) expr1 -> MINUSMINUS . ident
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    ident                          shift and go to state 141

state 58

    (86) end -> END_EXPR .

    OROR            reduce using rule 86 (end -> END_EXPR .)
    LBRACE          reduce using rule 86 (end -> END_EXPR .)
    PLUSPLUS        reduce using rule 86 (end -> END_EXPR .)
    MINUSMINUS      reduce using rule 86 (end -> END_EXPR .)
    FIELD           reduce using rule 86 (end -> END_EXPR .)
    LPAREN          reduce using rule 86 (end -> END_EXPR .)
    TRANSPOSE       reduce using rule 86 (end -> END_EXPR .)
    AND             reduce using rule 86 (end -> END_EXPR .)
    ANDAND          reduce using rule 86 (end -> END_EXPR .)
    BACKSLASH       reduce using rule 86 (end -> END_EXPR .)
    COLON           reduce using rule 86 (end -> END_EXPR .)
    DIV             reduce using rule 86 (end -> END_EXPR .)
    DOT             reduce using rule 86 (end -> END_EXPR .)
    DOTDIV          reduce using rule 86 (end -> END_EXPR .)
    DOTDIVEQ        reduce using rule 86 (end -> END_EXPR .)
    DOTEXP          reduce using rule 86 (end -> END_EXPR .)
    DOTMUL          reduce using rule 86 (end -> END_EXPR .)
    DOTMULEQ        reduce using rule 86 (end -> END_EXPR .)
    EQEQ            reduce using rule 86 (end -> END_EXPR .)
    POW             reduce using rule 86 (end -> END_EXPR .)
    EXP             reduce using rule 86 (end -> END_EXPR .)
    EXPEQ           reduce using rule 86 (end -> END_EXPR .)
    GE              reduce using rule 86 (end -> END_EXPR .)
    GT              reduce using rule 86 (end -> END_EXPR .)
    LE              reduce using rule 86 (end -> END_EXPR .)
    LT              reduce using rule 86 (end -> END_EXPR .)
    MINUS           reduce using rule 86 (end -> END_EXPR .)
    MUL             reduce using rule 86 (end -> END_EXPR .)
    NE              reduce using rule 86 (end -> END_EXPR .)
    OR              reduce using rule 86 (end -> END_EXPR .)
    PLUS            reduce using rule 86 (end -> END_EXPR .)
    EQ              reduce using rule 86 (end -> END_EXPR .)
    MULEQ           reduce using rule 86 (end -> END_EXPR .)
    DIVEQ           reduce using rule 86 (end -> END_EXPR .)
    MINUSEQ         reduce using rule 86 (end -> END_EXPR .)
    PLUSEQ          reduce using rule 86 (end -> END_EXPR .)
    OREQ            reduce using rule 86 (end -> END_EXPR .)
    ANDEQ           reduce using rule 86 (end -> END_EXPR .)
    COMMA           reduce using rule 86 (end -> END_EXPR .)
    SEMI            reduce using rule 86 (end -> END_EXPR .)
    RPAREN          reduce using rule 86 (end -> END_EXPR .)
    CASE            reduce using rule 86 (end -> END_EXPR .)
    OTHERWISE       reduce using rule 86 (end -> END_EXPR .)
    END_STMT        reduce using rule 86 (end -> END_EXPR .)
    RBRACE          reduce using rule 86 (end -> END_EXPR .)
    RBRACKET        reduce using rule 86 (end -> END_EXPR .)
    error           reduce using rule 86 (end -> END_EXPR .)


state 59

    (93) number -> NUMBER .

    OROR            reduce using rule 93 (number -> NUMBER .)
    LBRACE          reduce using rule 93 (number -> NUMBER .)
    PLUSPLUS        reduce using rule 93 (number -> NUMBER .)
    MINUSMINUS      reduce using rule 93 (number -> NUMBER .)
    FIELD           reduce using rule 93 (number -> NUMBER .)
    LPAREN          reduce using rule 93 (number -> NUMBER .)
    TRANSPOSE       reduce using rule 93 (number -> NUMBER .)
    AND             reduce using rule 93 (number -> NUMBER .)
    ANDAND          reduce using rule 93 (number -> NUMBER .)
    BACKSLASH       reduce using rule 93 (number -> NUMBER .)
    COLON           reduce using rule 93 (number -> NUMBER .)
    DIV             reduce using rule 93 (number -> NUMBER .)
    DOT             reduce using rule 93 (number -> NUMBER .)
    DOTDIV          reduce using rule 93 (number -> NUMBER .)
    DOTDIVEQ        reduce using rule 93 (number -> NUMBER .)
    DOTEXP          reduce using rule 93 (number -> NUMBER .)
    DOTMUL          reduce using rule 93 (number -> NUMBER .)
    DOTMULEQ        reduce using rule 93 (number -> NUMBER .)
    EQEQ            reduce using rule 93 (number -> NUMBER .)
    POW             reduce using rule 93 (number -> NUMBER .)
    EXP             reduce using rule 93 (number -> NUMBER .)
    EXPEQ           reduce using rule 93 (number -> NUMBER .)
    GE              reduce using rule 93 (number -> NUMBER .)
    GT              reduce using rule 93 (number -> NUMBER .)
    LE              reduce using rule 93 (number -> NUMBER .)
    LT              reduce using rule 93 (number -> NUMBER .)
    MINUS           reduce using rule 93 (number -> NUMBER .)
    MUL             reduce using rule 93 (number -> NUMBER .)
    NE              reduce using rule 93 (number -> NUMBER .)
    OR              reduce using rule 93 (number -> NUMBER .)
    PLUS            reduce using rule 93 (number -> NUMBER .)
    EQ              reduce using rule 93 (number -> NUMBER .)
    MULEQ           reduce using rule 93 (number -> NUMBER .)
    DIVEQ           reduce using rule 93 (number -> NUMBER .)
    MINUSEQ         reduce using rule 93 (number -> NUMBER .)
    PLUSEQ          reduce using rule 93 (number -> NUMBER .)
    OREQ            reduce using rule 93 (number -> NUMBER .)
    ANDEQ           reduce using rule 93 (number -> NUMBER .)
    COMMA           reduce using rule 93 (number -> NUMBER .)
    SEMI            reduce using rule 93 (number -> NUMBER .)
    RPAREN          reduce using rule 93 (number -> NUMBER .)
    CASE            reduce using rule 93 (number -> NUMBER .)
    OTHERWISE       reduce using rule 93 (number -> NUMBER .)
    END_STMT        reduce using rule 93 (number -> NUMBER .)
    RBRACE          reduce using rule 93 (number -> NUMBER .)
    RBRACKET        reduce using rule 93 (number -> NUMBER .)
    error           reduce using rule 93 (number -> NUMBER .)


state 60

    (95) string -> STRING .

    OROR            reduce using rule 95 (string -> STRING .)
    LBRACE          reduce using rule 95 (string -> STRING .)
    PLUSPLUS        reduce using rule 95 (string -> STRING .)
    MINUSMINUS      reduce using rule 95 (string -> STRING .)
    FIELD           reduce using rule 95 (string -> STRING .)
    LPAREN          reduce using rule 95 (string -> STRING .)
    TRANSPOSE       reduce using rule 95 (string -> STRING .)
    AND             reduce using rule 95 (string -> STRING .)
    ANDAND          reduce using rule 95 (string -> STRING .)
    BACKSLASH       reduce using rule 95 (string -> STRING .)
    COLON           reduce using rule 95 (string -> STRING .)
    DIV             reduce using rule 95 (string -> STRING .)
    DOT             reduce using rule 95 (string -> STRING .)
    DOTDIV          reduce using rule 95 (string -> STRING .)
    DOTDIVEQ        reduce using rule 95 (string -> STRING .)
    DOTEXP          reduce using rule 95 (string -> STRING .)
    DOTMUL          reduce using rule 95 (string -> STRING .)
    DOTMULEQ        reduce using rule 95 (string -> STRING .)
    EQEQ            reduce using rule 95 (string -> STRING .)
    POW             reduce using rule 95 (string -> STRING .)
    EXP             reduce using rule 95 (string -> STRING .)
    EXPEQ           reduce using rule 95 (string -> STRING .)
    GE              reduce using rule 95 (string -> STRING .)
    GT              reduce using rule 95 (string -> STRING .)
    LE              reduce using rule 95 (string -> STRING .)
    LT              reduce using rule 95 (string -> STRING .)
    MINUS           reduce using rule 95 (string -> STRING .)
    MUL             reduce using rule 95 (string -> STRING .)
    NE              reduce using rule 95 (string -> STRING .)
    OR              reduce using rule 95 (string -> STRING .)
    PLUS            reduce using rule 95 (string -> STRING .)
    EQ              reduce using rule 95 (string -> STRING .)
    MULEQ           reduce using rule 95 (string -> STRING .)
    DIVEQ           reduce using rule 95 (string -> STRING .)
    MINUSEQ         reduce using rule 95 (string -> STRING .)
    PLUSEQ          reduce using rule 95 (string -> STRING .)
    OREQ            reduce using rule 95 (string -> STRING .)
    ANDEQ           reduce using rule 95 (string -> STRING .)
    COMMA           reduce using rule 95 (string -> STRING .)
    SEMI            reduce using rule 95 (string -> STRING .)
    RPAREN          reduce using rule 95 (string -> STRING .)
    CASE            reduce using rule 95 (string -> STRING .)
    OTHERWISE       reduce using rule 95 (string -> STRING .)
    END_STMT        reduce using rule 95 (string -> STRING .)
    RBRACE          reduce using rule 95 (string -> STRING .)
    RBRACKET        reduce using rule 95 (string -> STRING .)
    error           reduce using rule 95 (string -> STRING .)


state 61

    (85) colon -> COLON .

    OROR            reduce using rule 85 (colon -> COLON .)
    LBRACE          reduce using rule 85 (colon -> COLON .)
    PLUSPLUS        reduce using rule 85 (colon -> COLON .)
    MINUSMINUS      reduce using rule 85 (colon -> COLON .)
    FIELD           reduce using rule 85 (colon -> COLON .)
    LPAREN          reduce using rule 85 (colon -> COLON .)
    TRANSPOSE       reduce using rule 85 (colon -> COLON .)
    AND             reduce using rule 85 (colon -> COLON .)
    ANDAND          reduce using rule 85 (colon -> COLON .)
    BACKSLASH       reduce using rule 85 (colon -> COLON .)
    COLON           reduce using rule 85 (colon -> COLON .)
    DIV             reduce using rule 85 (colon -> COLON .)
    DOT             reduce using rule 85 (colon -> COLON .)
    DOTDIV          reduce using rule 85 (colon -> COLON .)
    DOTDIVEQ        reduce using rule 85 (colon -> COLON .)
    DOTEXP          reduce using rule 85 (colon -> COLON .)
    DOTMUL          reduce using rule 85 (colon -> COLON .)
    DOTMULEQ        reduce using rule 85 (colon -> COLON .)
    EQEQ            reduce using rule 85 (colon -> COLON .)
    POW             reduce using rule 85 (colon -> COLON .)
    EXP             reduce using rule 85 (colon -> COLON .)
    EXPEQ           reduce using rule 85 (colon -> COLON .)
    GE              reduce using rule 85 (colon -> COLON .)
    GT              reduce using rule 85 (colon -> COLON .)
    LE              reduce using rule 85 (colon -> COLON .)
    LT              reduce using rule 85 (colon -> COLON .)
    MINUS           reduce using rule 85 (colon -> COLON .)
    MUL             reduce using rule 85 (colon -> COLON .)
    NE              reduce using rule 85 (colon -> COLON .)
    OR              reduce using rule 85 (colon -> COLON .)
    PLUS            reduce using rule 85 (colon -> COLON .)
    EQ              reduce using rule 85 (colon -> COLON .)
    MULEQ           reduce using rule 85 (colon -> COLON .)
    DIVEQ           reduce using rule 85 (colon -> COLON .)
    MINUSEQ         reduce using rule 85 (colon -> COLON .)
    PLUSEQ          reduce using rule 85 (colon -> COLON .)
    OREQ            reduce using rule 85 (colon -> COLON .)
    ANDEQ           reduce using rule 85 (colon -> COLON .)
    COMMA           reduce using rule 85 (colon -> COLON .)
    SEMI            reduce using rule 85 (colon -> COLON .)
    RPAREN          reduce using rule 85 (colon -> COLON .)
    CASE            reduce using rule 85 (colon -> COLON .)
    OTHERWISE       reduce using rule 85 (colon -> COLON .)
    END_STMT        reduce using rule 85 (colon -> COLON .)
    RBRACE          reduce using rule 85 (colon -> COLON .)
    RBRACKET        reduce using rule 85 (colon -> COLON .)
    error           reduce using rule 85 (colon -> COLON .)


state 62

    (116) matrix -> LBRACKET . RBRACKET
    (117) matrix -> LBRACKET . concat_list RBRACKET
    (118) matrix -> LBRACKET . concat_list SEMI RBRACKET
    (119) matrix -> LBRACKET . expr_list RBRACKET
    (120) matrix -> LBRACKET . expr_list SEMI RBRACKET
    (26) concat_list -> . expr_list SEMI expr_list
    (27) concat_list -> . concat_list SEMI expr_list
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 142
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    concat_list                    shift and go to state 143
    expr_list                      shift and go to state 144
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 63

    (47) expr1 -> MINUS . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 145
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 64

    (48) expr1 -> PLUS . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 146
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 65

    (50) expr1 -> HANDLE . ident
    (115) lambda_expr -> HANDLE . lambda_args expr
    (87) ident -> . IDENT
    (113) lambda_args -> . LPAREN RPAREN
    (114) lambda_args -> . LPAREN arg_list RPAREN

    IDENT           shift and go to state 45
    LPAREN          shift and go to state 149

    ident                          shift and go to state 147
    lambda_args                    shift and go to state 148

state 66

    (28) continue_stmt -> CONTINUE SEMI .

    END_STMT        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    END_FUNCTION    reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    COMMENT         reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    BREAK           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    PERSISTENT      reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    ERROR_STMT      reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    FOR             reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    IF              reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    SEMI            reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    COMMA           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    RETURN          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    SWITCH          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    TRY             reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    WHILE           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    UNWIND_PROTECT  reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    IDENT           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    NEG             reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    LPAREN          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    END_EXPR        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    NUMBER          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    STRING          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    COLON           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    LBRACKET        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    LBRACE          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    MINUS           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    PLUS            reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    HANDLE          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    $end            reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    CATCH           reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    ELSE            reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    END_UNWIND_PROTECT reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    CASE            reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)
    OTHERWISE       reduce using rule 28 (continue_stmt -> CONTINUE SEMI .)


state 67

    (103) func_stmt -> FUNCTION ident . lambda_args SEMI
    (126) ret -> ident .
    (113) lambda_args -> . LPAREN RPAREN
    (114) lambda_args -> . LPAREN arg_list RPAREN

    EQ              reduce using rule 126 (ret -> ident .)
    LPAREN          shift and go to state 149

    lambda_args                    shift and go to state 150

state 68

    (104) func_stmt -> FUNCTION ret . EQ ident lambda_args SEMI

    EQ              shift and go to state 151


state 69

    (127) ret -> LBRACKET . RBRACKET
    (128) ret -> LBRACKET . expr_list RBRACKET
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 152
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 153
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 70

    (24) command -> ident args . SEMI
    (12) args -> args . arg1
    (5) arg1 -> . STRING
    (6) arg1 -> . NUMBER
    (7) arg1 -> . IDENT
    (8) arg1 -> . GLOBAL

    SEMI            shift and go to state 154
    STRING          shift and go to state 72
    NUMBER          shift and go to state 73
    IDENT           shift and go to state 74
    GLOBAL          shift and go to state 75

    arg1                           shift and go to state 155

state 71

    (11) args -> arg1 .

    SEMI            reduce using rule 11 (args -> arg1 .)
    STRING          reduce using rule 11 (args -> arg1 .)
    NUMBER          reduce using rule 11 (args -> arg1 .)
    IDENT           reduce using rule 11 (args -> arg1 .)
    GLOBAL          reduce using rule 11 (args -> arg1 .)


state 72

    (5) arg1 -> STRING .

    SEMI            reduce using rule 5 (arg1 -> STRING .)
    STRING          reduce using rule 5 (arg1 -> STRING .)
    NUMBER          reduce using rule 5 (arg1 -> STRING .)
    IDENT           reduce using rule 5 (arg1 -> STRING .)
    GLOBAL          reduce using rule 5 (arg1 -> STRING .)


state 73

    (6) arg1 -> NUMBER .

    SEMI            reduce using rule 6 (arg1 -> NUMBER .)
    STRING          reduce using rule 6 (arg1 -> NUMBER .)
    NUMBER          reduce using rule 6 (arg1 -> NUMBER .)
    IDENT           reduce using rule 6 (arg1 -> NUMBER .)
    GLOBAL          reduce using rule 6 (arg1 -> NUMBER .)


state 74

    (7) arg1 -> IDENT .

    SEMI            reduce using rule 7 (arg1 -> IDENT .)
    STRING          reduce using rule 7 (arg1 -> IDENT .)
    NUMBER          reduce using rule 7 (arg1 -> IDENT .)
    IDENT           reduce using rule 7 (arg1 -> IDENT .)
    GLOBAL          reduce using rule 7 (arg1 -> IDENT .)


state 75

    (8) arg1 -> GLOBAL .

    SEMI            reduce using rule 8 (arg1 -> GLOBAL .)
    STRING          reduce using rule 8 (arg1 -> GLOBAL .)
    NUMBER          reduce using rule 8 (arg1 -> GLOBAL .)
    IDENT           reduce using rule 8 (arg1 -> GLOBAL .)
    GLOBAL          reduce using rule 8 (arg1 -> GLOBAL .)


state 76

    (13) break_stmt -> BREAK SEMI .

    END_STMT        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    END_FUNCTION    reduce using rule 13 (break_stmt -> BREAK SEMI .)
    CONTINUE        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    COMMENT         reduce using rule 13 (break_stmt -> BREAK SEMI .)
    FUNCTION        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    BREAK           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    GLOBAL          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    PERSISTENT      reduce using rule 13 (break_stmt -> BREAK SEMI .)
    ERROR_STMT      reduce using rule 13 (break_stmt -> BREAK SEMI .)
    FOR             reduce using rule 13 (break_stmt -> BREAK SEMI .)
    IF              reduce using rule 13 (break_stmt -> BREAK SEMI .)
    SEMI            reduce using rule 13 (break_stmt -> BREAK SEMI .)
    COMMA           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    RETURN          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    SWITCH          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    TRY             reduce using rule 13 (break_stmt -> BREAK SEMI .)
    WHILE           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    UNWIND_PROTECT  reduce using rule 13 (break_stmt -> BREAK SEMI .)
    IDENT           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    NEG             reduce using rule 13 (break_stmt -> BREAK SEMI .)
    LPAREN          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    END_EXPR        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    NUMBER          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    STRING          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    COLON           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    LBRACKET        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    LBRACE          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    MINUS           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    PLUS            reduce using rule 13 (break_stmt -> BREAK SEMI .)
    HANDLE          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 13 (break_stmt -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 13 (break_stmt -> BREAK SEMI .)
    $end            reduce using rule 13 (break_stmt -> BREAK SEMI .)
    CATCH           reduce using rule 13 (break_stmt -> BREAK SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 13 (break_stmt -> BREAK SEMI .)
    ELSE            reduce using rule 13 (break_stmt -> BREAK SEMI .)
    ELSEIF          reduce using rule 13 (break_stmt -> BREAK SEMI .)
    END_UNWIND_PROTECT reduce using rule 13 (break_stmt -> BREAK SEMI .)
    CASE            reduce using rule 13 (break_stmt -> BREAK SEMI .)
    OTHERWISE       reduce using rule 13 (break_stmt -> BREAK SEMI .)


state 77

    (94) expr_stmt -> expr_list SEMI .

    END_STMT        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    END_FUNCTION    reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    CONTINUE        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    COMMENT         reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    FUNCTION        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    BREAK           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    GLOBAL          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    PERSISTENT      reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    ERROR_STMT      reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    FOR             reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    IF              reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    SEMI            reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    COMMA           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    RETURN          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    SWITCH          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    TRY             reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    WHILE           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    UNWIND_PROTECT  reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    IDENT           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    NEG             reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    LPAREN          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    END_EXPR        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    NUMBER          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    STRING          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    COLON           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    LBRACKET        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    LBRACE          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    MINUS           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    PLUS            reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    HANDLE          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    PLUSPLUS        reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    MINUSMINUS      reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    $end            reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    CATCH           reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    ELSE            reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    ELSEIF          reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    END_UNWIND_PROTECT reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    CASE            reduce using rule 94 (expr_stmt -> expr_list SEMI .)
    OTHERWISE       reduce using rule 94 (expr_stmt -> expr_list SEMI .)


state 78

    (109) global_stmt -> GLOBAL global_list . SEMI
    (108) global_list -> global_list . ident
    (87) ident -> . IDENT

    SEMI            shift and go to state 156
    IDENT           shift and go to state 45

    ident                          shift and go to state 157

state 79

    (110) global_stmt -> GLOBAL ident . EQ expr SEMI
    (107) global_list -> ident .

    EQ              shift and go to state 158
    SEMI            reduce using rule 107 (global_list -> ident .)
    IDENT           reduce using rule 107 (global_list -> ident .)


state 80

    (99) foo_stmt -> expr OROR . expr SEMI
    (76) expr2 -> expr OROR . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 159
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 81

    (22) expr -> expr LBRACE . expr_list RBRACE
    (23) expr -> expr LBRACE . RBRACE
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 161
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 138
    expr_list                      shift and go to state 160
    exprs                          shift and go to state 44
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 82

    (45) expr -> expr PLUSPLUS .

    OROR            reduce using rule 45 (expr -> expr PLUSPLUS .)
    LBRACE          reduce using rule 45 (expr -> expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 45 (expr -> expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 45 (expr -> expr PLUSPLUS .)
    FIELD           reduce using rule 45 (expr -> expr PLUSPLUS .)
    LPAREN          reduce using rule 45 (expr -> expr PLUSPLUS .)
    TRANSPOSE       reduce using rule 45 (expr -> expr PLUSPLUS .)
    AND             reduce using rule 45 (expr -> expr PLUSPLUS .)
    ANDAND          reduce using rule 45 (expr -> expr PLUSPLUS .)
    BACKSLASH       reduce using rule 45 (expr -> expr PLUSPLUS .)
    COLON           reduce using rule 45 (expr -> expr PLUSPLUS .)
    DIV             reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOT             reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOTDIV          reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOTDIVEQ        reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOTEXP          reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOTMUL          reduce using rule 45 (expr -> expr PLUSPLUS .)
    DOTMULEQ        reduce using rule 45 (expr -> expr PLUSPLUS .)
    EQEQ            reduce using rule 45 (expr -> expr PLUSPLUS .)
    POW             reduce using rule 45 (expr -> expr PLUSPLUS .)
    EXP             reduce using rule 45 (expr -> expr PLUSPLUS .)
    EXPEQ           reduce using rule 45 (expr -> expr PLUSPLUS .)
    GE              reduce using rule 45 (expr -> expr PLUSPLUS .)
    GT              reduce using rule 45 (expr -> expr PLUSPLUS .)
    LE              reduce using rule 45 (expr -> expr PLUSPLUS .)
    LT              reduce using rule 45 (expr -> expr PLUSPLUS .)
    MINUS           reduce using rule 45 (expr -> expr PLUSPLUS .)
    MUL             reduce using rule 45 (expr -> expr PLUSPLUS .)
    NE              reduce using rule 45 (expr -> expr PLUSPLUS .)
    OR              reduce using rule 45 (expr -> expr PLUSPLUS .)
    PLUS            reduce using rule 45 (expr -> expr PLUSPLUS .)
    EQ              reduce using rule 45 (expr -> expr PLUSPLUS .)
    MULEQ           reduce using rule 45 (expr -> expr PLUSPLUS .)
    DIVEQ           reduce using rule 45 (expr -> expr PLUSPLUS .)
    MINUSEQ         reduce using rule 45 (expr -> expr PLUSPLUS .)
    PLUSEQ          reduce using rule 45 (expr -> expr PLUSPLUS .)
    OREQ            reduce using rule 45 (expr -> expr PLUSPLUS .)
    ANDEQ           reduce using rule 45 (expr -> expr PLUSPLUS .)
    COMMA           reduce using rule 45 (expr -> expr PLUSPLUS .)
    SEMI            reduce using rule 45 (expr -> expr PLUSPLUS .)
    RPAREN          reduce using rule 45 (expr -> expr PLUSPLUS .)
    CASE            reduce using rule 45 (expr -> expr PLUSPLUS .)
    OTHERWISE       reduce using rule 45 (expr -> expr PLUSPLUS .)
    END_STMT        reduce using rule 45 (expr -> expr PLUSPLUS .)
    RBRACE          reduce using rule 45 (expr -> expr PLUSPLUS .)
    RBRACKET        reduce using rule 45 (expr -> expr PLUSPLUS .)
    error           reduce using rule 45 (expr -> expr PLUSPLUS .)


state 83

    (46) expr -> expr MINUSMINUS .

    OROR            reduce using rule 46 (expr -> expr MINUSMINUS .)
    LBRACE          reduce using rule 46 (expr -> expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 46 (expr -> expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 46 (expr -> expr MINUSMINUS .)
    FIELD           reduce using rule 46 (expr -> expr MINUSMINUS .)
    LPAREN          reduce using rule 46 (expr -> expr MINUSMINUS .)
    TRANSPOSE       reduce using rule 46 (expr -> expr MINUSMINUS .)
    AND             reduce using rule 46 (expr -> expr MINUSMINUS .)
    ANDAND          reduce using rule 46 (expr -> expr MINUSMINUS .)
    BACKSLASH       reduce using rule 46 (expr -> expr MINUSMINUS .)
    COLON           reduce using rule 46 (expr -> expr MINUSMINUS .)
    DIV             reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOT             reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOTDIV          reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOTDIVEQ        reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOTEXP          reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOTMUL          reduce using rule 46 (expr -> expr MINUSMINUS .)
    DOTMULEQ        reduce using rule 46 (expr -> expr MINUSMINUS .)
    EQEQ            reduce using rule 46 (expr -> expr MINUSMINUS .)
    POW             reduce using rule 46 (expr -> expr MINUSMINUS .)
    EXP             reduce using rule 46 (expr -> expr MINUSMINUS .)
    EXPEQ           reduce using rule 46 (expr -> expr MINUSMINUS .)
    GE              reduce using rule 46 (expr -> expr MINUSMINUS .)
    GT              reduce using rule 46 (expr -> expr MINUSMINUS .)
    LE              reduce using rule 46 (expr -> expr MINUSMINUS .)
    LT              reduce using rule 46 (expr -> expr MINUSMINUS .)
    MINUS           reduce using rule 46 (expr -> expr MINUSMINUS .)
    MUL             reduce using rule 46 (expr -> expr MINUSMINUS .)
    NE              reduce using rule 46 (expr -> expr MINUSMINUS .)
    OR              reduce using rule 46 (expr -> expr MINUSMINUS .)
    PLUS            reduce using rule 46 (expr -> expr MINUSMINUS .)
    EQ              reduce using rule 46 (expr -> expr MINUSMINUS .)
    MULEQ           reduce using rule 46 (expr -> expr MINUSMINUS .)
    DIVEQ           reduce using rule 46 (expr -> expr MINUSMINUS .)
    MINUSEQ         reduce using rule 46 (expr -> expr MINUSMINUS .)
    PLUSEQ          reduce using rule 46 (expr -> expr MINUSMINUS .)
    OREQ            reduce using rule 46 (expr -> expr MINUSMINUS .)
    ANDEQ           reduce using rule 46 (expr -> expr MINUSMINUS .)
    COMMA           reduce using rule 46 (expr -> expr MINUSMINUS .)
    SEMI            reduce using rule 46 (expr -> expr MINUSMINUS .)
    RPAREN          reduce using rule 46 (expr -> expr MINUSMINUS .)
    CASE            reduce using rule 46 (expr -> expr MINUSMINUS .)
    OTHERWISE       reduce using rule 46 (expr -> expr MINUSMINUS .)
    END_STMT        reduce using rule 46 (expr -> expr MINUSMINUS .)
    RBRACE          reduce using rule 46 (expr -> expr MINUSMINUS .)
    RBRACKET        reduce using rule 46 (expr -> expr MINUSMINUS .)
    error           reduce using rule 46 (expr -> expr MINUSMINUS .)


state 84

    (98) expr -> expr FIELD .

    OROR            reduce using rule 98 (expr -> expr FIELD .)
    LBRACE          reduce using rule 98 (expr -> expr FIELD .)
    PLUSPLUS        reduce using rule 98 (expr -> expr FIELD .)
    MINUSMINUS      reduce using rule 98 (expr -> expr FIELD .)
    FIELD           reduce using rule 98 (expr -> expr FIELD .)
    LPAREN          reduce using rule 98 (expr -> expr FIELD .)
    TRANSPOSE       reduce using rule 98 (expr -> expr FIELD .)
    AND             reduce using rule 98 (expr -> expr FIELD .)
    ANDAND          reduce using rule 98 (expr -> expr FIELD .)
    BACKSLASH       reduce using rule 98 (expr -> expr FIELD .)
    COLON           reduce using rule 98 (expr -> expr FIELD .)
    DIV             reduce using rule 98 (expr -> expr FIELD .)
    DOT             reduce using rule 98 (expr -> expr FIELD .)
    DOTDIV          reduce using rule 98 (expr -> expr FIELD .)
    DOTDIVEQ        reduce using rule 98 (expr -> expr FIELD .)
    DOTEXP          reduce using rule 98 (expr -> expr FIELD .)
    DOTMUL          reduce using rule 98 (expr -> expr FIELD .)
    DOTMULEQ        reduce using rule 98 (expr -> expr FIELD .)
    EQEQ            reduce using rule 98 (expr -> expr FIELD .)
    POW             reduce using rule 98 (expr -> expr FIELD .)
    EXP             reduce using rule 98 (expr -> expr FIELD .)
    EXPEQ           reduce using rule 98 (expr -> expr FIELD .)
    GE              reduce using rule 98 (expr -> expr FIELD .)
    GT              reduce using rule 98 (expr -> expr FIELD .)
    LE              reduce using rule 98 (expr -> expr FIELD .)
    LT              reduce using rule 98 (expr -> expr FIELD .)
    MINUS           reduce using rule 98 (expr -> expr FIELD .)
    MUL             reduce using rule 98 (expr -> expr FIELD .)
    NE              reduce using rule 98 (expr -> expr FIELD .)
    OR              reduce using rule 98 (expr -> expr FIELD .)
    PLUS            reduce using rule 98 (expr -> expr FIELD .)
    EQ              reduce using rule 98 (expr -> expr FIELD .)
    MULEQ           reduce using rule 98 (expr -> expr FIELD .)
    DIVEQ           reduce using rule 98 (expr -> expr FIELD .)
    MINUSEQ         reduce using rule 98 (expr -> expr FIELD .)
    PLUSEQ          reduce using rule 98 (expr -> expr FIELD .)
    OREQ            reduce using rule 98 (expr -> expr FIELD .)
    ANDEQ           reduce using rule 98 (expr -> expr FIELD .)
    COMMA           reduce using rule 98 (expr -> expr FIELD .)
    SEMI            reduce using rule 98 (expr -> expr FIELD .)
    RPAREN          reduce using rule 98 (expr -> expr FIELD .)
    CASE            reduce using rule 98 (expr -> expr FIELD .)
    OTHERWISE       reduce using rule 98 (expr -> expr FIELD .)
    END_STMT        reduce using rule 98 (expr -> expr FIELD .)
    RBRACE          reduce using rule 98 (expr -> expr FIELD .)
    RBRACKET        reduce using rule 98 (expr -> expr FIELD .)
    error           reduce using rule 98 (expr -> expr FIELD .)


state 85

    (105) expr -> expr LPAREN . expr_list RPAREN
    (106) expr -> expr LPAREN . RPAREN
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RPAREN          shift and go to state 163
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 138
    expr_list                      shift and go to state 162
    exprs                          shift and go to state 44
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 86

    (158) expr -> expr TRANSPOSE .

    OROR            reduce using rule 158 (expr -> expr TRANSPOSE .)
    LBRACE          reduce using rule 158 (expr -> expr TRANSPOSE .)
    PLUSPLUS        reduce using rule 158 (expr -> expr TRANSPOSE .)
    MINUSMINUS      reduce using rule 158 (expr -> expr TRANSPOSE .)
    FIELD           reduce using rule 158 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 158 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 158 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 158 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 158 (expr -> expr TRANSPOSE .)
    BACKSLASH       reduce using rule 158 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 158 (expr -> expr TRANSPOSE .)
    DIV             reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOTDIV          reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOTDIVEQ        reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOTEXP          reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOTMUL          reduce using rule 158 (expr -> expr TRANSPOSE .)
    DOTMULEQ        reduce using rule 158 (expr -> expr TRANSPOSE .)
    EQEQ            reduce using rule 158 (expr -> expr TRANSPOSE .)
    POW             reduce using rule 158 (expr -> expr TRANSPOSE .)
    EXP             reduce using rule 158 (expr -> expr TRANSPOSE .)
    EXPEQ           reduce using rule 158 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 158 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 158 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 158 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 158 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 158 (expr -> expr TRANSPOSE .)
    MUL             reduce using rule 158 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 158 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 158 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 158 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 158 (expr -> expr TRANSPOSE .)
    MULEQ           reduce using rule 158 (expr -> expr TRANSPOSE .)
    DIVEQ           reduce using rule 158 (expr -> expr TRANSPOSE .)
    MINUSEQ         reduce using rule 158 (expr -> expr TRANSPOSE .)
    PLUSEQ          reduce using rule 158 (expr -> expr TRANSPOSE .)
    OREQ            reduce using rule 158 (expr -> expr TRANSPOSE .)
    ANDEQ           reduce using rule 158 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 158 (expr -> expr TRANSPOSE .)
    SEMI            reduce using rule 158 (expr -> expr TRANSPOSE .)
    RPAREN          reduce using rule 158 (expr -> expr TRANSPOSE .)
    CASE            reduce using rule 158 (expr -> expr TRANSPOSE .)
    OTHERWISE       reduce using rule 158 (expr -> expr TRANSPOSE .)
    END_STMT        reduce using rule 158 (expr -> expr TRANSPOSE .)
    RBRACE          reduce using rule 158 (expr -> expr TRANSPOSE .)
    RBRACKET        reduce using rule 158 (expr -> expr TRANSPOSE .)
    error           reduce using rule 158 (expr -> expr TRANSPOSE .)


state 87

    (53) expr2 -> expr AND . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 164
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 88

    (54) expr2 -> expr ANDAND . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 165
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 89

    (55) expr2 -> expr BACKSLASH . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 166
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 90

    (56) expr2 -> expr COLON . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 167
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 91

    (57) expr2 -> expr DIV . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 168
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 92

    (58) expr2 -> expr DOT . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 169
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 93

    (59) expr2 -> expr DOTDIV . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 170
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 94

    (60) expr2 -> expr DOTDIVEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 171
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 95

    (61) expr2 -> expr DOTEXP . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 172
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 96

    (62) expr2 -> expr DOTMUL . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 173
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 97

    (63) expr2 -> expr DOTMULEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 174
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 98

    (64) expr2 -> expr EQEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 175
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 99

    (65) expr2 -> expr POW . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 176
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 100

    (66) expr2 -> expr EXP . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 177
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 101

    (67) expr2 -> expr EXPEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 178
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 102

    (68) expr2 -> expr GE . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 179
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 103

    (69) expr2 -> expr GT . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 180
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 104

    (70) expr2 -> expr LE . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 181
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 105

    (71) expr2 -> expr LT . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 182
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 106

    (72) expr2 -> expr MINUS . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 183
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 107

    (73) expr2 -> expr MUL . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 184
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 108

    (74) expr2 -> expr NE . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 185
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 109

    (75) expr2 -> expr OR . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 186
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 110

    (77) expr2 -> expr PLUS . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 187
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 111

    (78) expr2 -> expr EQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 188
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 112

    (79) expr2 -> expr MULEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 189
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 113

    (80) expr2 -> expr DIVEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 190
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 114

    (81) expr2 -> expr MINUSEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 191
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 115

    (82) expr2 -> expr PLUSEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 192
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 116

    (83) expr2 -> expr OREQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 193
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 117

    (84) expr2 -> expr ANDEQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 194
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 118

    (124) persistent_stmt -> PERSISTENT global_list . SEMI
    (108) global_list -> global_list . ident
    (87) ident -> . IDENT

    SEMI            shift and go to state 195
    IDENT           shift and go to state 45

    ident                          shift and go to state 157

state 119

    (125) persistent_stmt -> PERSISTENT ident . EQ expr SEMI
    (107) global_list -> ident .

    EQ              shift and go to state 196
    SEMI            reduce using rule 107 (global_list -> ident .)
    IDENT           reduce using rule 107 (global_list -> ident .)


state 120

    (33) error_stmt -> ERROR_STMT SEMI .

    END_STMT        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    END_FUNCTION    reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    CONTINUE        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    COMMENT         reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    FUNCTION        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    BREAK           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    GLOBAL          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    PERSISTENT      reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    ERROR_STMT      reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    FOR             reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    IF              reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    SEMI            reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    COMMA           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    RETURN          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    SWITCH          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    TRY             reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    WHILE           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    UNWIND_PROTECT  reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    IDENT           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    NEG             reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    LPAREN          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    END_EXPR        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    NUMBER          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    STRING          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    COLON           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    LBRACKET        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    LBRACE          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    MINUS           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    PLUS            reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    HANDLE          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    PLUSPLUS        reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    MINUSMINUS      reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    $end            reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    CATCH           reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    ELSE            reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    ELSEIF          reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    END_UNWIND_PROTECT reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    CASE            reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)
    OTHERWISE       reduce using rule 33 (error_stmt -> ERROR_STMT SEMI .)


state 121

    (100) for_stmt -> FOR ident . EQ expr SEMI stmt_list END_STMT

    EQ              shift and go to state 197


state 122

    (101) for_stmt -> FOR LPAREN . ident EQ expr RPAREN SEMI stmt_list END_STMT
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    ident                          shift and go to state 198

state 123

    (102) for_stmt -> FOR matrix . EQ expr SEMI stmt_list END_STMT

    EQ              shift and go to state 199


state 124

    (123) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 200
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 125

    (34) expr -> ident .

    RPAREN          reduce using rule 34 (expr -> ident .)
    LBRACE          reduce using rule 34 (expr -> ident .)
    PLUSPLUS        reduce using rule 34 (expr -> ident .)
    MINUSMINUS      reduce using rule 34 (expr -> ident .)
    FIELD           reduce using rule 34 (expr -> ident .)
    LPAREN          reduce using rule 34 (expr -> ident .)
    TRANSPOSE       reduce using rule 34 (expr -> ident .)
    AND             reduce using rule 34 (expr -> ident .)
    ANDAND          reduce using rule 34 (expr -> ident .)
    BACKSLASH       reduce using rule 34 (expr -> ident .)
    COLON           reduce using rule 34 (expr -> ident .)
    DIV             reduce using rule 34 (expr -> ident .)
    DOT             reduce using rule 34 (expr -> ident .)
    DOTDIV          reduce using rule 34 (expr -> ident .)
    DOTDIVEQ        reduce using rule 34 (expr -> ident .)
    DOTEXP          reduce using rule 34 (expr -> ident .)
    DOTMUL          reduce using rule 34 (expr -> ident .)
    DOTMULEQ        reduce using rule 34 (expr -> ident .)
    EQEQ            reduce using rule 34 (expr -> ident .)
    POW             reduce using rule 34 (expr -> ident .)
    EXP             reduce using rule 34 (expr -> ident .)
    EXPEQ           reduce using rule 34 (expr -> ident .)
    GE              reduce using rule 34 (expr -> ident .)
    GT              reduce using rule 34 (expr -> ident .)
    LE              reduce using rule 34 (expr -> ident .)
    LT              reduce using rule 34 (expr -> ident .)
    MINUS           reduce using rule 34 (expr -> ident .)
    MUL             reduce using rule 34 (expr -> ident .)
    NE              reduce using rule 34 (expr -> ident .)
    OR              reduce using rule 34 (expr -> ident .)
    OROR            reduce using rule 34 (expr -> ident .)
    PLUS            reduce using rule 34 (expr -> ident .)
    EQ              reduce using rule 34 (expr -> ident .)
    MULEQ           reduce using rule 34 (expr -> ident .)
    DIVEQ           reduce using rule 34 (expr -> ident .)
    MINUSEQ         reduce using rule 34 (expr -> ident .)
    PLUSEQ          reduce using rule 34 (expr -> ident .)
    OREQ            reduce using rule 34 (expr -> ident .)
    ANDEQ           reduce using rule 34 (expr -> ident .)
    COMMA           reduce using rule 34 (expr -> ident .)
    SEMI            reduce using rule 34 (expr -> ident .)
    CASE            reduce using rule 34 (expr -> ident .)
    OTHERWISE       reduce using rule 34 (expr -> ident .)
    END_STMT        reduce using rule 34 (expr -> ident .)
    RBRACE          reduce using rule 34 (expr -> ident .)
    RBRACKET        reduce using rule 34 (expr -> ident .)
    error           reduce using rule 34 (expr -> ident .)


state 126

    (111) if_stmt -> IF expr . sep stmt_list_opt elseif_stmt END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr
    (133) sep -> . COMMA
    (134) sep -> . SEMI

    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117
    COMMA           shift and go to state 203
    SEMI            shift and go to state 204

    sep                            shift and go to state 202

state 127

    (112) if_stmt -> IF LPAREN . expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (123) expr -> LPAREN . expr RPAREN
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 205
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 128

    (129) return_stmt -> RETURN SEMI .

    END_STMT        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    END_FUNCTION    reduce using rule 129 (return_stmt -> RETURN SEMI .)
    CONTINUE        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    COMMENT         reduce using rule 129 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    BREAK           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    GLOBAL          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    PERSISTENT      reduce using rule 129 (return_stmt -> RETURN SEMI .)
    ERROR_STMT      reduce using rule 129 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 129 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 129 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 129 (return_stmt -> RETURN SEMI .)
    COMMA           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    TRY             reduce using rule 129 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    UNWIND_PROTECT  reduce using rule 129 (return_stmt -> RETURN SEMI .)
    IDENT           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    NEG             reduce using rule 129 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    END_EXPR        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    NUMBER          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    STRING          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    COLON           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    LBRACKET        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    LBRACE          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    MINUS           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    PLUS            reduce using rule 129 (return_stmt -> RETURN SEMI .)
    HANDLE          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 129 (return_stmt -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 129 (return_stmt -> RETURN SEMI .)
    $end            reduce using rule 129 (return_stmt -> RETURN SEMI .)
    CATCH           reduce using rule 129 (return_stmt -> RETURN SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 129 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 129 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 129 (return_stmt -> RETURN SEMI .)
    END_UNWIND_PROTECT reduce using rule 129 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 129 (return_stmt -> RETURN SEMI .)
    OTHERWISE       reduce using rule 129 (return_stmt -> RETURN SEMI .)


state 129

    (157) switch_stmt -> SWITCH expr . semi_opt case_list END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr
    (130) semi_opt -> .
    (131) semi_opt -> . semi_opt SEMI
    (132) semi_opt -> . semi_opt COMMA

    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117
    SEMI            reduce using rule 130 (semi_opt -> .)
    COMMA           reduce using rule 130 (semi_opt -> .)
    CASE            reduce using rule 130 (semi_opt -> .)
    OTHERWISE       reduce using rule 130 (semi_opt -> .)
    END_STMT        reduce using rule 130 (semi_opt -> .)

    semi_opt                       shift and go to state 206

state 130

    (159) try_catch -> TRY stmt_list . CATCH stmt_list END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CATCH           shift and go to state 207
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 131

    (153) stmt_list -> stmt .

    CATCH           reduce using rule 153 (stmt_list -> stmt .)
    CONTINUE        reduce using rule 153 (stmt_list -> stmt .)
    COMMENT         reduce using rule 153 (stmt_list -> stmt .)
    FUNCTION        reduce using rule 153 (stmt_list -> stmt .)
    BREAK           reduce using rule 153 (stmt_list -> stmt .)
    GLOBAL          reduce using rule 153 (stmt_list -> stmt .)
    PERSISTENT      reduce using rule 153 (stmt_list -> stmt .)
    ERROR_STMT      reduce using rule 153 (stmt_list -> stmt .)
    FOR             reduce using rule 153 (stmt_list -> stmt .)
    IF              reduce using rule 153 (stmt_list -> stmt .)
    SEMI            reduce using rule 153 (stmt_list -> stmt .)
    COMMA           reduce using rule 153 (stmt_list -> stmt .)
    RETURN          reduce using rule 153 (stmt_list -> stmt .)
    SWITCH          reduce using rule 153 (stmt_list -> stmt .)
    TRY             reduce using rule 153 (stmt_list -> stmt .)
    WHILE           reduce using rule 153 (stmt_list -> stmt .)
    UNWIND_PROTECT  reduce using rule 153 (stmt_list -> stmt .)
    IDENT           reduce using rule 153 (stmt_list -> stmt .)
    NEG             reduce using rule 153 (stmt_list -> stmt .)
    LPAREN          reduce using rule 153 (stmt_list -> stmt .)
    END_EXPR        reduce using rule 153 (stmt_list -> stmt .)
    NUMBER          reduce using rule 153 (stmt_list -> stmt .)
    STRING          reduce using rule 153 (stmt_list -> stmt .)
    COLON           reduce using rule 153 (stmt_list -> stmt .)
    LBRACKET        reduce using rule 153 (stmt_list -> stmt .)
    LBRACE          reduce using rule 153 (stmt_list -> stmt .)
    MINUS           reduce using rule 153 (stmt_list -> stmt .)
    PLUS            reduce using rule 153 (stmt_list -> stmt .)
    HANDLE          reduce using rule 153 (stmt_list -> stmt .)
    PLUSPLUS        reduce using rule 153 (stmt_list -> stmt .)
    MINUSMINUS      reduce using rule 153 (stmt_list -> stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 153 (stmt_list -> stmt .)
    ELSE            reduce using rule 153 (stmt_list -> stmt .)
    ELSEIF          reduce using rule 153 (stmt_list -> stmt .)
    END_STMT        reduce using rule 153 (stmt_list -> stmt .)
    END_UNWIND_PROTECT reduce using rule 153 (stmt_list -> stmt .)
    CASE            reduce using rule 153 (stmt_list -> stmt .)
    OTHERWISE       reduce using rule 153 (stmt_list -> stmt .)


state 132

    (161) while_stmt -> WHILE expr . SEMI stmt_list END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 209
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 133

    (160) unwind -> UNWIND_PROTECT stmt_list . UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    UNWIND_PROTECT_CLEANUP shift and go to state 210
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 134

    (92) expr_list -> exprs COMMA .
    (97) exprs -> exprs COMMA . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    SEMI            reduce using rule 92 (expr_list -> exprs COMMA .)
    RBRACE          reduce using rule 92 (expr_list -> exprs COMMA .)
    RBRACKET        reduce using rule 92 (expr_list -> exprs COMMA .)
    RPAREN          reduce using rule 92 (expr_list -> exprs COMMA .)
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 211
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 135

    (18) cellarray -> LBRACE RBRACE .

    OROR            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    LBRACE          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    FIELD           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    LPAREN          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    AND             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    ANDAND          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    BACKSLASH       reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    COLON           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DIV             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOT             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOTDIV          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOTDIVEQ        reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOTEXP          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOTMUL          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DOTMULEQ        reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    EQEQ            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    POW             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    EXP             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    EXPEQ           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    GE              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    GT              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    LE              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    LT              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    MINUS           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    MUL             reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    NE              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    OR              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    PLUS            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    EQ              reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    MULEQ           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    DIVEQ           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    MINUSEQ         reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    PLUSEQ          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    OREQ            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    ANDEQ           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    COMMA           reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    SEMI            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    RPAREN          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    CASE            reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    OTHERWISE       reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    END_STMT        reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    RBRACE          reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 18 (cellarray -> LBRACE RBRACE .)
    error           reduce using rule 18 (cellarray -> LBRACE RBRACE .)


state 136

    (19) cellarray -> LBRACE expr_list . RBRACE
    (26) concat_list -> expr_list . SEMI expr_list

    RBRACE          shift and go to state 212
    SEMI            shift and go to state 213


state 137

    (20) cellarray -> LBRACE concat_list . RBRACE
    (21) cellarray -> LBRACE concat_list . SEMI RBRACE
    (27) concat_list -> concat_list . SEMI expr_list

    RBRACE          shift and go to state 214
    SEMI            shift and go to state 215


state 138

    (96) exprs -> expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 96 (exprs -> expr .)
    RBRACE          reduce using rule 96 (exprs -> expr .)
    SEMI            reduce using rule 96 (exprs -> expr .)
    RBRACKET        reduce using rule 96 (exprs -> expr .)
    RPAREN          reduce using rule 96 (exprs -> expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 139

    (49) expr1 -> NEG expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 49 (expr1 -> NEG expr .)
    AND             reduce using rule 49 (expr1 -> NEG expr .)
    ANDAND          reduce using rule 49 (expr1 -> NEG expr .)
    BACKSLASH       reduce using rule 49 (expr1 -> NEG expr .)
    COLON           reduce using rule 49 (expr1 -> NEG expr .)
    DIV             reduce using rule 49 (expr1 -> NEG expr .)
    DOTDIV          reduce using rule 49 (expr1 -> NEG expr .)
    DOTDIVEQ        reduce using rule 49 (expr1 -> NEG expr .)
    DOTMUL          reduce using rule 49 (expr1 -> NEG expr .)
    DOTMULEQ        reduce using rule 49 (expr1 -> NEG expr .)
    EQEQ            reduce using rule 49 (expr1 -> NEG expr .)
    EXPEQ           reduce using rule 49 (expr1 -> NEG expr .)
    GE              reduce using rule 49 (expr1 -> NEG expr .)
    GT              reduce using rule 49 (expr1 -> NEG expr .)
    LE              reduce using rule 49 (expr1 -> NEG expr .)
    LT              reduce using rule 49 (expr1 -> NEG expr .)
    MINUS           reduce using rule 49 (expr1 -> NEG expr .)
    MUL             reduce using rule 49 (expr1 -> NEG expr .)
    NE              reduce using rule 49 (expr1 -> NEG expr .)
    OR              reduce using rule 49 (expr1 -> NEG expr .)
    PLUS            reduce using rule 49 (expr1 -> NEG expr .)
    EQ              reduce using rule 49 (expr1 -> NEG expr .)
    MULEQ           reduce using rule 49 (expr1 -> NEG expr .)
    DIVEQ           reduce using rule 49 (expr1 -> NEG expr .)
    MINUSEQ         reduce using rule 49 (expr1 -> NEG expr .)
    PLUSEQ          reduce using rule 49 (expr1 -> NEG expr .)
    OREQ            reduce using rule 49 (expr1 -> NEG expr .)
    ANDEQ           reduce using rule 49 (expr1 -> NEG expr .)
    COMMA           reduce using rule 49 (expr1 -> NEG expr .)
    SEMI            reduce using rule 49 (expr1 -> NEG expr .)
    RPAREN          reduce using rule 49 (expr1 -> NEG expr .)
    CASE            reduce using rule 49 (expr1 -> NEG expr .)
    OTHERWISE       reduce using rule 49 (expr1 -> NEG expr .)
    END_STMT        reduce using rule 49 (expr1 -> NEG expr .)
    RBRACE          reduce using rule 49 (expr1 -> NEG expr .)
    RBRACKET        reduce using rule 49 (expr1 -> NEG expr .)
    error           reduce using rule 49 (expr1 -> NEG expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! PLUSPLUS        [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! MINUSMINUS      [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! FIELD           [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! LPAREN          [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! TRANSPOSE       [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! DOT             [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! DOTEXP          [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! POW             [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! EXP             [ reduce using rule 49 (expr1 -> NEG expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 140

    (51) expr1 -> PLUSPLUS ident .

    OROR            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    LBRACE          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    PLUSPLUS        reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    MINUSMINUS      reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    FIELD           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    LPAREN          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    TRANSPOSE       reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    AND             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    ANDAND          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    BACKSLASH       reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    COLON           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DIV             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOT             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOTDIV          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOTDIVEQ        reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOTEXP          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOTMUL          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DOTMULEQ        reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    EQEQ            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    POW             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    EXP             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    EXPEQ           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    GE              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    GT              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    LE              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    LT              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    MINUS           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    MUL             reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    NE              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    OR              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    PLUS            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    EQ              reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    MULEQ           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    DIVEQ           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    MINUSEQ         reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    PLUSEQ          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    OREQ            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    ANDEQ           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    COMMA           reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    SEMI            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    RPAREN          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    CASE            reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    OTHERWISE       reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    END_STMT        reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    RBRACE          reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    RBRACKET        reduce using rule 51 (expr1 -> PLUSPLUS ident .)
    error           reduce using rule 51 (expr1 -> PLUSPLUS ident .)


state 141

    (52) expr1 -> MINUSMINUS ident .

    OROR            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    LBRACE          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    PLUSPLUS        reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    MINUSMINUS      reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    FIELD           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    LPAREN          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    TRANSPOSE       reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    AND             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    ANDAND          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    BACKSLASH       reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    COLON           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DIV             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOT             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOTDIV          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOTDIVEQ        reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOTEXP          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOTMUL          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DOTMULEQ        reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    EQEQ            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    POW             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    EXP             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    EXPEQ           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    GE              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    GT              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    LE              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    LT              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    MINUS           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    MUL             reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    NE              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    OR              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    PLUS            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    EQ              reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    MULEQ           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    DIVEQ           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    MINUSEQ         reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    PLUSEQ          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    OREQ            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    ANDEQ           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    COMMA           reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    SEMI            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    RPAREN          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    CASE            reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    OTHERWISE       reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    END_STMT        reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    RBRACE          reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    RBRACKET        reduce using rule 52 (expr1 -> MINUSMINUS ident .)
    error           reduce using rule 52 (expr1 -> MINUSMINUS ident .)


state 142

    (116) matrix -> LBRACKET RBRACKET .

    OROR            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    PLUSPLUS        reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    MINUSMINUS      reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    FIELD           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    TRANSPOSE       reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    AND             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    ANDAND          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    BACKSLASH       reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    COLON           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DIV             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOT             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOTDIV          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOTDIVEQ        reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOTEXP          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOTMUL          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DOTMULEQ        reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    EQEQ            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    POW             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    EXP             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    EXPEQ           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    GE              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    GT              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    LE              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    LT              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    MUL             reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    NE              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    OR              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    EQ              reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    MULEQ           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    DIVEQ           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    MINUSEQ         reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    PLUSEQ          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    OREQ            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    ANDEQ           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    CASE            reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    END_STMT        reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 116 (matrix -> LBRACKET RBRACKET .)
    error           reduce using rule 116 (matrix -> LBRACKET RBRACKET .)


state 143

    (117) matrix -> LBRACKET concat_list . RBRACKET
    (118) matrix -> LBRACKET concat_list . SEMI RBRACKET
    (27) concat_list -> concat_list . SEMI expr_list

    RBRACKET        shift and go to state 216
    SEMI            shift and go to state 217


state 144

    (119) matrix -> LBRACKET expr_list . RBRACKET
    (120) matrix -> LBRACKET expr_list . SEMI RBRACKET
    (26) concat_list -> expr_list . SEMI expr_list

    RBRACKET        shift and go to state 218
    SEMI            shift and go to state 219


state 145

    (47) expr1 -> MINUS expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 47 (expr1 -> MINUS expr .)
    AND             reduce using rule 47 (expr1 -> MINUS expr .)
    ANDAND          reduce using rule 47 (expr1 -> MINUS expr .)
    BACKSLASH       reduce using rule 47 (expr1 -> MINUS expr .)
    COLON           reduce using rule 47 (expr1 -> MINUS expr .)
    DIV             reduce using rule 47 (expr1 -> MINUS expr .)
    DOTDIV          reduce using rule 47 (expr1 -> MINUS expr .)
    DOTDIVEQ        reduce using rule 47 (expr1 -> MINUS expr .)
    DOTMUL          reduce using rule 47 (expr1 -> MINUS expr .)
    DOTMULEQ        reduce using rule 47 (expr1 -> MINUS expr .)
    EQEQ            reduce using rule 47 (expr1 -> MINUS expr .)
    EXPEQ           reduce using rule 47 (expr1 -> MINUS expr .)
    GE              reduce using rule 47 (expr1 -> MINUS expr .)
    GT              reduce using rule 47 (expr1 -> MINUS expr .)
    LE              reduce using rule 47 (expr1 -> MINUS expr .)
    LT              reduce using rule 47 (expr1 -> MINUS expr .)
    MINUS           reduce using rule 47 (expr1 -> MINUS expr .)
    MUL             reduce using rule 47 (expr1 -> MINUS expr .)
    NE              reduce using rule 47 (expr1 -> MINUS expr .)
    OR              reduce using rule 47 (expr1 -> MINUS expr .)
    PLUS            reduce using rule 47 (expr1 -> MINUS expr .)
    EQ              reduce using rule 47 (expr1 -> MINUS expr .)
    MULEQ           reduce using rule 47 (expr1 -> MINUS expr .)
    DIVEQ           reduce using rule 47 (expr1 -> MINUS expr .)
    MINUSEQ         reduce using rule 47 (expr1 -> MINUS expr .)
    PLUSEQ          reduce using rule 47 (expr1 -> MINUS expr .)
    OREQ            reduce using rule 47 (expr1 -> MINUS expr .)
    ANDEQ           reduce using rule 47 (expr1 -> MINUS expr .)
    COMMA           reduce using rule 47 (expr1 -> MINUS expr .)
    SEMI            reduce using rule 47 (expr1 -> MINUS expr .)
    RPAREN          reduce using rule 47 (expr1 -> MINUS expr .)
    CASE            reduce using rule 47 (expr1 -> MINUS expr .)
    OTHERWISE       reduce using rule 47 (expr1 -> MINUS expr .)
    END_STMT        reduce using rule 47 (expr1 -> MINUS expr .)
    RBRACE          reduce using rule 47 (expr1 -> MINUS expr .)
    RBRACKET        reduce using rule 47 (expr1 -> MINUS expr .)
    error           reduce using rule 47 (expr1 -> MINUS expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! PLUSPLUS        [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! MINUSMINUS      [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! FIELD           [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! DOT             [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! POW             [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! EXP             [ reduce using rule 47 (expr1 -> MINUS expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 146

    (48) expr1 -> PLUS expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 48 (expr1 -> PLUS expr .)
    AND             reduce using rule 48 (expr1 -> PLUS expr .)
    ANDAND          reduce using rule 48 (expr1 -> PLUS expr .)
    BACKSLASH       reduce using rule 48 (expr1 -> PLUS expr .)
    COLON           reduce using rule 48 (expr1 -> PLUS expr .)
    DIV             reduce using rule 48 (expr1 -> PLUS expr .)
    DOTDIV          reduce using rule 48 (expr1 -> PLUS expr .)
    DOTDIVEQ        reduce using rule 48 (expr1 -> PLUS expr .)
    DOTMUL          reduce using rule 48 (expr1 -> PLUS expr .)
    DOTMULEQ        reduce using rule 48 (expr1 -> PLUS expr .)
    EQEQ            reduce using rule 48 (expr1 -> PLUS expr .)
    EXPEQ           reduce using rule 48 (expr1 -> PLUS expr .)
    GE              reduce using rule 48 (expr1 -> PLUS expr .)
    GT              reduce using rule 48 (expr1 -> PLUS expr .)
    LE              reduce using rule 48 (expr1 -> PLUS expr .)
    LT              reduce using rule 48 (expr1 -> PLUS expr .)
    MINUS           reduce using rule 48 (expr1 -> PLUS expr .)
    MUL             reduce using rule 48 (expr1 -> PLUS expr .)
    NE              reduce using rule 48 (expr1 -> PLUS expr .)
    OR              reduce using rule 48 (expr1 -> PLUS expr .)
    PLUS            reduce using rule 48 (expr1 -> PLUS expr .)
    EQ              reduce using rule 48 (expr1 -> PLUS expr .)
    MULEQ           reduce using rule 48 (expr1 -> PLUS expr .)
    DIVEQ           reduce using rule 48 (expr1 -> PLUS expr .)
    MINUSEQ         reduce using rule 48 (expr1 -> PLUS expr .)
    PLUSEQ          reduce using rule 48 (expr1 -> PLUS expr .)
    OREQ            reduce using rule 48 (expr1 -> PLUS expr .)
    ANDEQ           reduce using rule 48 (expr1 -> PLUS expr .)
    COMMA           reduce using rule 48 (expr1 -> PLUS expr .)
    SEMI            reduce using rule 48 (expr1 -> PLUS expr .)
    RPAREN          reduce using rule 48 (expr1 -> PLUS expr .)
    CASE            reduce using rule 48 (expr1 -> PLUS expr .)
    OTHERWISE       reduce using rule 48 (expr1 -> PLUS expr .)
    END_STMT        reduce using rule 48 (expr1 -> PLUS expr .)
    RBRACE          reduce using rule 48 (expr1 -> PLUS expr .)
    RBRACKET        reduce using rule 48 (expr1 -> PLUS expr .)
    error           reduce using rule 48 (expr1 -> PLUS expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! PLUSPLUS        [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! MINUSMINUS      [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! FIELD           [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! LPAREN          [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! DOT             [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! POW             [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! EXP             [ reduce using rule 48 (expr1 -> PLUS expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 147

    (50) expr1 -> HANDLE ident .

    OROR            reduce using rule 50 (expr1 -> HANDLE ident .)
    LBRACE          reduce using rule 50 (expr1 -> HANDLE ident .)
    PLUSPLUS        reduce using rule 50 (expr1 -> HANDLE ident .)
    MINUSMINUS      reduce using rule 50 (expr1 -> HANDLE ident .)
    FIELD           reduce using rule 50 (expr1 -> HANDLE ident .)
    LPAREN          reduce using rule 50 (expr1 -> HANDLE ident .)
    TRANSPOSE       reduce using rule 50 (expr1 -> HANDLE ident .)
    AND             reduce using rule 50 (expr1 -> HANDLE ident .)
    ANDAND          reduce using rule 50 (expr1 -> HANDLE ident .)
    BACKSLASH       reduce using rule 50 (expr1 -> HANDLE ident .)
    COLON           reduce using rule 50 (expr1 -> HANDLE ident .)
    DIV             reduce using rule 50 (expr1 -> HANDLE ident .)
    DOT             reduce using rule 50 (expr1 -> HANDLE ident .)
    DOTDIV          reduce using rule 50 (expr1 -> HANDLE ident .)
    DOTDIVEQ        reduce using rule 50 (expr1 -> HANDLE ident .)
    DOTEXP          reduce using rule 50 (expr1 -> HANDLE ident .)
    DOTMUL          reduce using rule 50 (expr1 -> HANDLE ident .)
    DOTMULEQ        reduce using rule 50 (expr1 -> HANDLE ident .)
    EQEQ            reduce using rule 50 (expr1 -> HANDLE ident .)
    POW             reduce using rule 50 (expr1 -> HANDLE ident .)
    EXP             reduce using rule 50 (expr1 -> HANDLE ident .)
    EXPEQ           reduce using rule 50 (expr1 -> HANDLE ident .)
    GE              reduce using rule 50 (expr1 -> HANDLE ident .)
    GT              reduce using rule 50 (expr1 -> HANDLE ident .)
    LE              reduce using rule 50 (expr1 -> HANDLE ident .)
    LT              reduce using rule 50 (expr1 -> HANDLE ident .)
    MINUS           reduce using rule 50 (expr1 -> HANDLE ident .)
    MUL             reduce using rule 50 (expr1 -> HANDLE ident .)
    NE              reduce using rule 50 (expr1 -> HANDLE ident .)
    OR              reduce using rule 50 (expr1 -> HANDLE ident .)
    PLUS            reduce using rule 50 (expr1 -> HANDLE ident .)
    EQ              reduce using rule 50 (expr1 -> HANDLE ident .)
    MULEQ           reduce using rule 50 (expr1 -> HANDLE ident .)
    DIVEQ           reduce using rule 50 (expr1 -> HANDLE ident .)
    MINUSEQ         reduce using rule 50 (expr1 -> HANDLE ident .)
    PLUSEQ          reduce using rule 50 (expr1 -> HANDLE ident .)
    OREQ            reduce using rule 50 (expr1 -> HANDLE ident .)
    ANDEQ           reduce using rule 50 (expr1 -> HANDLE ident .)
    COMMA           reduce using rule 50 (expr1 -> HANDLE ident .)
    SEMI            reduce using rule 50 (expr1 -> HANDLE ident .)
    RPAREN          reduce using rule 50 (expr1 -> HANDLE ident .)
    CASE            reduce using rule 50 (expr1 -> HANDLE ident .)
    OTHERWISE       reduce using rule 50 (expr1 -> HANDLE ident .)
    END_STMT        reduce using rule 50 (expr1 -> HANDLE ident .)
    RBRACE          reduce using rule 50 (expr1 -> HANDLE ident .)
    RBRACKET        reduce using rule 50 (expr1 -> HANDLE ident .)
    error           reduce using rule 50 (expr1 -> HANDLE ident .)


state 148

    (115) lambda_expr -> HANDLE lambda_args . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 220
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 149

    (113) lambda_args -> LPAREN . RPAREN
    (114) lambda_args -> LPAREN . arg_list RPAREN
    (9) arg_list -> . ident_init_opt
    (10) arg_list -> . arg_list COMMA ident_init_opt
    (88) ident_init_opt -> . NEG
    (89) ident_init_opt -> . ident
    (90) ident_init_opt -> . ident EQ expr
    (87) ident -> . IDENT

    RPAREN          shift and go to state 221
    NEG             shift and go to state 224
    IDENT           shift and go to state 45

    arg_list                       shift and go to state 222
    ident_init_opt                 shift and go to state 223
    ident                          shift and go to state 225

state 150

    (103) func_stmt -> FUNCTION ident lambda_args . SEMI

    SEMI            shift and go to state 226


state 151

    (104) func_stmt -> FUNCTION ret EQ . ident lambda_args SEMI
    (87) ident -> . IDENT

    IDENT           shift and go to state 45

    ident                          shift and go to state 227

state 152

    (127) ret -> LBRACKET RBRACKET .

    EQ              reduce using rule 127 (ret -> LBRACKET RBRACKET .)


state 153

    (128) ret -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 228


state 154

    (24) command -> ident args SEMI .

    END_STMT        reduce using rule 24 (command -> ident args SEMI .)
    END_FUNCTION    reduce using rule 24 (command -> ident args SEMI .)
    CONTINUE        reduce using rule 24 (command -> ident args SEMI .)
    COMMENT         reduce using rule 24 (command -> ident args SEMI .)
    FUNCTION        reduce using rule 24 (command -> ident args SEMI .)
    BREAK           reduce using rule 24 (command -> ident args SEMI .)
    GLOBAL          reduce using rule 24 (command -> ident args SEMI .)
    PERSISTENT      reduce using rule 24 (command -> ident args SEMI .)
    ERROR_STMT      reduce using rule 24 (command -> ident args SEMI .)
    FOR             reduce using rule 24 (command -> ident args SEMI .)
    IF              reduce using rule 24 (command -> ident args SEMI .)
    SEMI            reduce using rule 24 (command -> ident args SEMI .)
    COMMA           reduce using rule 24 (command -> ident args SEMI .)
    RETURN          reduce using rule 24 (command -> ident args SEMI .)
    SWITCH          reduce using rule 24 (command -> ident args SEMI .)
    TRY             reduce using rule 24 (command -> ident args SEMI .)
    WHILE           reduce using rule 24 (command -> ident args SEMI .)
    UNWIND_PROTECT  reduce using rule 24 (command -> ident args SEMI .)
    IDENT           reduce using rule 24 (command -> ident args SEMI .)
    NEG             reduce using rule 24 (command -> ident args SEMI .)
    LPAREN          reduce using rule 24 (command -> ident args SEMI .)
    END_EXPR        reduce using rule 24 (command -> ident args SEMI .)
    NUMBER          reduce using rule 24 (command -> ident args SEMI .)
    STRING          reduce using rule 24 (command -> ident args SEMI .)
    COLON           reduce using rule 24 (command -> ident args SEMI .)
    LBRACKET        reduce using rule 24 (command -> ident args SEMI .)
    LBRACE          reduce using rule 24 (command -> ident args SEMI .)
    MINUS           reduce using rule 24 (command -> ident args SEMI .)
    PLUS            reduce using rule 24 (command -> ident args SEMI .)
    HANDLE          reduce using rule 24 (command -> ident args SEMI .)
    PLUSPLUS        reduce using rule 24 (command -> ident args SEMI .)
    MINUSMINUS      reduce using rule 24 (command -> ident args SEMI .)
    $end            reduce using rule 24 (command -> ident args SEMI .)
    CATCH           reduce using rule 24 (command -> ident args SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 24 (command -> ident args SEMI .)
    ELSE            reduce using rule 24 (command -> ident args SEMI .)
    ELSEIF          reduce using rule 24 (command -> ident args SEMI .)
    END_UNWIND_PROTECT reduce using rule 24 (command -> ident args SEMI .)
    CASE            reduce using rule 24 (command -> ident args SEMI .)
    OTHERWISE       reduce using rule 24 (command -> ident args SEMI .)


state 155

    (12) args -> args arg1 .

    SEMI            reduce using rule 12 (args -> args arg1 .)
    STRING          reduce using rule 12 (args -> args arg1 .)
    NUMBER          reduce using rule 12 (args -> args arg1 .)
    IDENT           reduce using rule 12 (args -> args arg1 .)
    GLOBAL          reduce using rule 12 (args -> args arg1 .)


state 156

    (109) global_stmt -> GLOBAL global_list SEMI .

    END_STMT        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    END_FUNCTION    reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    CONTINUE        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    COMMENT         reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    FUNCTION        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    BREAK           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    GLOBAL          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    PERSISTENT      reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    ERROR_STMT      reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    FOR             reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    IF              reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    SEMI            reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    COMMA           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    RETURN          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    SWITCH          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    TRY             reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    WHILE           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    UNWIND_PROTECT  reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    IDENT           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    NEG             reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    LPAREN          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    END_EXPR        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    NUMBER          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    STRING          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    COLON           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACKET        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACE          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    MINUS           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    PLUS            reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    HANDLE          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    PLUSPLUS        reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    MINUSMINUS      reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    $end            reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    CATCH           reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    ELSE            reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    ELSEIF          reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    END_UNWIND_PROTECT reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    CASE            reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)
    OTHERWISE       reduce using rule 109 (global_stmt -> GLOBAL global_list SEMI .)


state 157

    (108) global_list -> global_list ident .

    SEMI            reduce using rule 108 (global_list -> global_list ident .)
    IDENT           reduce using rule 108 (global_list -> global_list ident .)


state 158

    (110) global_stmt -> GLOBAL ident EQ . expr SEMI
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 125
    expr                           shift and go to state 229
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 159

    (99) foo_stmt -> expr OROR expr . SEMI
    (76) expr2 -> expr OROR expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 76 (expr2 -> expr OROR expr .)
    ANDAND          reduce using rule 76 (expr2 -> expr OROR expr .)
    COLON           reduce using rule 76 (expr2 -> expr OROR expr .)
    DOTDIVEQ        reduce using rule 76 (expr2 -> expr OROR expr .)
    DOTMULEQ        reduce using rule 76 (expr2 -> expr OROR expr .)
    EXPEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    EQ              reduce using rule 76 (expr2 -> expr OROR expr .)
    MULEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    DIVEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    MINUSEQ         reduce using rule 76 (expr2 -> expr OROR expr .)
    PLUSEQ          reduce using rule 76 (expr2 -> expr OROR expr .)
    OREQ            reduce using rule 76 (expr2 -> expr OROR expr .)
    ANDEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    COMMA           reduce using rule 76 (expr2 -> expr OROR expr .)
    SEMI            reduce using rule 76 (expr2 -> expr OROR expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! SEMI            [ shift and go to state 230 ]
  ! LBRACE          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! PLUSPLUS        [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MINUSMINUS      [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! FIELD           [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LPAREN          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! TRANSPOSE       [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! AND             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! BACKSLASH       [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DIV             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOT             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTDIV          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTEXP          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTMUL          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! EQEQ            [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! POW             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! EXP             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! GE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! GT              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LT              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MUL             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! NE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! OR              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 160

    (22) expr -> expr LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 231


state 161

    (23) expr -> expr LBRACE RBRACE .

    OROR            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    LBRACE          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    PLUSPLUS        reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    MINUSMINUS      reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    FIELD           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    LPAREN          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    AND             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    ANDAND          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    BACKSLASH       reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    COLON           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DIV             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOT             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOTDIV          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOTDIVEQ        reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOTEXP          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOTMUL          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DOTMULEQ        reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    EQEQ            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    POW             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    EXP             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    EXPEQ           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    GE              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    GT              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    LE              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    LT              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    MINUS           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    MUL             reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    NE              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    OR              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    PLUS            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    EQ              reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    MULEQ           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    DIVEQ           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    MINUSEQ         reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    PLUSEQ          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    OREQ            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    ANDEQ           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    COMMA           reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    SEMI            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    RPAREN          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    CASE            reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    OTHERWISE       reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    END_STMT        reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    RBRACE          reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    RBRACKET        reduce using rule 23 (expr -> expr LBRACE RBRACE .)
    error           reduce using rule 23 (expr -> expr LBRACE RBRACE .)


state 162

    (105) expr -> expr LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 232


state 163

    (106) expr -> expr LPAREN RPAREN .

    OROR            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    LBRACE          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    FIELD           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    LPAREN          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    TRANSPOSE       reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    AND             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    ANDAND          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    BACKSLASH       reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    COLON           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DIV             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOT             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOTDIV          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOTDIVEQ        reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOTEXP          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOTMUL          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DOTMULEQ        reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    EQEQ            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    POW             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    EXP             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    EXPEQ           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    GE              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    GT              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    LE              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    LT              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    MINUS           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    MUL             reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    NE              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    OR              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    PLUS            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    EQ              reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    MULEQ           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    DIVEQ           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    MINUSEQ         reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    PLUSEQ          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    OREQ            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    ANDEQ           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    COMMA           reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    SEMI            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    RPAREN          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    CASE            reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    OTHERWISE       reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    END_STMT        reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    RBRACE          reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    RBRACKET        reduce using rule 106 (expr -> expr LPAREN RPAREN .)
    error           reduce using rule 106 (expr -> expr LPAREN RPAREN .)


state 164

    (53) expr2 -> expr AND expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 53 (expr2 -> expr AND expr .)
    AND             reduce using rule 53 (expr2 -> expr AND expr .)
    ANDAND          reduce using rule 53 (expr2 -> expr AND expr .)
    COLON           reduce using rule 53 (expr2 -> expr AND expr .)
    DOTDIVEQ        reduce using rule 53 (expr2 -> expr AND expr .)
    DOTMULEQ        reduce using rule 53 (expr2 -> expr AND expr .)
    EQEQ            reduce using rule 53 (expr2 -> expr AND expr .)
    EXPEQ           reduce using rule 53 (expr2 -> expr AND expr .)
    GE              reduce using rule 53 (expr2 -> expr AND expr .)
    GT              reduce using rule 53 (expr2 -> expr AND expr .)
    LE              reduce using rule 53 (expr2 -> expr AND expr .)
    LT              reduce using rule 53 (expr2 -> expr AND expr .)
    NE              reduce using rule 53 (expr2 -> expr AND expr .)
    OR              reduce using rule 53 (expr2 -> expr AND expr .)
    EQ              reduce using rule 53 (expr2 -> expr AND expr .)
    MULEQ           reduce using rule 53 (expr2 -> expr AND expr .)
    DIVEQ           reduce using rule 53 (expr2 -> expr AND expr .)
    MINUSEQ         reduce using rule 53 (expr2 -> expr AND expr .)
    PLUSEQ          reduce using rule 53 (expr2 -> expr AND expr .)
    OREQ            reduce using rule 53 (expr2 -> expr AND expr .)
    ANDEQ           reduce using rule 53 (expr2 -> expr AND expr .)
    COMMA           reduce using rule 53 (expr2 -> expr AND expr .)
    SEMI            reduce using rule 53 (expr2 -> expr AND expr .)
    RPAREN          reduce using rule 53 (expr2 -> expr AND expr .)
    CASE            reduce using rule 53 (expr2 -> expr AND expr .)
    OTHERWISE       reduce using rule 53 (expr2 -> expr AND expr .)
    END_STMT        reduce using rule 53 (expr2 -> expr AND expr .)
    RBRACE          reduce using rule 53 (expr2 -> expr AND expr .)
    RBRACKET        reduce using rule 53 (expr2 -> expr AND expr .)
    error           reduce using rule 53 (expr2 -> expr AND expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! PLUSPLUS        [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! MINUSMINUS      [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! FIELD           [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! LPAREN          [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! TRANSPOSE       [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! BACKSLASH       [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! DIV             [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! DOT             [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! DOTDIV          [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! DOTEXP          [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! DOTMUL          [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! POW             [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! EXP             [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! MUL             [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 53 (expr2 -> expr AND expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 165

    (54) expr2 -> expr ANDAND expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 54 (expr2 -> expr ANDAND expr .)
    ANDAND          reduce using rule 54 (expr2 -> expr ANDAND expr .)
    COLON           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    DOTDIVEQ        reduce using rule 54 (expr2 -> expr ANDAND expr .)
    DOTMULEQ        reduce using rule 54 (expr2 -> expr ANDAND expr .)
    EXPEQ           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    EQ              reduce using rule 54 (expr2 -> expr ANDAND expr .)
    MULEQ           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    DIVEQ           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    MINUSEQ         reduce using rule 54 (expr2 -> expr ANDAND expr .)
    PLUSEQ          reduce using rule 54 (expr2 -> expr ANDAND expr .)
    OREQ            reduce using rule 54 (expr2 -> expr ANDAND expr .)
    ANDEQ           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    COMMA           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    SEMI            reduce using rule 54 (expr2 -> expr ANDAND expr .)
    RPAREN          reduce using rule 54 (expr2 -> expr ANDAND expr .)
    CASE            reduce using rule 54 (expr2 -> expr ANDAND expr .)
    OTHERWISE       reduce using rule 54 (expr2 -> expr ANDAND expr .)
    END_STMT        reduce using rule 54 (expr2 -> expr ANDAND expr .)
    RBRACE          reduce using rule 54 (expr2 -> expr ANDAND expr .)
    RBRACKET        reduce using rule 54 (expr2 -> expr ANDAND expr .)
    error           reduce using rule 54 (expr2 -> expr ANDAND expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! PLUSPLUS        [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! MINUSMINUS      [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! FIELD           [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! LPAREN          [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! TRANSPOSE       [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! AND             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! BACKSLASH       [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! DIV             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! DOT             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! DOTDIV          [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! DOTEXP          [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! DOTMUL          [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! EQEQ            [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! POW             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! EXP             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! GE              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! GT              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! LE              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! LT              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! MINUS           [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! MUL             [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! NE              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! OR              [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! PLUS            [ reduce using rule 54 (expr2 -> expr ANDAND expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 166

    (55) expr2 -> expr BACKSLASH expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    AND             reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    ANDAND          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    BACKSLASH       reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    COLON           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DIV             reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DOTDIV          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DOTDIVEQ        reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DOTMUL          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DOTMULEQ        reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    EQEQ            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    EXPEQ           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    GE              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    GT              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    LE              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    LT              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    MINUS           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    MUL             reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    NE              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    OR              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    PLUS            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    EQ              reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    MULEQ           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    DIVEQ           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    MINUSEQ         reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    PLUSEQ          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    OREQ            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    ANDEQ           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    COMMA           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    SEMI            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    RPAREN          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    CASE            reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    OTHERWISE       reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    END_STMT        reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    RBRACE          reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    RBRACKET        reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    error           reduce using rule 55 (expr2 -> expr BACKSLASH expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! PLUSPLUS        [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! MINUSMINUS      [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! FIELD           [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! LPAREN          [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! TRANSPOSE       [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! DOT             [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! DOTEXP          [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! POW             [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! EXP             [ reduce using rule 55 (expr2 -> expr BACKSLASH expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 167

    (56) expr2 -> expr COLON expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COLON           reduce using rule 56 (expr2 -> expr COLON expr .)
    DOTDIVEQ        reduce using rule 56 (expr2 -> expr COLON expr .)
    DOTMULEQ        reduce using rule 56 (expr2 -> expr COLON expr .)
    EXPEQ           reduce using rule 56 (expr2 -> expr COLON expr .)
    EQ              reduce using rule 56 (expr2 -> expr COLON expr .)
    MULEQ           reduce using rule 56 (expr2 -> expr COLON expr .)
    DIVEQ           reduce using rule 56 (expr2 -> expr COLON expr .)
    MINUSEQ         reduce using rule 56 (expr2 -> expr COLON expr .)
    PLUSEQ          reduce using rule 56 (expr2 -> expr COLON expr .)
    OREQ            reduce using rule 56 (expr2 -> expr COLON expr .)
    ANDEQ           reduce using rule 56 (expr2 -> expr COLON expr .)
    COMMA           reduce using rule 56 (expr2 -> expr COLON expr .)
    SEMI            reduce using rule 56 (expr2 -> expr COLON expr .)
    RPAREN          reduce using rule 56 (expr2 -> expr COLON expr .)
    CASE            reduce using rule 56 (expr2 -> expr COLON expr .)
    OTHERWISE       reduce using rule 56 (expr2 -> expr COLON expr .)
    END_STMT        reduce using rule 56 (expr2 -> expr COLON expr .)
    RBRACE          reduce using rule 56 (expr2 -> expr COLON expr .)
    RBRACKET        reduce using rule 56 (expr2 -> expr COLON expr .)
    error           reduce using rule 56 (expr2 -> expr COLON expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110

  ! OROR            [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! PLUSPLUS        [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! MINUSMINUS      [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! FIELD           [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! TRANSPOSE       [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! AND             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! ANDAND          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! BACKSLASH       [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! DOT             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! DOTDIV          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! DOTEXP          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! DOTMUL          [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! EQEQ            [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! POW             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! EXP             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! GE              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! GT              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! LE              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! LT              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! MUL             [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! NE              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! OR              [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 56 (expr2 -> expr COLON expr .) ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 168

    (57) expr2 -> expr DIV expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 57 (expr2 -> expr DIV expr .)
    AND             reduce using rule 57 (expr2 -> expr DIV expr .)
    ANDAND          reduce using rule 57 (expr2 -> expr DIV expr .)
    BACKSLASH       reduce using rule 57 (expr2 -> expr DIV expr .)
    COLON           reduce using rule 57 (expr2 -> expr DIV expr .)
    DIV             reduce using rule 57 (expr2 -> expr DIV expr .)
    DOTDIV          reduce using rule 57 (expr2 -> expr DIV expr .)
    DOTDIVEQ        reduce using rule 57 (expr2 -> expr DIV expr .)
    DOTMUL          reduce using rule 57 (expr2 -> expr DIV expr .)
    DOTMULEQ        reduce using rule 57 (expr2 -> expr DIV expr .)
    EQEQ            reduce using rule 57 (expr2 -> expr DIV expr .)
    EXPEQ           reduce using rule 57 (expr2 -> expr DIV expr .)
    GE              reduce using rule 57 (expr2 -> expr DIV expr .)
    GT              reduce using rule 57 (expr2 -> expr DIV expr .)
    LE              reduce using rule 57 (expr2 -> expr DIV expr .)
    LT              reduce using rule 57 (expr2 -> expr DIV expr .)
    MINUS           reduce using rule 57 (expr2 -> expr DIV expr .)
    MUL             reduce using rule 57 (expr2 -> expr DIV expr .)
    NE              reduce using rule 57 (expr2 -> expr DIV expr .)
    OR              reduce using rule 57 (expr2 -> expr DIV expr .)
    PLUS            reduce using rule 57 (expr2 -> expr DIV expr .)
    EQ              reduce using rule 57 (expr2 -> expr DIV expr .)
    MULEQ           reduce using rule 57 (expr2 -> expr DIV expr .)
    DIVEQ           reduce using rule 57 (expr2 -> expr DIV expr .)
    MINUSEQ         reduce using rule 57 (expr2 -> expr DIV expr .)
    PLUSEQ          reduce using rule 57 (expr2 -> expr DIV expr .)
    OREQ            reduce using rule 57 (expr2 -> expr DIV expr .)
    ANDEQ           reduce using rule 57 (expr2 -> expr DIV expr .)
    COMMA           reduce using rule 57 (expr2 -> expr DIV expr .)
    SEMI            reduce using rule 57 (expr2 -> expr DIV expr .)
    RPAREN          reduce using rule 57 (expr2 -> expr DIV expr .)
    CASE            reduce using rule 57 (expr2 -> expr DIV expr .)
    OTHERWISE       reduce using rule 57 (expr2 -> expr DIV expr .)
    END_STMT        reduce using rule 57 (expr2 -> expr DIV expr .)
    RBRACE          reduce using rule 57 (expr2 -> expr DIV expr .)
    RBRACKET        reduce using rule 57 (expr2 -> expr DIV expr .)
    error           reduce using rule 57 (expr2 -> expr DIV expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! PLUSPLUS        [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! MINUSMINUS      [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! FIELD           [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! LPAREN          [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! DOT             [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! DOTEXP          [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! POW             [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! EXP             [ reduce using rule 57 (expr2 -> expr DIV expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 169

    (58) expr2 -> expr DOT expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 58 (expr2 -> expr DOT expr .)
    LBRACE          reduce using rule 58 (expr2 -> expr DOT expr .)
    PLUSPLUS        reduce using rule 58 (expr2 -> expr DOT expr .)
    MINUSMINUS      reduce using rule 58 (expr2 -> expr DOT expr .)
    FIELD           reduce using rule 58 (expr2 -> expr DOT expr .)
    LPAREN          reduce using rule 58 (expr2 -> expr DOT expr .)
    TRANSPOSE       reduce using rule 58 (expr2 -> expr DOT expr .)
    AND             reduce using rule 58 (expr2 -> expr DOT expr .)
    ANDAND          reduce using rule 58 (expr2 -> expr DOT expr .)
    BACKSLASH       reduce using rule 58 (expr2 -> expr DOT expr .)
    COLON           reduce using rule 58 (expr2 -> expr DOT expr .)
    DIV             reduce using rule 58 (expr2 -> expr DOT expr .)
    DOT             reduce using rule 58 (expr2 -> expr DOT expr .)
    DOTDIV          reduce using rule 58 (expr2 -> expr DOT expr .)
    DOTDIVEQ        reduce using rule 58 (expr2 -> expr DOT expr .)
    DOTEXP          reduce using rule 58 (expr2 -> expr DOT expr .)
    DOTMUL          reduce using rule 58 (expr2 -> expr DOT expr .)
    DOTMULEQ        reduce using rule 58 (expr2 -> expr DOT expr .)
    EQEQ            reduce using rule 58 (expr2 -> expr DOT expr .)
    POW             reduce using rule 58 (expr2 -> expr DOT expr .)
    EXP             reduce using rule 58 (expr2 -> expr DOT expr .)
    EXPEQ           reduce using rule 58 (expr2 -> expr DOT expr .)
    GE              reduce using rule 58 (expr2 -> expr DOT expr .)
    GT              reduce using rule 58 (expr2 -> expr DOT expr .)
    LE              reduce using rule 58 (expr2 -> expr DOT expr .)
    LT              reduce using rule 58 (expr2 -> expr DOT expr .)
    MINUS           reduce using rule 58 (expr2 -> expr DOT expr .)
    MUL             reduce using rule 58 (expr2 -> expr DOT expr .)
    NE              reduce using rule 58 (expr2 -> expr DOT expr .)
    OR              reduce using rule 58 (expr2 -> expr DOT expr .)
    PLUS            reduce using rule 58 (expr2 -> expr DOT expr .)
    EQ              reduce using rule 58 (expr2 -> expr DOT expr .)
    MULEQ           reduce using rule 58 (expr2 -> expr DOT expr .)
    DIVEQ           reduce using rule 58 (expr2 -> expr DOT expr .)
    MINUSEQ         reduce using rule 58 (expr2 -> expr DOT expr .)
    PLUSEQ          reduce using rule 58 (expr2 -> expr DOT expr .)
    OREQ            reduce using rule 58 (expr2 -> expr DOT expr .)
    ANDEQ           reduce using rule 58 (expr2 -> expr DOT expr .)
    COMMA           reduce using rule 58 (expr2 -> expr DOT expr .)
    SEMI            reduce using rule 58 (expr2 -> expr DOT expr .)
    RPAREN          reduce using rule 58 (expr2 -> expr DOT expr .)
    CASE            reduce using rule 58 (expr2 -> expr DOT expr .)
    OTHERWISE       reduce using rule 58 (expr2 -> expr DOT expr .)
    END_STMT        reduce using rule 58 (expr2 -> expr DOT expr .)
    RBRACE          reduce using rule 58 (expr2 -> expr DOT expr .)
    RBRACKET        reduce using rule 58 (expr2 -> expr DOT expr .)
    error           reduce using rule 58 (expr2 -> expr DOT expr .)

  ! LBRACE          [ shift and go to state 81 ]
  ! PLUSPLUS        [ shift and go to state 82 ]
  ! MINUSMINUS      [ shift and go to state 83 ]
  ! FIELD           [ shift and go to state 84 ]
  ! LPAREN          [ shift and go to state 85 ]
  ! TRANSPOSE       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOT             [ shift and go to state 92 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTEXP          [ shift and go to state 95 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! POW             [ shift and go to state 99 ]
  ! EXP             [ shift and go to state 100 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 170

    (59) expr2 -> expr DOTDIV expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    AND             reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    ANDAND          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    BACKSLASH       reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    COLON           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DIV             reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DOTDIVEQ        reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DOTMULEQ        reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    EQEQ            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    EXPEQ           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    GE              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    GT              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    LE              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    LT              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    MINUS           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    MUL             reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    NE              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    OR              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    PLUS            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    EQ              reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    MULEQ           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    DIVEQ           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    MINUSEQ         reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    PLUSEQ          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    OREQ            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    ANDEQ           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    COMMA           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    SEMI            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    RPAREN          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    CASE            reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    OTHERWISE       reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    END_STMT        reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    RBRACE          reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    RBRACKET        reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    error           reduce using rule 59 (expr2 -> expr DOTDIV expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! PLUSPLUS        [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! MINUSMINUS      [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! FIELD           [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! LPAREN          [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! DOT             [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! DOTEXP          [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! POW             [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! EXP             [ reduce using rule 59 (expr2 -> expr DOTDIV expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 171

    (60) expr2 -> expr DOTDIVEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    SEMI            reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    RPAREN          reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    CASE            reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    OTHERWISE       reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    END_STMT        reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    RBRACE          reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    RBRACKET        reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    error           reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! LBRACE          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! FIELD           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! LPAREN          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! AND             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! ANDAND          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! COLON           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DIV             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOT             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOTDIV          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOTEXP          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOTMUL          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! EQEQ            [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! POW             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! EXP             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! EXPEQ           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! GE              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! GT              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! LE              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! LT              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! MINUS           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! MUL             [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! NE              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! OR              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! PLUS            [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! EQ              [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! MULEQ           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! DIVEQ           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! OREQ            [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]
  ! ANDEQ           [ reduce using rule 60 (expr2 -> expr DOTDIVEQ expr .) ]


state 172

    (61) expr2 -> expr DOTEXP expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    TRANSPOSE       reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    AND             reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    ANDAND          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    BACKSLASH       reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    COLON           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DIV             reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DOTDIV          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DOTDIVEQ        reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DOTMUL          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DOTMULEQ        reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    EQEQ            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    EXPEQ           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    GE              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    GT              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    LE              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    LT              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    MINUS           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    MUL             reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    NE              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    OR              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    PLUS            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    EQ              reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    MULEQ           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    DIVEQ           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    MINUSEQ         reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    PLUSEQ          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    OREQ            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    ANDEQ           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    COMMA           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    SEMI            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    RPAREN          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    CASE            reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    OTHERWISE       reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    END_STMT        reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    RBRACE          reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    RBRACKET        reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    error           reduce using rule 61 (expr2 -> expr DOTEXP expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! PLUSPLUS        [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! MINUSMINUS      [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! FIELD           [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! LPAREN          [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! DOT             [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! DOTEXP          [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! POW             [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! EXP             [ reduce using rule 61 (expr2 -> expr DOTEXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 173

    (62) expr2 -> expr DOTMUL expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    AND             reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    ANDAND          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    BACKSLASH       reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    COLON           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DIV             reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DOTDIVEQ        reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DOTMULEQ        reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    EQEQ            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    EXPEQ           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    GE              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    GT              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    LE              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    LT              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    MINUS           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    MUL             reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    NE              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    OR              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    PLUS            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    EQ              reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    MULEQ           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    DIVEQ           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    MINUSEQ         reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    PLUSEQ          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    OREQ            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    ANDEQ           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    COMMA           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    SEMI            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    RPAREN          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    CASE            reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    OTHERWISE       reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    END_STMT        reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    RBRACE          reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    RBRACKET        reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    error           reduce using rule 62 (expr2 -> expr DOTMUL expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! PLUSPLUS        [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! MINUSMINUS      [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! FIELD           [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! LPAREN          [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! DOT             [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! DOTEXP          [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! POW             [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! EXP             [ reduce using rule 62 (expr2 -> expr DOTMUL expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 174

    (63) expr2 -> expr DOTMULEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    SEMI            reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    RPAREN          reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    CASE            reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    OTHERWISE       reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    END_STMT        reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    RBRACE          reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    RBRACKET        reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    error           reduce using rule 63 (expr2 -> expr DOTMULEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! LBRACE          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! FIELD           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! LPAREN          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! AND             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! ANDAND          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! COLON           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DIV             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOT             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTDIV          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTEXP          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTMUL          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! EQEQ            [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! POW             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! EXP             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! EXPEQ           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! GE              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! GT              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! LE              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! LT              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! MINUS           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! MUL             [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! NE              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! OR              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! PLUS            [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! EQ              [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! MULEQ           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! DIVEQ           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! OREQ            [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]
  ! ANDEQ           [ reduce using rule 63 (expr2 -> expr DOTMULEQ expr .) ]


state 175

    (64) expr2 -> expr EQEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 64 (expr2 -> expr EQEQ expr .)
    ANDAND          reduce using rule 64 (expr2 -> expr EQEQ expr .)
    COLON           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    DOTDIVEQ        reduce using rule 64 (expr2 -> expr EQEQ expr .)
    DOTMULEQ        reduce using rule 64 (expr2 -> expr EQEQ expr .)
    EQEQ            reduce using rule 64 (expr2 -> expr EQEQ expr .)
    EXPEQ           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    GE              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    GT              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    LE              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    LT              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    NE              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    EQ              reduce using rule 64 (expr2 -> expr EQEQ expr .)
    MULEQ           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    DIVEQ           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    MINUSEQ         reduce using rule 64 (expr2 -> expr EQEQ expr .)
    PLUSEQ          reduce using rule 64 (expr2 -> expr EQEQ expr .)
    OREQ            reduce using rule 64 (expr2 -> expr EQEQ expr .)
    ANDEQ           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    COMMA           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    SEMI            reduce using rule 64 (expr2 -> expr EQEQ expr .)
    RPAREN          reduce using rule 64 (expr2 -> expr EQEQ expr .)
    CASE            reduce using rule 64 (expr2 -> expr EQEQ expr .)
    OTHERWISE       reduce using rule 64 (expr2 -> expr EQEQ expr .)
    END_STMT        reduce using rule 64 (expr2 -> expr EQEQ expr .)
    RBRACE          reduce using rule 64 (expr2 -> expr EQEQ expr .)
    RBRACKET        reduce using rule 64 (expr2 -> expr EQEQ expr .)
    error           reduce using rule 64 (expr2 -> expr EQEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! FIELD           [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! LPAREN          [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! AND             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! DIV             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! DOT             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! DOTDIV          [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! DOTEXP          [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! DOTMUL          [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! POW             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! EXP             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! MINUS           [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! MUL             [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! OR              [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! PLUS            [ reduce using rule 64 (expr2 -> expr EQEQ expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 176

    (65) expr2 -> expr POW expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 65 (expr2 -> expr POW expr .)
    TRANSPOSE       reduce using rule 65 (expr2 -> expr POW expr .)
    AND             reduce using rule 65 (expr2 -> expr POW expr .)
    ANDAND          reduce using rule 65 (expr2 -> expr POW expr .)
    BACKSLASH       reduce using rule 65 (expr2 -> expr POW expr .)
    COLON           reduce using rule 65 (expr2 -> expr POW expr .)
    DIV             reduce using rule 65 (expr2 -> expr POW expr .)
    DOTDIV          reduce using rule 65 (expr2 -> expr POW expr .)
    DOTDIVEQ        reduce using rule 65 (expr2 -> expr POW expr .)
    DOTMUL          reduce using rule 65 (expr2 -> expr POW expr .)
    DOTMULEQ        reduce using rule 65 (expr2 -> expr POW expr .)
    EQEQ            reduce using rule 65 (expr2 -> expr POW expr .)
    EXPEQ           reduce using rule 65 (expr2 -> expr POW expr .)
    GE              reduce using rule 65 (expr2 -> expr POW expr .)
    GT              reduce using rule 65 (expr2 -> expr POW expr .)
    LE              reduce using rule 65 (expr2 -> expr POW expr .)
    LT              reduce using rule 65 (expr2 -> expr POW expr .)
    MINUS           reduce using rule 65 (expr2 -> expr POW expr .)
    MUL             reduce using rule 65 (expr2 -> expr POW expr .)
    NE              reduce using rule 65 (expr2 -> expr POW expr .)
    OR              reduce using rule 65 (expr2 -> expr POW expr .)
    PLUS            reduce using rule 65 (expr2 -> expr POW expr .)
    EQ              reduce using rule 65 (expr2 -> expr POW expr .)
    MULEQ           reduce using rule 65 (expr2 -> expr POW expr .)
    DIVEQ           reduce using rule 65 (expr2 -> expr POW expr .)
    MINUSEQ         reduce using rule 65 (expr2 -> expr POW expr .)
    PLUSEQ          reduce using rule 65 (expr2 -> expr POW expr .)
    OREQ            reduce using rule 65 (expr2 -> expr POW expr .)
    ANDEQ           reduce using rule 65 (expr2 -> expr POW expr .)
    COMMA           reduce using rule 65 (expr2 -> expr POW expr .)
    SEMI            reduce using rule 65 (expr2 -> expr POW expr .)
    RPAREN          reduce using rule 65 (expr2 -> expr POW expr .)
    CASE            reduce using rule 65 (expr2 -> expr POW expr .)
    OTHERWISE       reduce using rule 65 (expr2 -> expr POW expr .)
    END_STMT        reduce using rule 65 (expr2 -> expr POW expr .)
    RBRACE          reduce using rule 65 (expr2 -> expr POW expr .)
    RBRACKET        reduce using rule 65 (expr2 -> expr POW expr .)
    error           reduce using rule 65 (expr2 -> expr POW expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! PLUSPLUS        [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! MINUSMINUS      [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! FIELD           [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! LPAREN          [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! DOT             [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! DOTEXP          [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! POW             [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! EXP             [ reduce using rule 65 (expr2 -> expr POW expr .) ]
  ! TRANSPOSE       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 177

    (66) expr2 -> expr EXP expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 66 (expr2 -> expr EXP expr .)
    TRANSPOSE       reduce using rule 66 (expr2 -> expr EXP expr .)
    AND             reduce using rule 66 (expr2 -> expr EXP expr .)
    ANDAND          reduce using rule 66 (expr2 -> expr EXP expr .)
    BACKSLASH       reduce using rule 66 (expr2 -> expr EXP expr .)
    COLON           reduce using rule 66 (expr2 -> expr EXP expr .)
    DIV             reduce using rule 66 (expr2 -> expr EXP expr .)
    DOTDIV          reduce using rule 66 (expr2 -> expr EXP expr .)
    DOTDIVEQ        reduce using rule 66 (expr2 -> expr EXP expr .)
    DOTMUL          reduce using rule 66 (expr2 -> expr EXP expr .)
    DOTMULEQ        reduce using rule 66 (expr2 -> expr EXP expr .)
    EQEQ            reduce using rule 66 (expr2 -> expr EXP expr .)
    EXPEQ           reduce using rule 66 (expr2 -> expr EXP expr .)
    GE              reduce using rule 66 (expr2 -> expr EXP expr .)
    GT              reduce using rule 66 (expr2 -> expr EXP expr .)
    LE              reduce using rule 66 (expr2 -> expr EXP expr .)
    LT              reduce using rule 66 (expr2 -> expr EXP expr .)
    MINUS           reduce using rule 66 (expr2 -> expr EXP expr .)
    MUL             reduce using rule 66 (expr2 -> expr EXP expr .)
    NE              reduce using rule 66 (expr2 -> expr EXP expr .)
    OR              reduce using rule 66 (expr2 -> expr EXP expr .)
    PLUS            reduce using rule 66 (expr2 -> expr EXP expr .)
    EQ              reduce using rule 66 (expr2 -> expr EXP expr .)
    MULEQ           reduce using rule 66 (expr2 -> expr EXP expr .)
    DIVEQ           reduce using rule 66 (expr2 -> expr EXP expr .)
    MINUSEQ         reduce using rule 66 (expr2 -> expr EXP expr .)
    PLUSEQ          reduce using rule 66 (expr2 -> expr EXP expr .)
    OREQ            reduce using rule 66 (expr2 -> expr EXP expr .)
    ANDEQ           reduce using rule 66 (expr2 -> expr EXP expr .)
    COMMA           reduce using rule 66 (expr2 -> expr EXP expr .)
    SEMI            reduce using rule 66 (expr2 -> expr EXP expr .)
    RPAREN          reduce using rule 66 (expr2 -> expr EXP expr .)
    CASE            reduce using rule 66 (expr2 -> expr EXP expr .)
    OTHERWISE       reduce using rule 66 (expr2 -> expr EXP expr .)
    END_STMT        reduce using rule 66 (expr2 -> expr EXP expr .)
    RBRACE          reduce using rule 66 (expr2 -> expr EXP expr .)
    RBRACKET        reduce using rule 66 (expr2 -> expr EXP expr .)
    error           reduce using rule 66 (expr2 -> expr EXP expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! PLUSPLUS        [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! MINUSMINUS      [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! FIELD           [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! LPAREN          [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! DOT             [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! DOTEXP          [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! POW             [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! EXP             [ reduce using rule 66 (expr2 -> expr EXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 178

    (67) expr2 -> expr EXPEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    SEMI            reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    RPAREN          reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    CASE            reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    OTHERWISE       reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    END_STMT        reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    RBRACE          reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    RBRACKET        reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    error           reduce using rule 67 (expr2 -> expr EXPEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! LBRACE          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! FIELD           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! LPAREN          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! AND             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! ANDAND          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! COLON           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DIV             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOT             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOTDIV          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOTEXP          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOTMUL          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! EQEQ            [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! POW             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! EXP             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! EXPEQ           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! GE              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! GT              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! LE              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! LT              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! MINUS           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! MUL             [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! NE              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! OR              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! PLUS            [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! EQ              [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! MULEQ           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! DIVEQ           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! OREQ            [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]
  ! ANDEQ           [ reduce using rule 67 (expr2 -> expr EXPEQ expr .) ]


state 179

    (68) expr2 -> expr GE expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 68 (expr2 -> expr GE expr .)
    ANDAND          reduce using rule 68 (expr2 -> expr GE expr .)
    COLON           reduce using rule 68 (expr2 -> expr GE expr .)
    DOTDIVEQ        reduce using rule 68 (expr2 -> expr GE expr .)
    DOTMULEQ        reduce using rule 68 (expr2 -> expr GE expr .)
    EQEQ            reduce using rule 68 (expr2 -> expr GE expr .)
    EXPEQ           reduce using rule 68 (expr2 -> expr GE expr .)
    GE              reduce using rule 68 (expr2 -> expr GE expr .)
    GT              reduce using rule 68 (expr2 -> expr GE expr .)
    LE              reduce using rule 68 (expr2 -> expr GE expr .)
    LT              reduce using rule 68 (expr2 -> expr GE expr .)
    NE              reduce using rule 68 (expr2 -> expr GE expr .)
    EQ              reduce using rule 68 (expr2 -> expr GE expr .)
    MULEQ           reduce using rule 68 (expr2 -> expr GE expr .)
    DIVEQ           reduce using rule 68 (expr2 -> expr GE expr .)
    MINUSEQ         reduce using rule 68 (expr2 -> expr GE expr .)
    PLUSEQ          reduce using rule 68 (expr2 -> expr GE expr .)
    OREQ            reduce using rule 68 (expr2 -> expr GE expr .)
    ANDEQ           reduce using rule 68 (expr2 -> expr GE expr .)
    COMMA           reduce using rule 68 (expr2 -> expr GE expr .)
    SEMI            reduce using rule 68 (expr2 -> expr GE expr .)
    RPAREN          reduce using rule 68 (expr2 -> expr GE expr .)
    CASE            reduce using rule 68 (expr2 -> expr GE expr .)
    OTHERWISE       reduce using rule 68 (expr2 -> expr GE expr .)
    END_STMT        reduce using rule 68 (expr2 -> expr GE expr .)
    RBRACE          reduce using rule 68 (expr2 -> expr GE expr .)
    RBRACKET        reduce using rule 68 (expr2 -> expr GE expr .)
    error           reduce using rule 68 (expr2 -> expr GE expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! PLUSPLUS        [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! MINUSMINUS      [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! FIELD           [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! LPAREN          [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! TRANSPOSE       [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! AND             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! BACKSLASH       [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! DIV             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! DOT             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! DOTDIV          [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! DOTEXP          [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! DOTMUL          [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! POW             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! EXP             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! MUL             [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! OR              [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 68 (expr2 -> expr GE expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 180

    (69) expr2 -> expr GT expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 69 (expr2 -> expr GT expr .)
    ANDAND          reduce using rule 69 (expr2 -> expr GT expr .)
    COLON           reduce using rule 69 (expr2 -> expr GT expr .)
    DOTDIVEQ        reduce using rule 69 (expr2 -> expr GT expr .)
    DOTMULEQ        reduce using rule 69 (expr2 -> expr GT expr .)
    EQEQ            reduce using rule 69 (expr2 -> expr GT expr .)
    EXPEQ           reduce using rule 69 (expr2 -> expr GT expr .)
    GE              reduce using rule 69 (expr2 -> expr GT expr .)
    GT              reduce using rule 69 (expr2 -> expr GT expr .)
    LE              reduce using rule 69 (expr2 -> expr GT expr .)
    LT              reduce using rule 69 (expr2 -> expr GT expr .)
    NE              reduce using rule 69 (expr2 -> expr GT expr .)
    EQ              reduce using rule 69 (expr2 -> expr GT expr .)
    MULEQ           reduce using rule 69 (expr2 -> expr GT expr .)
    DIVEQ           reduce using rule 69 (expr2 -> expr GT expr .)
    MINUSEQ         reduce using rule 69 (expr2 -> expr GT expr .)
    PLUSEQ          reduce using rule 69 (expr2 -> expr GT expr .)
    OREQ            reduce using rule 69 (expr2 -> expr GT expr .)
    ANDEQ           reduce using rule 69 (expr2 -> expr GT expr .)
    COMMA           reduce using rule 69 (expr2 -> expr GT expr .)
    SEMI            reduce using rule 69 (expr2 -> expr GT expr .)
    RPAREN          reduce using rule 69 (expr2 -> expr GT expr .)
    CASE            reduce using rule 69 (expr2 -> expr GT expr .)
    OTHERWISE       reduce using rule 69 (expr2 -> expr GT expr .)
    END_STMT        reduce using rule 69 (expr2 -> expr GT expr .)
    RBRACE          reduce using rule 69 (expr2 -> expr GT expr .)
    RBRACKET        reduce using rule 69 (expr2 -> expr GT expr .)
    error           reduce using rule 69 (expr2 -> expr GT expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! PLUSPLUS        [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! MINUSMINUS      [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! FIELD           [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! LPAREN          [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! TRANSPOSE       [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! AND             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! BACKSLASH       [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! DIV             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! DOT             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! DOTDIV          [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! DOTEXP          [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! DOTMUL          [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! POW             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! EXP             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! MUL             [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! OR              [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 69 (expr2 -> expr GT expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 181

    (70) expr2 -> expr LE expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 70 (expr2 -> expr LE expr .)
    ANDAND          reduce using rule 70 (expr2 -> expr LE expr .)
    COLON           reduce using rule 70 (expr2 -> expr LE expr .)
    DOTDIVEQ        reduce using rule 70 (expr2 -> expr LE expr .)
    DOTMULEQ        reduce using rule 70 (expr2 -> expr LE expr .)
    EQEQ            reduce using rule 70 (expr2 -> expr LE expr .)
    EXPEQ           reduce using rule 70 (expr2 -> expr LE expr .)
    GE              reduce using rule 70 (expr2 -> expr LE expr .)
    GT              reduce using rule 70 (expr2 -> expr LE expr .)
    LE              reduce using rule 70 (expr2 -> expr LE expr .)
    LT              reduce using rule 70 (expr2 -> expr LE expr .)
    NE              reduce using rule 70 (expr2 -> expr LE expr .)
    EQ              reduce using rule 70 (expr2 -> expr LE expr .)
    MULEQ           reduce using rule 70 (expr2 -> expr LE expr .)
    DIVEQ           reduce using rule 70 (expr2 -> expr LE expr .)
    MINUSEQ         reduce using rule 70 (expr2 -> expr LE expr .)
    PLUSEQ          reduce using rule 70 (expr2 -> expr LE expr .)
    OREQ            reduce using rule 70 (expr2 -> expr LE expr .)
    ANDEQ           reduce using rule 70 (expr2 -> expr LE expr .)
    COMMA           reduce using rule 70 (expr2 -> expr LE expr .)
    SEMI            reduce using rule 70 (expr2 -> expr LE expr .)
    RPAREN          reduce using rule 70 (expr2 -> expr LE expr .)
    CASE            reduce using rule 70 (expr2 -> expr LE expr .)
    OTHERWISE       reduce using rule 70 (expr2 -> expr LE expr .)
    END_STMT        reduce using rule 70 (expr2 -> expr LE expr .)
    RBRACE          reduce using rule 70 (expr2 -> expr LE expr .)
    RBRACKET        reduce using rule 70 (expr2 -> expr LE expr .)
    error           reduce using rule 70 (expr2 -> expr LE expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! PLUSPLUS        [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! MINUSMINUS      [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! FIELD           [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! LPAREN          [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! TRANSPOSE       [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! AND             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! BACKSLASH       [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! DIV             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! DOT             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! DOTDIV          [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! DOTEXP          [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! DOTMUL          [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! POW             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! EXP             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! MUL             [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! OR              [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 70 (expr2 -> expr LE expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 182

    (71) expr2 -> expr LT expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 71 (expr2 -> expr LT expr .)
    ANDAND          reduce using rule 71 (expr2 -> expr LT expr .)
    COLON           reduce using rule 71 (expr2 -> expr LT expr .)
    DOTDIVEQ        reduce using rule 71 (expr2 -> expr LT expr .)
    DOTMULEQ        reduce using rule 71 (expr2 -> expr LT expr .)
    EQEQ            reduce using rule 71 (expr2 -> expr LT expr .)
    EXPEQ           reduce using rule 71 (expr2 -> expr LT expr .)
    GE              reduce using rule 71 (expr2 -> expr LT expr .)
    GT              reduce using rule 71 (expr2 -> expr LT expr .)
    LE              reduce using rule 71 (expr2 -> expr LT expr .)
    LT              reduce using rule 71 (expr2 -> expr LT expr .)
    NE              reduce using rule 71 (expr2 -> expr LT expr .)
    EQ              reduce using rule 71 (expr2 -> expr LT expr .)
    MULEQ           reduce using rule 71 (expr2 -> expr LT expr .)
    DIVEQ           reduce using rule 71 (expr2 -> expr LT expr .)
    MINUSEQ         reduce using rule 71 (expr2 -> expr LT expr .)
    PLUSEQ          reduce using rule 71 (expr2 -> expr LT expr .)
    OREQ            reduce using rule 71 (expr2 -> expr LT expr .)
    ANDEQ           reduce using rule 71 (expr2 -> expr LT expr .)
    COMMA           reduce using rule 71 (expr2 -> expr LT expr .)
    SEMI            reduce using rule 71 (expr2 -> expr LT expr .)
    RPAREN          reduce using rule 71 (expr2 -> expr LT expr .)
    CASE            reduce using rule 71 (expr2 -> expr LT expr .)
    OTHERWISE       reduce using rule 71 (expr2 -> expr LT expr .)
    END_STMT        reduce using rule 71 (expr2 -> expr LT expr .)
    RBRACE          reduce using rule 71 (expr2 -> expr LT expr .)
    RBRACKET        reduce using rule 71 (expr2 -> expr LT expr .)
    error           reduce using rule 71 (expr2 -> expr LT expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! PLUSPLUS        [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! MINUSMINUS      [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! FIELD           [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! LPAREN          [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! TRANSPOSE       [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! AND             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! BACKSLASH       [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! DIV             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! DOT             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! DOTDIV          [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! DOTEXP          [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! DOTMUL          [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! POW             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! EXP             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! MUL             [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! OR              [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 71 (expr2 -> expr LT expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 183

    (72) expr2 -> expr MINUS expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 72 (expr2 -> expr MINUS expr .)
    AND             reduce using rule 72 (expr2 -> expr MINUS expr .)
    ANDAND          reduce using rule 72 (expr2 -> expr MINUS expr .)
    COLON           reduce using rule 72 (expr2 -> expr MINUS expr .)
    DOTDIVEQ        reduce using rule 72 (expr2 -> expr MINUS expr .)
    DOTMULEQ        reduce using rule 72 (expr2 -> expr MINUS expr .)
    EQEQ            reduce using rule 72 (expr2 -> expr MINUS expr .)
    EXPEQ           reduce using rule 72 (expr2 -> expr MINUS expr .)
    GE              reduce using rule 72 (expr2 -> expr MINUS expr .)
    GT              reduce using rule 72 (expr2 -> expr MINUS expr .)
    LE              reduce using rule 72 (expr2 -> expr MINUS expr .)
    LT              reduce using rule 72 (expr2 -> expr MINUS expr .)
    MINUS           reduce using rule 72 (expr2 -> expr MINUS expr .)
    NE              reduce using rule 72 (expr2 -> expr MINUS expr .)
    OR              reduce using rule 72 (expr2 -> expr MINUS expr .)
    PLUS            reduce using rule 72 (expr2 -> expr MINUS expr .)
    EQ              reduce using rule 72 (expr2 -> expr MINUS expr .)
    MULEQ           reduce using rule 72 (expr2 -> expr MINUS expr .)
    DIVEQ           reduce using rule 72 (expr2 -> expr MINUS expr .)
    MINUSEQ         reduce using rule 72 (expr2 -> expr MINUS expr .)
    PLUSEQ          reduce using rule 72 (expr2 -> expr MINUS expr .)
    OREQ            reduce using rule 72 (expr2 -> expr MINUS expr .)
    ANDEQ           reduce using rule 72 (expr2 -> expr MINUS expr .)
    COMMA           reduce using rule 72 (expr2 -> expr MINUS expr .)
    SEMI            reduce using rule 72 (expr2 -> expr MINUS expr .)
    RPAREN          reduce using rule 72 (expr2 -> expr MINUS expr .)
    CASE            reduce using rule 72 (expr2 -> expr MINUS expr .)
    OTHERWISE       reduce using rule 72 (expr2 -> expr MINUS expr .)
    END_STMT        reduce using rule 72 (expr2 -> expr MINUS expr .)
    RBRACE          reduce using rule 72 (expr2 -> expr MINUS expr .)
    RBRACKET        reduce using rule 72 (expr2 -> expr MINUS expr .)
    error           reduce using rule 72 (expr2 -> expr MINUS expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MUL             shift and go to state 107

  ! LBRACE          [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! PLUSPLUS        [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! MINUSMINUS      [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! FIELD           [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! BACKSLASH       [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! DOTDIV          [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! DOTMUL          [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! EXP             [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! MUL             [ reduce using rule 72 (expr2 -> expr MINUS expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 184

    (73) expr2 -> expr MUL expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 73 (expr2 -> expr MUL expr .)
    AND             reduce using rule 73 (expr2 -> expr MUL expr .)
    ANDAND          reduce using rule 73 (expr2 -> expr MUL expr .)
    BACKSLASH       reduce using rule 73 (expr2 -> expr MUL expr .)
    COLON           reduce using rule 73 (expr2 -> expr MUL expr .)
    DIV             reduce using rule 73 (expr2 -> expr MUL expr .)
    DOTDIV          reduce using rule 73 (expr2 -> expr MUL expr .)
    DOTDIVEQ        reduce using rule 73 (expr2 -> expr MUL expr .)
    DOTMUL          reduce using rule 73 (expr2 -> expr MUL expr .)
    DOTMULEQ        reduce using rule 73 (expr2 -> expr MUL expr .)
    EQEQ            reduce using rule 73 (expr2 -> expr MUL expr .)
    EXPEQ           reduce using rule 73 (expr2 -> expr MUL expr .)
    GE              reduce using rule 73 (expr2 -> expr MUL expr .)
    GT              reduce using rule 73 (expr2 -> expr MUL expr .)
    LE              reduce using rule 73 (expr2 -> expr MUL expr .)
    LT              reduce using rule 73 (expr2 -> expr MUL expr .)
    MINUS           reduce using rule 73 (expr2 -> expr MUL expr .)
    MUL             reduce using rule 73 (expr2 -> expr MUL expr .)
    NE              reduce using rule 73 (expr2 -> expr MUL expr .)
    OR              reduce using rule 73 (expr2 -> expr MUL expr .)
    PLUS            reduce using rule 73 (expr2 -> expr MUL expr .)
    EQ              reduce using rule 73 (expr2 -> expr MUL expr .)
    MULEQ           reduce using rule 73 (expr2 -> expr MUL expr .)
    DIVEQ           reduce using rule 73 (expr2 -> expr MUL expr .)
    MINUSEQ         reduce using rule 73 (expr2 -> expr MUL expr .)
    PLUSEQ          reduce using rule 73 (expr2 -> expr MUL expr .)
    OREQ            reduce using rule 73 (expr2 -> expr MUL expr .)
    ANDEQ           reduce using rule 73 (expr2 -> expr MUL expr .)
    COMMA           reduce using rule 73 (expr2 -> expr MUL expr .)
    SEMI            reduce using rule 73 (expr2 -> expr MUL expr .)
    RPAREN          reduce using rule 73 (expr2 -> expr MUL expr .)
    CASE            reduce using rule 73 (expr2 -> expr MUL expr .)
    OTHERWISE       reduce using rule 73 (expr2 -> expr MUL expr .)
    END_STMT        reduce using rule 73 (expr2 -> expr MUL expr .)
    RBRACE          reduce using rule 73 (expr2 -> expr MUL expr .)
    RBRACKET        reduce using rule 73 (expr2 -> expr MUL expr .)
    error           reduce using rule 73 (expr2 -> expr MUL expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    DOT             shift and go to state 92
    DOTEXP          shift and go to state 95
    POW             shift and go to state 99
    EXP             shift and go to state 100

  ! LBRACE          [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! PLUSPLUS        [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! MINUSMINUS      [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! FIELD           [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! LPAREN          [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! DOT             [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! DOTEXP          [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! POW             [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! EXP             [ reduce using rule 73 (expr2 -> expr MUL expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! BACKSLASH       [ shift and go to state 89 ]
  ! COLON           [ shift and go to state 90 ]
  ! DIV             [ shift and go to state 91 ]
  ! DOTDIV          [ shift and go to state 93 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMUL          [ shift and go to state 96 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! MUL             [ shift and go to state 107 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 185

    (74) expr2 -> expr NE expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 74 (expr2 -> expr NE expr .)
    ANDAND          reduce using rule 74 (expr2 -> expr NE expr .)
    COLON           reduce using rule 74 (expr2 -> expr NE expr .)
    DOTDIVEQ        reduce using rule 74 (expr2 -> expr NE expr .)
    DOTMULEQ        reduce using rule 74 (expr2 -> expr NE expr .)
    EQEQ            reduce using rule 74 (expr2 -> expr NE expr .)
    EXPEQ           reduce using rule 74 (expr2 -> expr NE expr .)
    GE              reduce using rule 74 (expr2 -> expr NE expr .)
    GT              reduce using rule 74 (expr2 -> expr NE expr .)
    LE              reduce using rule 74 (expr2 -> expr NE expr .)
    LT              reduce using rule 74 (expr2 -> expr NE expr .)
    NE              reduce using rule 74 (expr2 -> expr NE expr .)
    EQ              reduce using rule 74 (expr2 -> expr NE expr .)
    MULEQ           reduce using rule 74 (expr2 -> expr NE expr .)
    DIVEQ           reduce using rule 74 (expr2 -> expr NE expr .)
    MINUSEQ         reduce using rule 74 (expr2 -> expr NE expr .)
    PLUSEQ          reduce using rule 74 (expr2 -> expr NE expr .)
    OREQ            reduce using rule 74 (expr2 -> expr NE expr .)
    ANDEQ           reduce using rule 74 (expr2 -> expr NE expr .)
    COMMA           reduce using rule 74 (expr2 -> expr NE expr .)
    SEMI            reduce using rule 74 (expr2 -> expr NE expr .)
    RPAREN          reduce using rule 74 (expr2 -> expr NE expr .)
    CASE            reduce using rule 74 (expr2 -> expr NE expr .)
    OTHERWISE       reduce using rule 74 (expr2 -> expr NE expr .)
    END_STMT        reduce using rule 74 (expr2 -> expr NE expr .)
    RBRACE          reduce using rule 74 (expr2 -> expr NE expr .)
    RBRACKET        reduce using rule 74 (expr2 -> expr NE expr .)
    error           reduce using rule 74 (expr2 -> expr NE expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! PLUSPLUS        [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! MINUSMINUS      [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! FIELD           [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! LPAREN          [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! TRANSPOSE       [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! AND             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! BACKSLASH       [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! DIV             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! DOT             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! DOTDIV          [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! DOTEXP          [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! DOTMUL          [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! POW             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! EXP             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! MUL             [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! OR              [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 74 (expr2 -> expr NE expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 186

    (75) expr2 -> expr OR expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 75 (expr2 -> expr OR expr .)
    AND             reduce using rule 75 (expr2 -> expr OR expr .)
    ANDAND          reduce using rule 75 (expr2 -> expr OR expr .)
    COLON           reduce using rule 75 (expr2 -> expr OR expr .)
    DOTDIVEQ        reduce using rule 75 (expr2 -> expr OR expr .)
    DOTMULEQ        reduce using rule 75 (expr2 -> expr OR expr .)
    EQEQ            reduce using rule 75 (expr2 -> expr OR expr .)
    EXPEQ           reduce using rule 75 (expr2 -> expr OR expr .)
    GE              reduce using rule 75 (expr2 -> expr OR expr .)
    GT              reduce using rule 75 (expr2 -> expr OR expr .)
    LE              reduce using rule 75 (expr2 -> expr OR expr .)
    LT              reduce using rule 75 (expr2 -> expr OR expr .)
    NE              reduce using rule 75 (expr2 -> expr OR expr .)
    OR              reduce using rule 75 (expr2 -> expr OR expr .)
    EQ              reduce using rule 75 (expr2 -> expr OR expr .)
    MULEQ           reduce using rule 75 (expr2 -> expr OR expr .)
    DIVEQ           reduce using rule 75 (expr2 -> expr OR expr .)
    MINUSEQ         reduce using rule 75 (expr2 -> expr OR expr .)
    PLUSEQ          reduce using rule 75 (expr2 -> expr OR expr .)
    OREQ            reduce using rule 75 (expr2 -> expr OR expr .)
    ANDEQ           reduce using rule 75 (expr2 -> expr OR expr .)
    COMMA           reduce using rule 75 (expr2 -> expr OR expr .)
    SEMI            reduce using rule 75 (expr2 -> expr OR expr .)
    RPAREN          reduce using rule 75 (expr2 -> expr OR expr .)
    CASE            reduce using rule 75 (expr2 -> expr OR expr .)
    OTHERWISE       reduce using rule 75 (expr2 -> expr OR expr .)
    END_STMT        reduce using rule 75 (expr2 -> expr OR expr .)
    RBRACE          reduce using rule 75 (expr2 -> expr OR expr .)
    RBRACKET        reduce using rule 75 (expr2 -> expr OR expr .)
    error           reduce using rule 75 (expr2 -> expr OR expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! PLUSPLUS        [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! MINUSMINUS      [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! FIELD           [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! LPAREN          [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! TRANSPOSE       [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! BACKSLASH       [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! DIV             [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! DOT             [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! DOTDIV          [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! DOTEXP          [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! DOTMUL          [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! POW             [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! EXP             [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! MUL             [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 75 (expr2 -> expr OR expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 187

    (77) expr2 -> expr PLUS expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    OROR            reduce using rule 77 (expr2 -> expr PLUS expr .)
    AND             reduce using rule 77 (expr2 -> expr PLUS expr .)
    ANDAND          reduce using rule 77 (expr2 -> expr PLUS expr .)
    COLON           reduce using rule 77 (expr2 -> expr PLUS expr .)
    DOTDIVEQ        reduce using rule 77 (expr2 -> expr PLUS expr .)
    DOTMULEQ        reduce using rule 77 (expr2 -> expr PLUS expr .)
    EQEQ            reduce using rule 77 (expr2 -> expr PLUS expr .)
    EXPEQ           reduce using rule 77 (expr2 -> expr PLUS expr .)
    GE              reduce using rule 77 (expr2 -> expr PLUS expr .)
    GT              reduce using rule 77 (expr2 -> expr PLUS expr .)
    LE              reduce using rule 77 (expr2 -> expr PLUS expr .)
    LT              reduce using rule 77 (expr2 -> expr PLUS expr .)
    MINUS           reduce using rule 77 (expr2 -> expr PLUS expr .)
    NE              reduce using rule 77 (expr2 -> expr PLUS expr .)
    OR              reduce using rule 77 (expr2 -> expr PLUS expr .)
    PLUS            reduce using rule 77 (expr2 -> expr PLUS expr .)
    EQ              reduce using rule 77 (expr2 -> expr PLUS expr .)
    MULEQ           reduce using rule 77 (expr2 -> expr PLUS expr .)
    DIVEQ           reduce using rule 77 (expr2 -> expr PLUS expr .)
    MINUSEQ         reduce using rule 77 (expr2 -> expr PLUS expr .)
    PLUSEQ          reduce using rule 77 (expr2 -> expr PLUS expr .)
    OREQ            reduce using rule 77 (expr2 -> expr PLUS expr .)
    ANDEQ           reduce using rule 77 (expr2 -> expr PLUS expr .)
    COMMA           reduce using rule 77 (expr2 -> expr PLUS expr .)
    SEMI            reduce using rule 77 (expr2 -> expr PLUS expr .)
    RPAREN          reduce using rule 77 (expr2 -> expr PLUS expr .)
    CASE            reduce using rule 77 (expr2 -> expr PLUS expr .)
    OTHERWISE       reduce using rule 77 (expr2 -> expr PLUS expr .)
    END_STMT        reduce using rule 77 (expr2 -> expr PLUS expr .)
    RBRACE          reduce using rule 77 (expr2 -> expr PLUS expr .)
    RBRACKET        reduce using rule 77 (expr2 -> expr PLUS expr .)
    error           reduce using rule 77 (expr2 -> expr PLUS expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    POW             shift and go to state 99
    EXP             shift and go to state 100
    MUL             shift and go to state 107

  ! LBRACE          [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! PLUSPLUS        [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! MINUSMINUS      [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! FIELD           [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! BACKSLASH       [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! DOTDIV          [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! DOTMUL          [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! EXP             [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! MUL             [ reduce using rule 77 (expr2 -> expr PLUS expr .) ]
  ! AND             [ shift and go to state 87 ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EQEQ            [ shift and go to state 98 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 103 ]
  ! LE              [ shift and go to state 104 ]
  ! LT              [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 106 ]
  ! NE              [ shift and go to state 108 ]
  ! OR              [ shift and go to state 109 ]
  ! OROR            [ shift and go to state 201 ]
  ! PLUS            [ shift and go to state 110 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 188

    (78) expr2 -> expr EQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 78 (expr2 -> expr EQ expr .)
    SEMI            reduce using rule 78 (expr2 -> expr EQ expr .)
    RPAREN          reduce using rule 78 (expr2 -> expr EQ expr .)
    CASE            reduce using rule 78 (expr2 -> expr EQ expr .)
    OTHERWISE       reduce using rule 78 (expr2 -> expr EQ expr .)
    END_STMT        reduce using rule 78 (expr2 -> expr EQ expr .)
    RBRACE          reduce using rule 78 (expr2 -> expr EQ expr .)
    RBRACKET        reduce using rule 78 (expr2 -> expr EQ expr .)
    error           reduce using rule 78 (expr2 -> expr EQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! LBRACE          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! FIELD           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! LPAREN          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! AND             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! ANDAND          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! BACKSLASH       [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! COLON           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOT             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOTEXP          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! EQEQ            [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! POW             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! EXP             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! EXPEQ           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! GE              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! GT              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! LE              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! LT              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! NE              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! OR              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! MULEQ           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! DIVEQ           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! MINUSEQ         [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! PLUSEQ          [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! OREQ            [ reduce using rule 78 (expr2 -> expr EQ expr .) ]
  ! ANDEQ           [ reduce using rule 78 (expr2 -> expr EQ expr .) ]


state 189

    (79) expr2 -> expr MULEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 79 (expr2 -> expr MULEQ expr .)
    SEMI            reduce using rule 79 (expr2 -> expr MULEQ expr .)
    RPAREN          reduce using rule 79 (expr2 -> expr MULEQ expr .)
    CASE            reduce using rule 79 (expr2 -> expr MULEQ expr .)
    OTHERWISE       reduce using rule 79 (expr2 -> expr MULEQ expr .)
    END_STMT        reduce using rule 79 (expr2 -> expr MULEQ expr .)
    RBRACE          reduce using rule 79 (expr2 -> expr MULEQ expr .)
    RBRACKET        reduce using rule 79 (expr2 -> expr MULEQ expr .)
    error           reduce using rule 79 (expr2 -> expr MULEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! LBRACE          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! FIELD           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! LPAREN          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! AND             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! ANDAND          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! COLON           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DIV             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOT             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOTDIV          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOTEXP          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOTMUL          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! EQEQ            [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! POW             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! EXP             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! EXPEQ           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! GE              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! GT              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! LE              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! LT              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! MINUS           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! MUL             [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! NE              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! OR              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! PLUS            [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! EQ              [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! MULEQ           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! DIVEQ           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! OREQ            [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]
  ! ANDEQ           [ reduce using rule 79 (expr2 -> expr MULEQ expr .) ]


state 190

    (80) expr2 -> expr DIVEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    SEMI            reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    RPAREN          reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    CASE            reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    OTHERWISE       reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    END_STMT        reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    RBRACE          reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    RBRACKET        reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    error           reduce using rule 80 (expr2 -> expr DIVEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! LBRACE          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! FIELD           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! LPAREN          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! AND             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! ANDAND          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! COLON           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DIV             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOT             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOTDIV          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOTEXP          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOTMUL          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! EQEQ            [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! POW             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! EXP             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! EXPEQ           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! GE              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! GT              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! LE              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! LT              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! MINUS           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! MUL             [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! NE              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! OR              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! PLUS            [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! EQ              [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! MULEQ           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! DIVEQ           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! OREQ            [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]
  ! ANDEQ           [ reduce using rule 80 (expr2 -> expr DIVEQ expr .) ]


state 191

    (81) expr2 -> expr MINUSEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    SEMI            reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    RPAREN          reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    CASE            reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    OTHERWISE       reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    END_STMT        reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    RBRACE          reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    RBRACKET        reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    error           reduce using rule 81 (expr2 -> expr MINUSEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! LBRACE          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! FIELD           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! LPAREN          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! AND             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! ANDAND          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! COLON           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DIV             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOT             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTDIV          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTEXP          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTMUL          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! EQEQ            [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! POW             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! EXP             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! EXPEQ           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! GE              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! GT              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! LE              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! LT              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! MINUS           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! MUL             [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! NE              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! OR              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! PLUS            [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! EQ              [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! MULEQ           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! DIVEQ           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! OREQ            [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]
  ! ANDEQ           [ reduce using rule 81 (expr2 -> expr MINUSEQ expr .) ]


state 192

    (82) expr2 -> expr PLUSEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    SEMI            reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    RPAREN          reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    CASE            reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    OTHERWISE       reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    END_STMT        reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    RBRACE          reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    RBRACKET        reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    error           reduce using rule 82 (expr2 -> expr PLUSEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! LBRACE          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! FIELD           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! LPAREN          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! AND             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! ANDAND          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! COLON           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DIV             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOT             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTDIV          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTEXP          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTMUL          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! EQEQ            [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! POW             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! EXP             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! EXPEQ           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! GE              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! GT              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! LE              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! LT              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! MINUS           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! MUL             [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! NE              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! OR              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! PLUS            [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! EQ              [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! MULEQ           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! DIVEQ           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! OREQ            [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]
  ! ANDEQ           [ reduce using rule 82 (expr2 -> expr PLUSEQ expr .) ]


state 193

    (83) expr2 -> expr OREQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 83 (expr2 -> expr OREQ expr .)
    SEMI            reduce using rule 83 (expr2 -> expr OREQ expr .)
    RPAREN          reduce using rule 83 (expr2 -> expr OREQ expr .)
    CASE            reduce using rule 83 (expr2 -> expr OREQ expr .)
    OTHERWISE       reduce using rule 83 (expr2 -> expr OREQ expr .)
    END_STMT        reduce using rule 83 (expr2 -> expr OREQ expr .)
    RBRACE          reduce using rule 83 (expr2 -> expr OREQ expr .)
    RBRACKET        reduce using rule 83 (expr2 -> expr OREQ expr .)
    error           reduce using rule 83 (expr2 -> expr OREQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! LBRACE          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! FIELD           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! LPAREN          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! AND             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! ANDAND          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! BACKSLASH       [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! COLON           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DIV             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOT             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOTDIV          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOTEXP          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOTMUL          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! EQEQ            [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! POW             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! EXP             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! EXPEQ           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! GE              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! GT              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! LE              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! LT              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! MINUS           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! MUL             [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! NE              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! OR              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! PLUS            [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! EQ              [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! MULEQ           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! DIVEQ           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! MINUSEQ         [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! PLUSEQ          [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! OREQ            [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]
  ! ANDEQ           [ reduce using rule 83 (expr2 -> expr OREQ expr .) ]


state 194

    (84) expr2 -> expr ANDEQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    SEMI            reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    RPAREN          reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    CASE            reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    OTHERWISE       reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    END_STMT        reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    RBRACE          reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    RBRACKET        reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    error           reduce using rule 84 (expr2 -> expr ANDEQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117

  ! OROR            [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! LBRACE          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! FIELD           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! LPAREN          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! AND             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! ANDAND          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! BACKSLASH       [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! COLON           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DIV             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOT             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOTDIV          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOTDIVEQ        [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOTEXP          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOTMUL          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DOTMULEQ        [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! EQEQ            [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! POW             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! EXP             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! EXPEQ           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! GE              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! GT              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! LE              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! LT              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! MINUS           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! MUL             [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! NE              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! OR              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! PLUS            [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! EQ              [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! MULEQ           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! DIVEQ           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! MINUSEQ         [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! PLUSEQ          [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! OREQ            [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]
  ! ANDEQ           [ reduce using rule 84 (expr2 -> expr ANDEQ expr .) ]


state 195

    (124) persistent_stmt -> PERSISTENT global_list SEMI .

    END_STMT        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    END_FUNCTION    reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    CONTINUE        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    COMMENT         reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    FUNCTION        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    BREAK           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    GLOBAL          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    PERSISTENT      reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    ERROR_STMT      reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    FOR             reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    IF              reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    SEMI            reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    COMMA           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    RETURN          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    SWITCH          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    TRY             reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    WHILE           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    UNWIND_PROTECT  reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    IDENT           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    NEG             reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    LPAREN          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    END_EXPR        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    NUMBER          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    STRING          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    COLON           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    LBRACKET        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    LBRACE          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    MINUS           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    PLUS            reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    HANDLE          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    PLUSPLUS        reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    MINUSMINUS      reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    $end            reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    CATCH           reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    ELSE            reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    ELSEIF          reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    END_UNWIND_PROTECT reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    CASE            reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)
    OTHERWISE       reduce using rule 124 (persistent_stmt -> PERSISTENT global_list SEMI .)


state 196

    (125) persistent_stmt -> PERSISTENT ident EQ . expr SEMI
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 125
    expr                           shift and go to state 233
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 197

    (100) for_stmt -> FOR ident EQ . expr SEMI stmt_list END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 125
    expr                           shift and go to state 234
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 198

    (101) for_stmt -> FOR LPAREN ident . EQ expr RPAREN SEMI stmt_list END_STMT

    EQ              shift and go to state 235


state 199

    (102) for_stmt -> FOR matrix EQ . expr SEMI stmt_list END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    matrix                         shift and go to state 36
    expr                           shift and go to state 236
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 200

    (123) expr -> LPAREN expr RPAREN .

    OROR            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUSPLUS        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUSMINUS      reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    FIELD           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    BACKSLASH       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIV          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIVEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTEXP          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMUL          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMULEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXP             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXPEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MULEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIVEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUSEQ         reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUSEQ          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OREQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OTHERWISE       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    END_STMT        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    error           reduce using rule 123 (expr -> LPAREN expr RPAREN .)


state 201

    (76) expr2 -> expr OROR . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 237
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 202

    (111) if_stmt -> IF expr sep . stmt_list_opt elseif_stmt END_STMT
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 155 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 238
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 203

    (133) sep -> COMMA .

    CONTINUE        reduce using rule 133 (sep -> COMMA .)
    COMMENT         reduce using rule 133 (sep -> COMMA .)
    FUNCTION        reduce using rule 133 (sep -> COMMA .)
    BREAK           reduce using rule 133 (sep -> COMMA .)
    GLOBAL          reduce using rule 133 (sep -> COMMA .)
    PERSISTENT      reduce using rule 133 (sep -> COMMA .)
    ERROR_STMT      reduce using rule 133 (sep -> COMMA .)
    FOR             reduce using rule 133 (sep -> COMMA .)
    IF              reduce using rule 133 (sep -> COMMA .)
    SEMI            reduce using rule 133 (sep -> COMMA .)
    COMMA           reduce using rule 133 (sep -> COMMA .)
    RETURN          reduce using rule 133 (sep -> COMMA .)
    SWITCH          reduce using rule 133 (sep -> COMMA .)
    TRY             reduce using rule 133 (sep -> COMMA .)
    WHILE           reduce using rule 133 (sep -> COMMA .)
    UNWIND_PROTECT  reduce using rule 133 (sep -> COMMA .)
    IDENT           reduce using rule 133 (sep -> COMMA .)
    NEG             reduce using rule 133 (sep -> COMMA .)
    LPAREN          reduce using rule 133 (sep -> COMMA .)
    END_EXPR        reduce using rule 133 (sep -> COMMA .)
    NUMBER          reduce using rule 133 (sep -> COMMA .)
    STRING          reduce using rule 133 (sep -> COMMA .)
    COLON           reduce using rule 133 (sep -> COMMA .)
    LBRACKET        reduce using rule 133 (sep -> COMMA .)
    LBRACE          reduce using rule 133 (sep -> COMMA .)
    MINUS           reduce using rule 133 (sep -> COMMA .)
    PLUS            reduce using rule 133 (sep -> COMMA .)
    HANDLE          reduce using rule 133 (sep -> COMMA .)
    PLUSPLUS        reduce using rule 133 (sep -> COMMA .)
    MINUSMINUS      reduce using rule 133 (sep -> COMMA .)
    ELSE            reduce using rule 133 (sep -> COMMA .)
    ELSEIF          reduce using rule 133 (sep -> COMMA .)
    END_STMT        reduce using rule 133 (sep -> COMMA .)
    CASE            reduce using rule 133 (sep -> COMMA .)
    OTHERWISE       reduce using rule 133 (sep -> COMMA .)


state 204

    (134) sep -> SEMI .

    CONTINUE        reduce using rule 134 (sep -> SEMI .)
    COMMENT         reduce using rule 134 (sep -> SEMI .)
    FUNCTION        reduce using rule 134 (sep -> SEMI .)
    BREAK           reduce using rule 134 (sep -> SEMI .)
    GLOBAL          reduce using rule 134 (sep -> SEMI .)
    PERSISTENT      reduce using rule 134 (sep -> SEMI .)
    ERROR_STMT      reduce using rule 134 (sep -> SEMI .)
    FOR             reduce using rule 134 (sep -> SEMI .)
    IF              reduce using rule 134 (sep -> SEMI .)
    SEMI            reduce using rule 134 (sep -> SEMI .)
    COMMA           reduce using rule 134 (sep -> SEMI .)
    RETURN          reduce using rule 134 (sep -> SEMI .)
    SWITCH          reduce using rule 134 (sep -> SEMI .)
    TRY             reduce using rule 134 (sep -> SEMI .)
    WHILE           reduce using rule 134 (sep -> SEMI .)
    UNWIND_PROTECT  reduce using rule 134 (sep -> SEMI .)
    IDENT           reduce using rule 134 (sep -> SEMI .)
    NEG             reduce using rule 134 (sep -> SEMI .)
    LPAREN          reduce using rule 134 (sep -> SEMI .)
    END_EXPR        reduce using rule 134 (sep -> SEMI .)
    NUMBER          reduce using rule 134 (sep -> SEMI .)
    STRING          reduce using rule 134 (sep -> SEMI .)
    COLON           reduce using rule 134 (sep -> SEMI .)
    LBRACKET        reduce using rule 134 (sep -> SEMI .)
    LBRACE          reduce using rule 134 (sep -> SEMI .)
    MINUS           reduce using rule 134 (sep -> SEMI .)
    PLUS            reduce using rule 134 (sep -> SEMI .)
    HANDLE          reduce using rule 134 (sep -> SEMI .)
    PLUSPLUS        reduce using rule 134 (sep -> SEMI .)
    MINUSMINUS      reduce using rule 134 (sep -> SEMI .)
    ELSE            reduce using rule 134 (sep -> SEMI .)
    ELSEIF          reduce using rule 134 (sep -> SEMI .)
    END_STMT        reduce using rule 134 (sep -> SEMI .)
    CASE            reduce using rule 134 (sep -> SEMI .)
    OTHERWISE       reduce using rule 134 (sep -> SEMI .)


state 205

    (112) if_stmt -> IF LPAREN expr . RPAREN stmt_list_opt elseif_stmt END_STMT
    (123) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 240
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 206

    (157) switch_stmt -> SWITCH expr semi_opt . case_list END_STMT
    (131) semi_opt -> semi_opt . SEMI
    (132) semi_opt -> semi_opt . COMMA
    (14) case_list -> .
    (15) case_list -> . CASE expr sep stmt_list_opt case_list
    (16) case_list -> . CASE expr error stmt_list_opt case_list
    (17) case_list -> . OTHERWISE stmt_list

    SEMI            shift and go to state 242
    COMMA           shift and go to state 243
    END_STMT        reduce using rule 14 (case_list -> .)
    CASE            shift and go to state 244
    OTHERWISE       shift and go to state 245

    case_list                      shift and go to state 241

state 207

    (159) try_catch -> TRY stmt_list CATCH . stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list                      shift and go to state 246
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 208

    (154) stmt_list -> stmt_list stmt .

    CATCH           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    CONTINUE        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    COMMENT         reduce using rule 154 (stmt_list -> stmt_list stmt .)
    FUNCTION        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    GLOBAL          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    PERSISTENT      reduce using rule 154 (stmt_list -> stmt_list stmt .)
    ERROR_STMT      reduce using rule 154 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 154 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 154 (stmt_list -> stmt_list stmt .)
    SEMI            reduce using rule 154 (stmt_list -> stmt_list stmt .)
    COMMA           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    SWITCH          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    TRY             reduce using rule 154 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    UNWIND_PROTECT  reduce using rule 154 (stmt_list -> stmt_list stmt .)
    IDENT           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    NEG             reduce using rule 154 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    END_EXPR        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    STRING          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    COLON           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    LBRACKET        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 154 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 154 (stmt_list -> stmt_list stmt .)
    HANDLE          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    PLUSPLUS        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    MINUSMINUS      reduce using rule 154 (stmt_list -> stmt_list stmt .)
    UNWIND_PROTECT_CLEANUP reduce using rule 154 (stmt_list -> stmt_list stmt .)
    ELSE            reduce using rule 154 (stmt_list -> stmt_list stmt .)
    ELSEIF          reduce using rule 154 (stmt_list -> stmt_list stmt .)
    END_STMT        reduce using rule 154 (stmt_list -> stmt_list stmt .)
    END_UNWIND_PROTECT reduce using rule 154 (stmt_list -> stmt_list stmt .)
    CASE            reduce using rule 154 (stmt_list -> stmt_list stmt .)
    OTHERWISE       reduce using rule 154 (stmt_list -> stmt_list stmt .)


state 209

    (161) while_stmt -> WHILE expr SEMI . stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt_list                      shift and go to state 247
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 210

    (160) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP . stmt_list END_UNWIND_PROTECT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list                      shift and go to state 248
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 211

    (97) exprs -> exprs COMMA expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    COMMA           reduce using rule 97 (exprs -> exprs COMMA expr .)
    SEMI            reduce using rule 97 (exprs -> exprs COMMA expr .)
    RBRACE          reduce using rule 97 (exprs -> exprs COMMA expr .)
    RBRACKET        reduce using rule 97 (exprs -> exprs COMMA expr .)
    RPAREN          reduce using rule 97 (exprs -> exprs COMMA expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 212

    (19) cellarray -> LBRACE expr_list RBRACE .

    OROR            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    PLUSPLUS        reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    MINUSMINUS      reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    FIELD           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    AND             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    COLON           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DIV             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOT             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOTDIVEQ        reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMULEQ        reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    EQEQ            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    POW             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    EXP             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    EXPEQ           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    GE              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    GT              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    LE              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    LT              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    MUL             reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    NE              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    OR              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    EQ              reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    MULEQ           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    DIVEQ           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    MINUSEQ         reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    PLUSEQ          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    OREQ            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    ANDEQ           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    RPAREN          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    CASE            reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)
    error           reduce using rule 19 (cellarray -> LBRACE expr_list RBRACE .)


state 213

    (26) concat_list -> expr_list SEMI . expr_list
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 249
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 214

    (20) cellarray -> LBRACE concat_list RBRACE .

    OROR            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    LBRACE          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    PLUSPLUS        reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    MINUSMINUS      reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    FIELD           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    LPAREN          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    TRANSPOSE       reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    AND             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    ANDAND          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    BACKSLASH       reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    COLON           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DIV             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOT             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOTDIV          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOTDIVEQ        reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOTEXP          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOTMUL          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DOTMULEQ        reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    EQEQ            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    POW             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    EXP             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    EXPEQ           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    GE              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    GT              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    LE              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    LT              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    MINUS           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    MUL             reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    NE              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    OR              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    PLUS            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    EQ              reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    MULEQ           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    DIVEQ           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    MINUSEQ         reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    PLUSEQ          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    OREQ            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    ANDEQ           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    COMMA           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    SEMI            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    RPAREN          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    CASE            reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    OTHERWISE       reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    END_STMT        reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    RBRACE          reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    RBRACKET        reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)
    error           reduce using rule 20 (cellarray -> LBRACE concat_list RBRACE .)


state 215

    (21) cellarray -> LBRACE concat_list SEMI . RBRACE
    (27) concat_list -> concat_list SEMI . expr_list
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 250
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 251
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 216

    (117) matrix -> LBRACKET concat_list RBRACKET .

    OROR            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    LBRACE          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUSPLUS        reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUSMINUS      reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    FIELD           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    LPAREN          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    TRANSPOSE       reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    AND             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDAND          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    BACKSLASH       reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    COLON           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DIV             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOT             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTDIV          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTDIVEQ        reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTEXP          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMUL          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMULEQ        reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    EQEQ            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    POW             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    EXP             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    EXPEQ           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    GE              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    GT              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    LE              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    LT              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUS           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    MUL             reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    NE              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    OR              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUS            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    EQ              reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    MULEQ           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    DIVEQ           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUSEQ         reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUSEQ          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    OREQ            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDEQ           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    COMMA           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    SEMI            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    RPAREN          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    CASE            reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    OTHERWISE       reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    END_STMT        reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACE          reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACKET        reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)
    error           reduce using rule 117 (matrix -> LBRACKET concat_list RBRACKET .)


state 217

    (118) matrix -> LBRACKET concat_list SEMI . RBRACKET
    (27) concat_list -> concat_list SEMI . expr_list
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 252
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 251
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 218

    (119) matrix -> LBRACKET expr_list RBRACKET .

    OROR            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUSPLUS        reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUSMINUS      reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    FIELD           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    LPAREN          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    TRANSPOSE       reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDAND          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    BACKSLASH       reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOT             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTDIV          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTDIVEQ        reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTEXP          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMUL          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMULEQ        reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    EQEQ            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    EXP             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    EXPEQ           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    MULEQ           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    DIVEQ           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUSEQ         reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUSEQ          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    OREQ            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDEQ           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    SEMI            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    CASE            reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    OTHERWISE       reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    END_STMT        reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 119 (matrix -> LBRACKET expr_list RBRACKET .)


state 219

    (120) matrix -> LBRACKET expr_list SEMI . RBRACKET
    (26) concat_list -> expr_list SEMI . expr_list
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 253
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr_list                      shift and go to state 249
    exprs                          shift and go to state 44
    expr                           shift and go to state 138
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 220

    (115) lambda_expr -> HANDLE lambda_args expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    DOTDIVEQ        reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    DOTMULEQ        reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    EXPEQ           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    EQ              reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    MULEQ           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    DIVEQ           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    MINUSEQ         reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    PLUSEQ          reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    OREQ            reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    ANDEQ           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    COMMA           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    SEMI            reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    RPAREN          reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    CASE            reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    OTHERWISE       reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    END_STMT        reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACE          reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACKET        reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    error           reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110

  ! OROR            [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LBRACE          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! PLUSPLUS        [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MINUSMINUS      [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! FIELD           [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LPAREN          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! TRANSPOSE       [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! AND             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! ANDAND          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! BACKSLASH       [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! COLON           [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DIV             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOT             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTDIV          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTEXP          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTMUL          [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EQEQ            [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! POW             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EXP             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GE              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GT              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LE              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LT              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MINUS           [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MUL             [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! NE              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! OR              [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! PLUS            [ reduce using rule 115 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 221

    (113) lambda_args -> LPAREN RPAREN .

    NEG             reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    LPAREN          reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    IDENT           reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    END_EXPR        reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    NUMBER          reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    STRING          reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    COLON           reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    LBRACE          reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    MINUS           reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    PLUS            reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    HANDLE          reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 113 (lambda_args -> LPAREN RPAREN .)
    SEMI            reduce using rule 113 (lambda_args -> LPAREN RPAREN .)


state 222

    (114) lambda_args -> LPAREN arg_list . RPAREN
    (10) arg_list -> arg_list . COMMA ident_init_opt

    RPAREN          shift and go to state 254
    COMMA           shift and go to state 255


state 223

    (9) arg_list -> ident_init_opt .

    RPAREN          reduce using rule 9 (arg_list -> ident_init_opt .)
    COMMA           reduce using rule 9 (arg_list -> ident_init_opt .)


state 224

    (88) ident_init_opt -> NEG .

    RPAREN          reduce using rule 88 (ident_init_opt -> NEG .)
    COMMA           reduce using rule 88 (ident_init_opt -> NEG .)


state 225

    (89) ident_init_opt -> ident .
    (90) ident_init_opt -> ident . EQ expr

    RPAREN          reduce using rule 89 (ident_init_opt -> ident .)
    COMMA           reduce using rule 89 (ident_init_opt -> ident .)
    EQ              shift and go to state 256


state 226

    (103) func_stmt -> FUNCTION ident lambda_args SEMI .

    END_STMT        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    END_FUNCTION    reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    CONTINUE        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    COMMENT         reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    FUNCTION        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    BREAK           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    GLOBAL          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    PERSISTENT      reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    ERROR_STMT      reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    FOR             reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    IF              reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    SEMI            reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    COMMA           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    RETURN          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    SWITCH          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    TRY             reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    WHILE           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    UNWIND_PROTECT  reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    IDENT           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    NEG             reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    LPAREN          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    END_EXPR        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    NUMBER          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    STRING          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    COLON           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    LBRACKET        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    LBRACE          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    MINUS           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    PLUS            reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    HANDLE          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    PLUSPLUS        reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    MINUSMINUS      reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    $end            reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    CATCH           reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    ELSE            reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    ELSEIF          reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    END_UNWIND_PROTECT reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    CASE            reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)
    OTHERWISE       reduce using rule 103 (func_stmt -> FUNCTION ident lambda_args SEMI .)


state 227

    (104) func_stmt -> FUNCTION ret EQ ident . lambda_args SEMI
    (113) lambda_args -> . LPAREN RPAREN
    (114) lambda_args -> . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 149

    lambda_args                    shift and go to state 257

state 228

    (128) ret -> LBRACKET expr_list RBRACKET .

    EQ              reduce using rule 128 (ret -> LBRACKET expr_list RBRACKET .)


state 229

    (110) global_stmt -> GLOBAL ident EQ expr . SEMI
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 258
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 230

    (99) foo_stmt -> expr OROR expr SEMI .

    END_STMT        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    END_FUNCTION    reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    CONTINUE        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    COMMENT         reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    FUNCTION        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    BREAK           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    GLOBAL          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    PERSISTENT      reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    ERROR_STMT      reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    FOR             reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    IF              reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    SEMI            reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    COMMA           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    RETURN          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    SWITCH          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    TRY             reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    WHILE           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    UNWIND_PROTECT  reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    IDENT           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    NEG             reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    LPAREN          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    END_EXPR        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    NUMBER          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    STRING          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    COLON           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    LBRACKET        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    LBRACE          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    MINUS           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    PLUS            reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    HANDLE          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    PLUSPLUS        reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    MINUSMINUS      reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    $end            reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    CATCH           reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    ELSE            reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    ELSEIF          reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    END_UNWIND_PROTECT reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    CASE            reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)
    OTHERWISE       reduce using rule 99 (foo_stmt -> expr OROR expr SEMI .)


state 231

    (22) expr -> expr LBRACE expr_list RBRACE .

    OROR            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    PLUSPLUS        reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    MINUSMINUS      reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    FIELD           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    AND             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    COLON           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DIV             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOT             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOTDIVEQ        reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMULEQ        reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    EQEQ            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    POW             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    EXP             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    EXPEQ           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    GE              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    GT              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    LE              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    LT              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    MUL             reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    NE              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    OR              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    EQ              reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    MULEQ           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    DIVEQ           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    MINUSEQ         reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    PLUSEQ          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    OREQ            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    ANDEQ           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    RPAREN          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    CASE            reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)
    error           reduce using rule 22 (expr -> expr LBRACE expr_list RBRACE .)


state 232

    (105) expr -> expr LPAREN expr_list RPAREN .

    OROR            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    PLUSPLUS        reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    MINUSMINUS      reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    FIELD           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    LPAREN          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    TRANSPOSE       reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    AND             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    ANDAND          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    BACKSLASH       reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    COLON           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DIV             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOT             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOTDIV          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOTDIVEQ        reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOTEXP          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOTMUL          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DOTMULEQ        reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    EQEQ            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    POW             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    EXP             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    EXPEQ           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    GE              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    GT              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    LE              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    LT              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    MUL             reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    NE              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    OR              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    EQ              reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    MULEQ           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    DIVEQ           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    MINUSEQ         reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    PLUSEQ          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    OREQ            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    ANDEQ           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    SEMI            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    CASE            reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    OTHERWISE       reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    END_STMT        reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACE          reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)
    error           reduce using rule 105 (expr -> expr LPAREN expr_list RPAREN .)


state 233

    (125) persistent_stmt -> PERSISTENT ident EQ expr . SEMI
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 259
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 234

    (100) for_stmt -> FOR ident EQ expr . SEMI stmt_list END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 260
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 235

    (101) for_stmt -> FOR LPAREN ident EQ . expr RPAREN SEMI stmt_list END_STMT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 125
    expr                           shift and go to state 261
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 236

    (102) for_stmt -> FOR matrix EQ expr . SEMI stmt_list END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    SEMI            shift and go to state 262
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 237

    (76) expr2 -> expr OROR expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          reduce using rule 76 (expr2 -> expr OROR expr .)
    ANDAND          reduce using rule 76 (expr2 -> expr OROR expr .)
    COLON           reduce using rule 76 (expr2 -> expr OROR expr .)
    DOTDIVEQ        reduce using rule 76 (expr2 -> expr OROR expr .)
    DOTMULEQ        reduce using rule 76 (expr2 -> expr OROR expr .)
    EXPEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    OROR            reduce using rule 76 (expr2 -> expr OROR expr .)
    EQ              reduce using rule 76 (expr2 -> expr OROR expr .)
    MULEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    DIVEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    MINUSEQ         reduce using rule 76 (expr2 -> expr OROR expr .)
    PLUSEQ          reduce using rule 76 (expr2 -> expr OROR expr .)
    OREQ            reduce using rule 76 (expr2 -> expr OROR expr .)
    ANDEQ           reduce using rule 76 (expr2 -> expr OROR expr .)
    COMMA           reduce using rule 76 (expr2 -> expr OROR expr .)
    SEMI            reduce using rule 76 (expr2 -> expr OROR expr .)
    CASE            reduce using rule 76 (expr2 -> expr OROR expr .)
    OTHERWISE       reduce using rule 76 (expr2 -> expr OROR expr .)
    END_STMT        reduce using rule 76 (expr2 -> expr OROR expr .)
    RBRACE          reduce using rule 76 (expr2 -> expr OROR expr .)
    RBRACKET        reduce using rule 76 (expr2 -> expr OROR expr .)
    error           reduce using rule 76 (expr2 -> expr OROR expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    BACKSLASH       shift and go to state 89
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    PLUS            shift and go to state 110

  ! LBRACE          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! PLUSPLUS        [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MINUSMINUS      [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! FIELD           [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LPAREN          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! TRANSPOSE       [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! AND             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! BACKSLASH       [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DIV             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOT             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTDIV          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTEXP          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! DOTMUL          [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! EQEQ            [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! POW             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! EXP             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! GE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! GT              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! LT              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! MUL             [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! NE              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! OR              [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 76 (expr2 -> expr OROR expr .) ]
  ! ANDAND          [ shift and go to state 88 ]
  ! COLON           [ shift and go to state 90 ]
  ! DOTDIVEQ        [ shift and go to state 94 ]
  ! DOTMULEQ        [ shift and go to state 97 ]
  ! EXPEQ           [ shift and go to state 101 ]
  ! OROR            [ shift and go to state 201 ]
  ! EQ              [ shift and go to state 111 ]
  ! MULEQ           [ shift and go to state 112 ]
  ! DIVEQ           [ shift and go to state 113 ]
  ! MINUSEQ         [ shift and go to state 114 ]
  ! PLUSEQ          [ shift and go to state 115 ]
  ! OREQ            [ shift and go to state 116 ]
  ! ANDEQ           [ shift and go to state 117 ]


state 238

    (111) if_stmt -> IF expr sep stmt_list_opt . elseif_stmt END_STMT
    (29) elseif_stmt -> .
    (30) elseif_stmt -> . ELSE stmt_list_opt
    (31) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt
    (32) elseif_stmt -> . ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 29 (elseif_stmt -> .)
    ELSE            shift and go to state 264
    ELSEIF          shift and go to state 265

    elseif_stmt                    shift and go to state 263

state 239

    (156) stmt_list_opt -> stmt_list .
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 156 (stmt_list_opt -> stmt_list .)
    ELSEIF          reduce using rule 156 (stmt_list_opt -> stmt_list .)
    END_STMT        reduce using rule 156 (stmt_list_opt -> stmt_list .)
    CASE            reduce using rule 156 (stmt_list_opt -> stmt_list .)
    OTHERWISE       reduce using rule 156 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 240

    (112) if_stmt -> IF LPAREN expr RPAREN . stmt_list_opt elseif_stmt END_STMT
    (123) expr -> LPAREN expr RPAREN .
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    FIELD           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    BACKSLASH       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIV          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIVEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTEXP          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMUL          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMULEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXP             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXPEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MULEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIVEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUSEQ         reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUSEQ          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OREQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 155 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

  ! LBRACE          [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! PLUSPLUS        [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! MINUSMINUS      [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! SEMI            [ shift and go to state 24 ]
  ! COMMA           [ shift and go to state 38 ]
  ! LPAREN          [ shift and go to state 35 ]
  ! COLON           [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 63 ]
  ! PLUS            [ shift and go to state 64 ]

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 266
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 241

    (157) switch_stmt -> SWITCH expr semi_opt case_list . END_STMT

    END_STMT        shift and go to state 267


state 242

    (131) semi_opt -> semi_opt SEMI .

    SEMI            reduce using rule 131 (semi_opt -> semi_opt SEMI .)
    COMMA           reduce using rule 131 (semi_opt -> semi_opt SEMI .)
    CASE            reduce using rule 131 (semi_opt -> semi_opt SEMI .)
    OTHERWISE       reduce using rule 131 (semi_opt -> semi_opt SEMI .)
    END_STMT        reduce using rule 131 (semi_opt -> semi_opt SEMI .)


state 243

    (132) semi_opt -> semi_opt COMMA .

    SEMI            reduce using rule 132 (semi_opt -> semi_opt COMMA .)
    COMMA           reduce using rule 132 (semi_opt -> semi_opt COMMA .)
    CASE            reduce using rule 132 (semi_opt -> semi_opt COMMA .)
    OTHERWISE       reduce using rule 132 (semi_opt -> semi_opt COMMA .)
    END_STMT        reduce using rule 132 (semi_opt -> semi_opt COMMA .)


state 244

    (15) case_list -> CASE . expr sep stmt_list_opt case_list
    (16) case_list -> CASE . expr error stmt_list_opt case_list
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 268
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 245

    (17) case_list -> OTHERWISE . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list                      shift and go to state 269
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 246

    (159) try_catch -> TRY stmt_list CATCH stmt_list . END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 270
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 247

    (161) while_stmt -> WHILE expr SEMI stmt_list . END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 271
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 248

    (160) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list . END_UNWIND_PROTECT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_UNWIND_PROTECT shift and go to state 272
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 249

    (26) concat_list -> expr_list SEMI expr_list .

    RBRACE          reduce using rule 26 (concat_list -> expr_list SEMI expr_list .)
    SEMI            reduce using rule 26 (concat_list -> expr_list SEMI expr_list .)
    RBRACKET        reduce using rule 26 (concat_list -> expr_list SEMI expr_list .)


state 250

    (21) cellarray -> LBRACE concat_list SEMI RBRACE .

    OROR            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LBRACE          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    PLUSPLUS        reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MINUSMINUS      reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    FIELD           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LPAREN          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    TRANSPOSE       reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    AND             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    ANDAND          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    BACKSLASH       reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    COLON           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DIV             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOT             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTDIV          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTDIVEQ        reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTEXP          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTMUL          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DOTMULEQ        reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EQEQ            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    POW             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EXP             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EXPEQ           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    GE              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    GT              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LE              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    LT              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MINUS           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MUL             reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    NE              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OR              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    PLUS            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    EQ              reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MULEQ           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    DIVEQ           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    MINUSEQ         reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    PLUSEQ          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OREQ            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    ANDEQ           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    COMMA           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    SEMI            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    RPAREN          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    CASE            reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    OTHERWISE       reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    END_STMT        reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    RBRACE          reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    RBRACKET        reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)
    error           reduce using rule 21 (cellarray -> LBRACE concat_list SEMI RBRACE .)


state 251

    (27) concat_list -> concat_list SEMI expr_list .

    RBRACE          reduce using rule 27 (concat_list -> concat_list SEMI expr_list .)
    SEMI            reduce using rule 27 (concat_list -> concat_list SEMI expr_list .)
    RBRACKET        reduce using rule 27 (concat_list -> concat_list SEMI expr_list .)


state 252

    (118) matrix -> LBRACKET concat_list SEMI RBRACKET .

    OROR            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LBRACE          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUSPLUS        reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUSMINUS      reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    FIELD           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LPAREN          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    AND             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDAND          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COLON           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIV             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOT             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTDIVEQ        reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMULEQ        reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQEQ            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    POW             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EXP             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EXPEQ           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GE              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GT              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LE              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LT              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUS           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MUL             reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    NE              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OR              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUS            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQ              reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MULEQ           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIVEQ           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUSEQ         reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUSEQ          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OREQ            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDEQ           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COMMA           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    SEMI            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RPAREN          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    CASE            reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    END_STMT        reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACE          reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    error           reduce using rule 118 (matrix -> LBRACKET concat_list SEMI RBRACKET .)


state 253

    (120) matrix -> LBRACKET expr_list SEMI RBRACKET .

    OROR            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LBRACE          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUSPLUS        reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUSMINUS      reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    FIELD           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LPAREN          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    AND             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDAND          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COLON           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIV             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOT             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTDIVEQ        reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMULEQ        reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQEQ            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    POW             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EXP             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EXPEQ           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GE              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GT              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LE              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LT              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUS           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MUL             reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    NE              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OR              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUS            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQ              reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MULEQ           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIVEQ           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUSEQ         reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUSEQ          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OREQ            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDEQ           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COMMA           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    SEMI            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RPAREN          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    CASE            reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    END_STMT        reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACE          reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    error           reduce using rule 120 (matrix -> LBRACKET expr_list SEMI RBRACKET .)


state 254

    (114) lambda_args -> LPAREN arg_list RPAREN .

    NEG             reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    IDENT           reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    END_EXPR        reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    STRING          reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    COLON           reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    HANDLE          reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    PLUSPLUS        reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    MINUSMINUS      reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)
    SEMI            reduce using rule 114 (lambda_args -> LPAREN arg_list RPAREN .)


state 255

    (10) arg_list -> arg_list COMMA . ident_init_opt
    (88) ident_init_opt -> . NEG
    (89) ident_init_opt -> . ident
    (90) ident_init_opt -> . ident EQ expr
    (87) ident -> . IDENT

    NEG             shift and go to state 224
    IDENT           shift and go to state 45

    ident_init_opt                 shift and go to state 273
    ident                          shift and go to state 225

state 256

    (90) ident_init_opt -> ident EQ . expr
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 125
    expr                           shift and go to state 274
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 257

    (104) func_stmt -> FUNCTION ret EQ ident lambda_args . SEMI

    SEMI            shift and go to state 275


state 258

    (110) global_stmt -> GLOBAL ident EQ expr SEMI .

    END_STMT        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    END_FUNCTION    reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    CONTINUE        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    COMMENT         reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    FUNCTION        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    BREAK           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    GLOBAL          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    PERSISTENT      reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    ERROR_STMT      reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    FOR             reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    IF              reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    SEMI            reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    COMMA           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    RETURN          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    SWITCH          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    TRY             reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    WHILE           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    UNWIND_PROTECT  reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    IDENT           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    NEG             reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    LPAREN          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    END_EXPR        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    NUMBER          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    STRING          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    COLON           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    LBRACKET        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    LBRACE          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    MINUS           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    PLUS            reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    HANDLE          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    PLUSPLUS        reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    MINUSMINUS      reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    $end            reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    CATCH           reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    ELSE            reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    ELSEIF          reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    END_UNWIND_PROTECT reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    CASE            reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)
    OTHERWISE       reduce using rule 110 (global_stmt -> GLOBAL ident EQ expr SEMI .)


state 259

    (125) persistent_stmt -> PERSISTENT ident EQ expr SEMI .

    END_STMT        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    END_FUNCTION    reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    CONTINUE        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    COMMENT         reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    FUNCTION        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    BREAK           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    GLOBAL          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    PERSISTENT      reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    ERROR_STMT      reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    FOR             reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    IF              reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    SEMI            reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    COMMA           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    RETURN          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    SWITCH          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    TRY             reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    WHILE           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    UNWIND_PROTECT  reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    IDENT           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    NEG             reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    LPAREN          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    END_EXPR        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    NUMBER          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    STRING          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    COLON           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    LBRACKET        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    LBRACE          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    MINUS           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    PLUS            reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    HANDLE          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    PLUSPLUS        reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    MINUSMINUS      reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    $end            reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    CATCH           reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    ELSE            reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    ELSEIF          reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    END_UNWIND_PROTECT reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    CASE            reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)
    OTHERWISE       reduce using rule 125 (persistent_stmt -> PERSISTENT ident EQ expr SEMI .)


state 260

    (100) for_stmt -> FOR ident EQ expr SEMI . stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 27
    expr                           shift and go to state 31
    stmt_list                      shift and go to state 276
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 261

    (101) for_stmt -> FOR LPAREN ident EQ expr . RPAREN SEMI stmt_list END_STMT
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 277
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 262

    (102) for_stmt -> FOR matrix EQ expr SEMI . stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    matrix                         shift and go to state 36
    expr                           shift and go to state 31
    stmt_list                      shift and go to state 278
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 263

    (111) if_stmt -> IF expr sep stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 279


state 264

    (30) elseif_stmt -> ELSE . stmt_list_opt
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt_list_opt                  shift and go to state 280
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 265

    (31) elseif_stmt -> ELSEIF . expr sep stmt_list_opt elseif_stmt
    (32) elseif_stmt -> ELSEIF . LPAREN expr RPAREN stmt_list_opt elseif_stmt
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    LPAREN          shift and go to state 282
    NEG             shift and go to state 51
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 281
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 266

    (112) if_stmt -> IF LPAREN expr RPAREN stmt_list_opt . elseif_stmt END_STMT
    (29) elseif_stmt -> .
    (30) elseif_stmt -> . ELSE stmt_list_opt
    (31) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt
    (32) elseif_stmt -> . ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 29 (elseif_stmt -> .)
    ELSE            shift and go to state 264
    ELSEIF          shift and go to state 265

    elseif_stmt                    shift and go to state 283

state 267

    (157) switch_stmt -> SWITCH expr semi_opt case_list END_STMT .

    END_STMT        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_FUNCTION    reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CONTINUE        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COMMENT         reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FUNCTION        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    BREAK           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    GLOBAL          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PERSISTENT      reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ERROR_STMT      reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FOR             reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IF              reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SEMI            reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COMMA           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    RETURN          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SWITCH          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    TRY             reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    WHILE           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IDENT           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NEG             reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LPAREN          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_EXPR        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NUMBER          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    STRING          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COLON           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACKET        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACE          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    MINUS           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PLUS            reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    HANDLE          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PLUSPLUS        reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    MINUSMINUS      reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    $end            reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CATCH           reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSE            reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSEIF          reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CASE            reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    OTHERWISE       reduce using rule 157 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)


state 268

    (15) case_list -> CASE expr . sep stmt_list_opt case_list
    (16) case_list -> CASE expr . error stmt_list_opt case_list
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr
    (133) sep -> . COMMA
    (134) sep -> . SEMI

    error           shift and go to state 285
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117
    COMMA           shift and go to state 203
    SEMI            shift and go to state 204

    sep                            shift and go to state 284

state 269

    (17) case_list -> OTHERWISE stmt_list .
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        reduce using rule 17 (case_list -> OTHERWISE stmt_list .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    expr                           shift and go to state 31
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 270

    (159) try_catch -> TRY stmt_list CATCH stmt_list END_STMT .

    END_STMT        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_FUNCTION    reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CONTINUE        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COMMENT         reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FUNCTION        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    BREAK           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    GLOBAL          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PERSISTENT      reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ERROR_STMT      reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FOR             reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IF              reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SEMI            reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COMMA           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    RETURN          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SWITCH          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    TRY             reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    WHILE           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IDENT           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NEG             reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LPAREN          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_EXPR        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NUMBER          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    STRING          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COLON           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACKET        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACE          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    MINUS           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PLUS            reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    HANDLE          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    $end            reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CATCH           reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSE            reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSEIF          reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CASE            reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    OTHERWISE       reduce using rule 159 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)


state 271

    (161) while_stmt -> WHILE expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_FUNCTION    reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COMMENT         reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ERROR_STMT      reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 161 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)


state 272

    (160) unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .

    END_STMT        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    END_FUNCTION    reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CONTINUE        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    COMMENT         reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    FUNCTION        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    BREAK           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    GLOBAL          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PERSISTENT      reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    ERROR_STMT      reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    FOR             reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    IF              reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    SEMI            reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    COMMA           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    RETURN          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    SWITCH          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    TRY             reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    WHILE           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    UNWIND_PROTECT  reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    IDENT           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    NEG             reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LPAREN          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    END_EXPR        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    NUMBER          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    STRING          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    COLON           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LBRACKET        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    LBRACE          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    MINUS           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PLUS            reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    HANDLE          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    PLUSPLUS        reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    MINUSMINUS      reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    $end            reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CATCH           reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    ELSE            reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    ELSEIF          reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    END_UNWIND_PROTECT reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    CASE            reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)
    OTHERWISE       reduce using rule 160 (unwind -> UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT .)


state 273

    (10) arg_list -> arg_list COMMA ident_init_opt .

    RPAREN          reduce using rule 10 (arg_list -> arg_list COMMA ident_init_opt .)
    COMMA           reduce using rule 10 (arg_list -> arg_list COMMA ident_init_opt .)


state 274

    (90) ident_init_opt -> ident EQ expr .
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          reduce using rule 90 (ident_init_opt -> ident EQ expr .)
    COMMA           reduce using rule 90 (ident_init_opt -> ident EQ expr .)
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 275

    (104) func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .

    END_STMT        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    END_FUNCTION    reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    CONTINUE        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    COMMENT         reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    FUNCTION        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    BREAK           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    GLOBAL          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    PERSISTENT      reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    ERROR_STMT      reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    FOR             reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    IF              reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    SEMI            reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    COMMA           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    RETURN          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    SWITCH          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    TRY             reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    WHILE           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    UNWIND_PROTECT  reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    IDENT           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    NEG             reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    LPAREN          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    END_EXPR        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    NUMBER          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    STRING          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    COLON           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    LBRACKET        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    LBRACE          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    MINUS           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    PLUS            reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    HANDLE          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    PLUSPLUS        reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    MINUSMINUS      reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    $end            reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    CATCH           reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    UNWIND_PROTECT_CLEANUP reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    ELSE            reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    ELSEIF          reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    END_UNWIND_PROTECT reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    CASE            reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)
    OTHERWISE       reduce using rule 104 (func_stmt -> FUNCTION ret EQ ident lambda_args SEMI .)


state 276

    (100) for_stmt -> FOR ident EQ expr SEMI stmt_list . END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 286
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 27
    expr                           shift and go to state 31
    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 277

    (101) for_stmt -> FOR LPAREN ident EQ expr RPAREN . SEMI stmt_list END_STMT

    SEMI            shift and go to state 287


state 278

    (102) for_stmt -> FOR matrix EQ expr SEMI stmt_list . END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 288
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    matrix                         shift and go to state 36
    expr                           shift and go to state 31
    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 279

    (111) if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .

    END_STMT        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_FUNCTION    reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COMMENT         reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PERSISTENT      reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ERROR_STMT      reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT  reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PLUSPLUS        reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    MINUSMINUS      reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CATCH           reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_UNWIND_PROTECT reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 111 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)


state 280

    (30) elseif_stmt -> ELSE stmt_list_opt .

    END_STMT        reduce using rule 30 (elseif_stmt -> ELSE stmt_list_opt .)


state 281

    (31) elseif_stmt -> ELSEIF expr . sep stmt_list_opt elseif_stmt
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr
    (133) sep -> . COMMA
    (134) sep -> . SEMI

    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117
    COMMA           shift and go to state 203
    SEMI            shift and go to state 204

    sep                            shift and go to state 289

state 282

    (32) elseif_stmt -> ELSEIF LPAREN . expr RPAREN stmt_list_opt elseif_stmt
    (123) expr -> LPAREN . expr RPAREN
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (87) ident -> . IDENT
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    IDENT           shift and go to state 45
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 290
    ident                          shift and go to state 125
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    matrix                         shift and go to state 36
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 283

    (112) if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 291


state 284

    (15) case_list -> CASE expr sep . stmt_list_opt case_list
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CASE            reduce using rule 155 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 292
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 285

    (16) case_list -> CASE expr error . stmt_list_opt case_list
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CASE            reduce using rule 155 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 293
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 286

    (100) for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    END_FUNCTION    reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    COMMENT         reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    ERROR_STMT      reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 100 (for_stmt -> FOR ident EQ expr SEMI stmt_list END_STMT .)


state 287

    (101) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI . stmt_list END_STMT
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 27
    expr                           shift and go to state 31
    stmt_list                      shift and go to state 294
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 288

    (102) for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    END_FUNCTION    reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    COMMENT         reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    ERROR_STMT      reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 102 (for_stmt -> FOR matrix EQ expr SEMI stmt_list END_STMT .)


state 289

    (31) elseif_stmt -> ELSEIF expr sep . stmt_list_opt elseif_stmt
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    ELSE            reduce using rule 155 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 295
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 290

    (32) elseif_stmt -> ELSEIF LPAREN expr . RPAREN stmt_list_opt elseif_stmt
    (123) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . LBRACE expr_list RBRACE
    (23) expr -> expr . LBRACE RBRACE
    (45) expr -> expr . PLUSPLUS
    (46) expr -> expr . MINUSMINUS
    (98) expr -> expr . FIELD
    (105) expr -> expr . LPAREN expr_list RPAREN
    (106) expr -> expr . LPAREN RPAREN
    (158) expr -> expr . TRANSPOSE
    (53) expr2 -> expr . AND expr
    (54) expr2 -> expr . ANDAND expr
    (55) expr2 -> expr . BACKSLASH expr
    (56) expr2 -> expr . COLON expr
    (57) expr2 -> expr . DIV expr
    (58) expr2 -> expr . DOT expr
    (59) expr2 -> expr . DOTDIV expr
    (60) expr2 -> expr . DOTDIVEQ expr
    (61) expr2 -> expr . DOTEXP expr
    (62) expr2 -> expr . DOTMUL expr
    (63) expr2 -> expr . DOTMULEQ expr
    (64) expr2 -> expr . EQEQ expr
    (65) expr2 -> expr . POW expr
    (66) expr2 -> expr . EXP expr
    (67) expr2 -> expr . EXPEQ expr
    (68) expr2 -> expr . GE expr
    (69) expr2 -> expr . GT expr
    (70) expr2 -> expr . LE expr
    (71) expr2 -> expr . LT expr
    (72) expr2 -> expr . MINUS expr
    (73) expr2 -> expr . MUL expr
    (74) expr2 -> expr . NE expr
    (75) expr2 -> expr . OR expr
    (76) expr2 -> expr . OROR expr
    (77) expr2 -> expr . PLUS expr
    (78) expr2 -> expr . EQ expr
    (79) expr2 -> expr . MULEQ expr
    (80) expr2 -> expr . DIVEQ expr
    (81) expr2 -> expr . MINUSEQ expr
    (82) expr2 -> expr . PLUSEQ expr
    (83) expr2 -> expr . OREQ expr
    (84) expr2 -> expr . ANDEQ expr

    RPAREN          shift and go to state 296
    LBRACE          shift and go to state 81
    PLUSPLUS        shift and go to state 82
    MINUSMINUS      shift and go to state 83
    FIELD           shift and go to state 84
    LPAREN          shift and go to state 85
    TRANSPOSE       shift and go to state 86
    AND             shift and go to state 87
    ANDAND          shift and go to state 88
    BACKSLASH       shift and go to state 89
    COLON           shift and go to state 90
    DIV             shift and go to state 91
    DOT             shift and go to state 92
    DOTDIV          shift and go to state 93
    DOTDIVEQ        shift and go to state 94
    DOTEXP          shift and go to state 95
    DOTMUL          shift and go to state 96
    DOTMULEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    POW             shift and go to state 99
    EXP             shift and go to state 100
    EXPEQ           shift and go to state 101
    GE              shift and go to state 102
    GT              shift and go to state 103
    LE              shift and go to state 104
    LT              shift and go to state 105
    MINUS           shift and go to state 106
    MUL             shift and go to state 107
    NE              shift and go to state 108
    OR              shift and go to state 109
    OROR            shift and go to state 201
    PLUS            shift and go to state 110
    EQ              shift and go to state 111
    MULEQ           shift and go to state 112
    DIVEQ           shift and go to state 113
    MINUSEQ         shift and go to state 114
    PLUSEQ          shift and go to state 115
    OREQ            shift and go to state 116
    ANDEQ           shift and go to state 117


state 291

    (112) if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .

    END_STMT        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    END_FUNCTION    reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    COMMENT         reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    PERSISTENT      reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    ERROR_STMT      reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT  reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    PLUSPLUS        reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    MINUSMINUS      reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    CATCH           reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    END_UNWIND_PROTECT reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 112 (if_stmt -> IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT .)


state 292

    (15) case_list -> CASE expr sep stmt_list_opt . case_list
    (14) case_list -> .
    (15) case_list -> . CASE expr sep stmt_list_opt case_list
    (16) case_list -> . CASE expr error stmt_list_opt case_list
    (17) case_list -> . OTHERWISE stmt_list

    END_STMT        reduce using rule 14 (case_list -> .)
    CASE            shift and go to state 244
    OTHERWISE       shift and go to state 245

    case_list                      shift and go to state 297

state 293

    (16) case_list -> CASE expr error stmt_list_opt . case_list
    (14) case_list -> .
    (15) case_list -> . CASE expr sep stmt_list_opt case_list
    (16) case_list -> . CASE expr error stmt_list_opt case_list
    (17) case_list -> . OTHERWISE stmt_list

    END_STMT        reduce using rule 14 (case_list -> .)
    CASE            shift and go to state 244
    OTHERWISE       shift and go to state 245

    case_list                      shift and go to state 298

state 294

    (101) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list . END_STMT
    (154) stmt_list -> stmt_list . stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    END_STMT        shift and go to state 299
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    SEMI            shift and go to state 24
    COMMA           shift and go to state 38
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    LPAREN          shift and go to state 35
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    COLON           shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    MINUS           shift and go to state 63
    PLUS            shift and go to state 64
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

    ident                          shift and go to state 27
    expr                           shift and go to state 31
    stmt                           shift and go to state 208
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 295

    (31) elseif_stmt -> ELSEIF expr sep stmt_list_opt . elseif_stmt
    (29) elseif_stmt -> .
    (30) elseif_stmt -> . ELSE stmt_list_opt
    (31) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt
    (32) elseif_stmt -> . ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 29 (elseif_stmt -> .)
    ELSE            shift and go to state 264
    ELSEIF          shift and go to state 265

    elseif_stmt                    shift and go to state 300

state 296

    (32) elseif_stmt -> ELSEIF LPAREN expr RPAREN . stmt_list_opt elseif_stmt
    (123) expr -> LPAREN expr RPAREN .
    (155) stmt_list_opt -> .
    (156) stmt_list_opt -> . stmt_list
    (153) stmt_list -> . stmt
    (154) stmt_list -> . stmt_list stmt
    (135) stmt -> . continue_stmt
    (136) stmt -> . comment_stmt
    (137) stmt -> . func_stmt
    (138) stmt -> . break_stmt
    (139) stmt -> . expr_stmt
    (140) stmt -> . global_stmt
    (141) stmt -> . persistent_stmt
    (142) stmt -> . error_stmt
    (143) stmt -> . command
    (144) stmt -> . for_stmt
    (145) stmt -> . if_stmt
    (146) stmt -> . null_stmt
    (147) stmt -> . return_stmt
    (148) stmt -> . switch_stmt
    (149) stmt -> . try_catch
    (150) stmt -> . while_stmt
    (151) stmt -> . foo_stmt
    (152) stmt -> . unwind
    (28) continue_stmt -> . CONTINUE SEMI
    (25) comment_stmt -> . COMMENT
    (103) func_stmt -> . FUNCTION ident lambda_args SEMI
    (104) func_stmt -> . FUNCTION ret EQ ident lambda_args SEMI
    (13) break_stmt -> . BREAK SEMI
    (94) expr_stmt -> . expr_list SEMI
    (109) global_stmt -> . GLOBAL global_list SEMI
    (110) global_stmt -> . GLOBAL ident EQ expr SEMI
    (124) persistent_stmt -> . PERSISTENT global_list SEMI
    (125) persistent_stmt -> . PERSISTENT ident EQ expr SEMI
    (33) error_stmt -> . ERROR_STMT SEMI
    (24) command -> . ident args SEMI
    (100) for_stmt -> . FOR ident EQ expr SEMI stmt_list END_STMT
    (101) for_stmt -> . FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT
    (102) for_stmt -> . FOR matrix EQ expr SEMI stmt_list END_STMT
    (111) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (112) if_stmt -> . IF LPAREN expr RPAREN stmt_list_opt elseif_stmt END_STMT
    (121) null_stmt -> . SEMI
    (122) null_stmt -> . COMMA
    (129) return_stmt -> . RETURN SEMI
    (157) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (159) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (161) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (99) foo_stmt -> . expr OROR expr SEMI
    (160) unwind -> . UNWIND_PROTECT stmt_list UNWIND_PROTECT_CLEANUP stmt_list END_UNWIND_PROTECT
    (91) expr_list -> . exprs
    (92) expr_list -> . exprs COMMA
    (87) ident -> . IDENT
    (22) expr -> . expr LBRACE expr_list RBRACE
    (23) expr -> . expr LBRACE RBRACE
    (34) expr -> . ident
    (35) expr -> . end
    (36) expr -> . number
    (37) expr -> . string
    (38) expr -> . colon
    (39) expr -> . NEG
    (40) expr -> . matrix
    (41) expr -> . cellarray
    (42) expr -> . expr2
    (43) expr -> . expr1
    (44) expr -> . lambda_expr
    (45) expr -> . expr PLUSPLUS
    (46) expr -> . expr MINUSMINUS
    (98) expr -> . expr FIELD
    (105) expr -> . expr LPAREN expr_list RPAREN
    (106) expr -> . expr LPAREN RPAREN
    (123) expr -> . LPAREN expr RPAREN
    (158) expr -> . expr TRANSPOSE
    (96) exprs -> . expr
    (97) exprs -> . exprs COMMA expr
    (86) end -> . END_EXPR
    (93) number -> . NUMBER
    (95) string -> . STRING
    (85) colon -> . COLON
    (116) matrix -> . LBRACKET RBRACKET
    (117) matrix -> . LBRACKET concat_list RBRACKET
    (118) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (119) matrix -> . LBRACKET expr_list RBRACKET
    (120) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (18) cellarray -> . LBRACE RBRACE
    (19) cellarray -> . LBRACE expr_list RBRACE
    (20) cellarray -> . LBRACE concat_list RBRACE
    (21) cellarray -> . LBRACE concat_list SEMI RBRACE
    (53) expr2 -> . expr AND expr
    (54) expr2 -> . expr ANDAND expr
    (55) expr2 -> . expr BACKSLASH expr
    (56) expr2 -> . expr COLON expr
    (57) expr2 -> . expr DIV expr
    (58) expr2 -> . expr DOT expr
    (59) expr2 -> . expr DOTDIV expr
    (60) expr2 -> . expr DOTDIVEQ expr
    (61) expr2 -> . expr DOTEXP expr
    (62) expr2 -> . expr DOTMUL expr
    (63) expr2 -> . expr DOTMULEQ expr
    (64) expr2 -> . expr EQEQ expr
    (65) expr2 -> . expr POW expr
    (66) expr2 -> . expr EXP expr
    (67) expr2 -> . expr EXPEQ expr
    (68) expr2 -> . expr GE expr
    (69) expr2 -> . expr GT expr
    (70) expr2 -> . expr LE expr
    (71) expr2 -> . expr LT expr
    (72) expr2 -> . expr MINUS expr
    (73) expr2 -> . expr MUL expr
    (74) expr2 -> . expr NE expr
    (75) expr2 -> . expr OR expr
    (76) expr2 -> . expr OROR expr
    (77) expr2 -> . expr PLUS expr
    (78) expr2 -> . expr EQ expr
    (79) expr2 -> . expr MULEQ expr
    (80) expr2 -> . expr DIVEQ expr
    (81) expr2 -> . expr MINUSEQ expr
    (82) expr2 -> . expr PLUSEQ expr
    (83) expr2 -> . expr OREQ expr
    (84) expr2 -> . expr ANDEQ expr
    (47) expr1 -> . MINUS expr
    (48) expr1 -> . PLUS expr
    (49) expr1 -> . NEG expr
    (50) expr1 -> . HANDLE ident
    (51) expr1 -> . PLUSPLUS ident
    (52) expr1 -> . MINUSMINUS ident
    (115) lambda_expr -> . HANDLE lambda_args expr

    FIELD           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    BACKSLASH       reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIV          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTDIVEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTEXP          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMUL          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DOTMULEQ        reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXP             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EXPEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MULEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIVEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUSEQ         reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PLUSEQ          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OREQ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ANDEQ           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 155 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 155 (stmt_list_opt -> .)
    END_STMT        reduce using rule 155 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 23
    COMMENT         shift and go to state 25
    FUNCTION        shift and go to state 26
    BREAK           shift and go to state 28
    GLOBAL          shift and go to state 30
    PERSISTENT      shift and go to state 32
    ERROR_STMT      shift and go to state 33
    FOR             shift and go to state 34
    IF              shift and go to state 37
    RETURN          shift and go to state 39
    SWITCH          shift and go to state 40
    TRY             shift and go to state 41
    WHILE           shift and go to state 42
    UNWIND_PROTECT  shift and go to state 43
    IDENT           shift and go to state 45
    NEG             shift and go to state 51
    END_EXPR        shift and go to state 58
    NUMBER          shift and go to state 59
    STRING          shift and go to state 60
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 46
    HANDLE          shift and go to state 65
    PLUSPLUS        shift and go to state 56
    MINUSMINUS      shift and go to state 57

  ! LBRACE          [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! PLUSPLUS        [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! MINUSMINUS      [ reduce using rule 123 (expr -> LPAREN expr RPAREN .) ]
  ! SEMI            [ shift and go to state 24 ]
  ! COMMA           [ shift and go to state 38 ]
  ! LPAREN          [ shift and go to state 35 ]
  ! COLON           [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 63 ]
  ! PLUS            [ shift and go to state 64 ]

    expr                           shift and go to state 31
    stmt_list_opt                  shift and go to state 301
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 131
    continue_stmt                  shift and go to state 5
    comment_stmt                   shift and go to state 6
    func_stmt                      shift and go to state 7
    break_stmt                     shift and go to state 8
    expr_stmt                      shift and go to state 9
    global_stmt                    shift and go to state 10
    persistent_stmt                shift and go to state 11
    error_stmt                     shift and go to state 12
    command                        shift and go to state 13
    for_stmt                       shift and go to state 14
    if_stmt                        shift and go to state 15
    null_stmt                      shift and go to state 16
    return_stmt                    shift and go to state 17
    switch_stmt                    shift and go to state 18
    try_catch                      shift and go to state 19
    while_stmt                     shift and go to state 20
    foo_stmt                       shift and go to state 21
    unwind                         shift and go to state 22
    ident                          shift and go to state 27
    expr_list                      shift and go to state 29
    matrix                         shift and go to state 36
    exprs                          shift and go to state 44
    end                            shift and go to state 47
    number                         shift and go to state 48
    string                         shift and go to state 49
    colon                          shift and go to state 50
    cellarray                      shift and go to state 52
    expr2                          shift and go to state 53
    expr1                          shift and go to state 54
    lambda_expr                    shift and go to state 55

state 297

    (15) case_list -> CASE expr sep stmt_list_opt case_list .

    END_STMT        reduce using rule 15 (case_list -> CASE expr sep stmt_list_opt case_list .)


state 298

    (16) case_list -> CASE expr error stmt_list_opt case_list .

    END_STMT        reduce using rule 16 (case_list -> CASE expr error stmt_list_opt case_list .)


state 299

    (101) for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    END_FUNCTION    reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    COMMENT         reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PERSISTENT      reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    ERROR_STMT      reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    FOR             reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    IF              reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    TRY             reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    UNWIND_PROTECT  reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    NEG             reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    STRING          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    COLON           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    PLUSPLUS        reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    MINUSMINUS      reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    $end            reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    UNWIND_PROTECT_CLEANUP reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    END_UNWIND_PROTECT reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    CASE            reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 101 (for_stmt -> FOR LPAREN ident EQ expr RPAREN SEMI stmt_list END_STMT .)


state 300

    (31) elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .

    END_STMT        reduce using rule 31 (elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .)


state 301

    (32) elseif_stmt -> ELSEIF LPAREN expr RPAREN stmt_list_opt . elseif_stmt
    (29) elseif_stmt -> .
    (30) elseif_stmt -> . ELSE stmt_list_opt
    (31) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt
    (32) elseif_stmt -> . ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 29 (elseif_stmt -> .)
    ELSE            shift and go to state 264
    ELSEIF          shift and go to state 265

    elseif_stmt                    shift and go to state 302

state 302

    (32) elseif_stmt -> ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt .

    END_STMT        reduce using rule 32 (elseif_stmt -> ELSEIF LPAREN expr RPAREN stmt_list_opt elseif_stmt .)

